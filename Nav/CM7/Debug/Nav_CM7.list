
Nav_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cf4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08008f94  08008f94  00018f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800908c  0800908c  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  0800908c  0800908c  0001908c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009094  08009094  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009094  08009094  00019094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009098  08009098  00019098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  0800909c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000074  08009110  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d4  08009170  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000730  24000134  080091d0  00020134  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000864  080091d0  00020864  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020c6f  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003474  00000000  00000000  00040dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016e8  00000000  00000000  00044248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000015a0  00000000  00000000  00045930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d6f3  00000000  00000000  00046ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ca7f  00000000  00000000  000845c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00191825  00000000  00000000  000a1042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00232867  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006a18  00000000  00000000  002328b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008f7c 	.word	0x08008f7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	08008f7c 	.word	0x08008f7c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b08b      	sub	sp, #44	; 0x2c
 80007b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;
  float_t fracn1, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80007b6:	4bb1      	ldr	r3, [pc, #708]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 80007b8:	691b      	ldr	r3, [r3, #16]
 80007ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80007be:	2b18      	cmp	r3, #24
 80007c0:	f200 812e 	bhi.w	8000a20 <SystemCoreClockUpdate+0x270>
 80007c4:	a201      	add	r2, pc, #4	; (adr r2, 80007cc <SystemCoreClockUpdate+0x1c>)
 80007c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ca:	bf00      	nop
 80007cc:	08000831 	.word	0x08000831
 80007d0:	08000a21 	.word	0x08000a21
 80007d4:	08000a21 	.word	0x08000a21
 80007d8:	08000a21 	.word	0x08000a21
 80007dc:	08000a21 	.word	0x08000a21
 80007e0:	08000a21 	.word	0x08000a21
 80007e4:	08000a21 	.word	0x08000a21
 80007e8:	08000a21 	.word	0x08000a21
 80007ec:	08000845 	.word	0x08000845
 80007f0:	08000a21 	.word	0x08000a21
 80007f4:	08000a21 	.word	0x08000a21
 80007f8:	08000a21 	.word	0x08000a21
 80007fc:	08000a21 	.word	0x08000a21
 8000800:	08000a21 	.word	0x08000a21
 8000804:	08000a21 	.word	0x08000a21
 8000808:	08000a21 	.word	0x08000a21
 800080c:	0800084b 	.word	0x0800084b
 8000810:	08000a21 	.word	0x08000a21
 8000814:	08000a21 	.word	0x08000a21
 8000818:	08000a21 	.word	0x08000a21
 800081c:	08000a21 	.word	0x08000a21
 8000820:	08000a21 	.word	0x08000a21
 8000824:	08000a21 	.word	0x08000a21
 8000828:	08000a21 	.word	0x08000a21
 800082c:	08000851 	.word	0x08000851
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 8000830:	4b92      	ldr	r3, [pc, #584]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	f003 0303 	and.w	r3, r3, #3
 800083a:	4a91      	ldr	r2, [pc, #580]	; (8000a80 <SystemCoreClockUpdate+0x2d0>)
 800083c:	fa22 f303 	lsr.w	r3, r2, r3
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000842:	e0f7      	b.n	8000a34 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    common_system_clock = CSI_VALUE;
 8000844:	4b8f      	ldr	r3, [pc, #572]	; (8000a84 <SystemCoreClockUpdate+0x2d4>)
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000848:	e0f4      	b.n	8000a34 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    common_system_clock = HSE_VALUE;
 800084a:	4b8f      	ldr	r3, [pc, #572]	; (8000a88 <SystemCoreClockUpdate+0x2d8>)
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800084e:	e0f1      	b.n	8000a34 <SystemCoreClockUpdate+0x284>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000850:	4b8a      	ldr	r3, [pc, #552]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 8000852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000854:	f003 0303 	and.w	r3, r3, #3
 8000858:	61fb      	str	r3, [r7, #28]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800085a:	4b88      	ldr	r3, [pc, #544]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 800085c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085e:	091b      	lsrs	r3, r3, #4
 8000860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000864:	61bb      	str	r3, [r7, #24]
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000866:	4b85      	ldr	r3, [pc, #532]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 8000868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	617b      	str	r3, [r7, #20]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000870:	4b82      	ldr	r3, [pc, #520]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 8000872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000874:	08db      	lsrs	r3, r3, #3
 8000876:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	fb02 f303 	mul.w	r3, r2, r3
 8000880:	ee07 3a90 	vmov	s15, r3
 8000884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000888:	edc7 7a04 	vstr	s15, [r7, #16]

    if (pllm != 0U)
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	2b00      	cmp	r3, #0
 8000890:	f000 80c3 	beq.w	8000a1a <SystemCoreClockUpdate+0x26a>
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d059      	beq.n	800094e <SystemCoreClockUpdate+0x19e>
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d878      	bhi.n	8000992 <SystemCoreClockUpdate+0x1e2>
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d003      	beq.n	80008ae <SystemCoreClockUpdate+0xfe>
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d02e      	beq.n	800090a <SystemCoreClockUpdate+0x15a>
 80008ac:	e071      	b.n	8000992 <SystemCoreClockUpdate+0x1e2>
    {
      switch (pllsource)
      {
        case RCC_PLLCKSELR_PLLSRC_HSI:  /* HSI used as PLL clock source */

        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 80008ae:	4b73      	ldr	r3, [pc, #460]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	08db      	lsrs	r3, r3, #3
 80008b4:	f003 0303 	and.w	r3, r3, #3
 80008b8:	4a71      	ldr	r2, [pc, #452]	; (8000a80 <SystemCoreClockUpdate+0x2d0>)
 80008ba:	fa22 f303 	lsr.w	r3, r2, r3
 80008be:	60fb      	str	r3, [r7, #12]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	ee07 3a90 	vmov	s15, r3
 80008c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	ee07 3a90 	vmov	s15, r3
 80008d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008d8:	4b68      	ldr	r3, [pc, #416]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80008e0:	ee07 3a90 	vmov	s15, r3
 80008e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80008e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80008ec:	eddf 5a67 	vldr	s11, [pc, #412]	; 8000a8c <SystemCoreClockUpdate+0x2dc>
 80008f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80008f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80008f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80008fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000904:	edc7 7a08 	vstr	s15, [r7, #32]

        break;
 8000908:	e071      	b.n	80009ee <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	ee07 3a90 	vmov	s15, r3
 8000910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000914:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8000a90 <SystemCoreClockUpdate+0x2e0>
 8000918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800091c:	4b57      	ldr	r3, [pc, #348]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800092c:	ed97 6a04 	vldr	s12, [r7, #16]
 8000930:	eddf 5a56 	vldr	s11, [pc, #344]	; 8000a8c <SystemCoreClockUpdate+0x2dc>
 8000934:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000938:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800093c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000948:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 800094c:	e04f      	b.n	80009ee <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	ee07 3a90 	vmov	s15, r3
 8000954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000958:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8000a94 <SystemCoreClockUpdate+0x2e4>
 800095c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000960:	4b46      	ldr	r3, [pc, #280]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000970:	ed97 6a04 	vldr	s12, [r7, #16]
 8000974:	eddf 5a45 	vldr	s11, [pc, #276]	; 8000a8c <SystemCoreClockUpdate+0x2dc>
 8000978:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800097c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000984:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800098c:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 8000990:	e02d      	b.n	80009ee <SystemCoreClockUpdate+0x23e>

      default:
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8000992:	4b3a      	ldr	r3, [pc, #232]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	08db      	lsrs	r3, r3, #3
 8000998:	f003 0303 	and.w	r3, r3, #3
 800099c:	4a38      	ldr	r2, [pc, #224]	; (8000a80 <SystemCoreClockUpdate+0x2d0>)
 800099e:	fa22 f303 	lsr.w	r3, r2, r3
 80009a2:	60fb      	str	r3, [r7, #12]
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	ee07 3a90 	vmov	s15, r3
 80009aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	ee07 3a90 	vmov	s15, r3
 80009b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80009bc:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009c4:	ee07 3a90 	vmov	s15, r3
 80009c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80009cc:	ed97 6a04 	vldr	s12, [r7, #16]
 80009d0:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8000a8c <SystemCoreClockUpdate+0x2dc>
 80009d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80009d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80009dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80009e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80009e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009e8:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 80009ec:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	0a5b      	lsrs	r3, r3, #9
 80009f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009f8:	3301      	adds	r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	ee07 3a90 	vmov	s15, r3
 8000a02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a06:	edd7 6a08 	vldr	s13, [r7, #32]
 8000a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a12:	ee17 3a90 	vmov	r3, s15
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    }
    else
    {
      common_system_clock = 0U;
    }
    break;
 8000a18:	e00c      	b.n	8000a34 <SystemCoreClockUpdate+0x284>
      common_system_clock = 0U;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000a1e:	e009      	b.n	8000a34 <SystemCoreClockUpdate+0x284>

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	08db      	lsrs	r3, r3, #3
 8000a26:	f003 0303 	and.w	r3, r3, #3
 8000a2a:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <SystemCoreClockUpdate+0x2d0>)
 8000a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000a32:	bf00      	nop
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 030f 	and.w	r3, r3, #15
 8000a3e:	4a16      	ldr	r2, [pc, #88]	; (8000a98 <SystemCoreClockUpdate+0x2e8>)
 8000a40:	5cd3      	ldrb	r3, [r2, r3]
 8000a42:	607b      	str	r3, [r7, #4]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
 8000a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	fa22 f303 	lsr.w	r3, r2, r3
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <SystemCoreClockUpdate+0x2cc>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <SystemCoreClockUpdate+0x2e8>)
 8000a58:	5cd3      	ldrb	r3, [r2, r3]
 8000a5a:	f003 031f 	and.w	r3, r3, #31
 8000a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a60:	fa22 f303 	lsr.w	r3, r2, r3
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <SystemCoreClockUpdate+0x2ec>)
 8000a66:	6013      	str	r3, [r2, #0]

#if defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <SystemCoreClockUpdate+0x2f0>)
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */
}
 8000a6e:	bf00      	nop
 8000a70:	372c      	adds	r7, #44	; 0x2c
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	58024400 	.word	0x58024400
 8000a80:	03d09000 	.word	0x03d09000
 8000a84:	003d0900 	.word	0x003d0900
 8000a88:	007a1200 	.word	0x007a1200
 8000a8c:	46000000 	.word	0x46000000
 8000a90:	4a742400 	.word	0x4a742400
 8000a94:	4af42400 	.word	0x4af42400
 8000a98:	08008fbc 	.word	0x08008fbc
 8000a9c:	24000004 	.word	0x24000004
 8000aa0:	24000000 	.word	0x24000000

08000aa4 <sr04_init>:
#include "hcsr04.h"
#define DISTANCE_LIMIT 5000

void sr04_init(sr04_t *sr04_struct){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  // Enable trigger pin
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6818      	ldr	r0, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	889b      	ldrh	r3, [r3, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f002 f848 	bl	8002b4c <HAL_GPIO_WritePin>
  // Set input capture edge to rising
  __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	899b      	ldrh	r3, [r3, #12]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10a      	bne.n	8000ada <sr04_init+0x36>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	6a1a      	ldr	r2, [r3, #32]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f022 020a 	bic.w	r2, r2, #10
 8000ad6:	621a      	str	r2, [r3, #32]
 8000ad8:	e027      	b.n	8000b2a <sr04_init+0x86>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	899b      	ldrh	r3, [r3, #12]
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	d10a      	bne.n	8000af8 <sr04_init+0x54>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6a1b      	ldr	r3, [r3, #32]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6892      	ldr	r2, [r2, #8]
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000af4:	6213      	str	r3, [r2, #32]
 8000af6:	e018      	b.n	8000b2a <sr04_init+0x86>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	899b      	ldrh	r3, [r3, #12]
 8000afc:	2b08      	cmp	r3, #8
 8000afe:	d10a      	bne.n	8000b16 <sr04_init+0x72>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	6a1b      	ldr	r3, [r3, #32]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	6892      	ldr	r2, [r2, #8]
 8000b0c:	6812      	ldr	r2, [r2, #0]
 8000b0e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8000b12:	6213      	str	r3, [r2, #32]
 8000b14:	e009      	b.n	8000b2a <sr04_init+0x86>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6a1b      	ldr	r3, [r3, #32]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	6892      	ldr	r2, [r2, #8]
 8000b22:	6812      	ldr	r2, [r2, #0]
 8000b24:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8000b28:	6213      	str	r3, [r2, #32]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	899b      	ldrh	r3, [r3, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d108      	bne.n	8000b44 <sr04_init+0xa0>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6a12      	ldr	r2, [r2, #32]
 8000b40:	621a      	str	r2, [r3, #32]
 8000b42:	e021      	b.n	8000b88 <sr04_init+0xe4>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	899b      	ldrh	r3, [r3, #12]
 8000b48:	2b04      	cmp	r3, #4
 8000b4a:	d108      	bne.n	8000b5e <sr04_init+0xba>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	6892      	ldr	r2, [r2, #8]
 8000b56:	6812      	ldr	r2, [r2, #0]
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	6213      	str	r3, [r2, #32]
 8000b5c:	e014      	b.n	8000b88 <sr04_init+0xe4>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	899b      	ldrh	r3, [r3, #12]
 8000b62:	2b08      	cmp	r3, #8
 8000b64:	d108      	bne.n	8000b78 <sr04_init+0xd4>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	6892      	ldr	r2, [r2, #8]
 8000b70:	6812      	ldr	r2, [r2, #0]
 8000b72:	6a1b      	ldr	r3, [r3, #32]
 8000b74:	6213      	str	r3, [r2, #32]
 8000b76:	e007      	b.n	8000b88 <sr04_init+0xe4>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	6892      	ldr	r2, [r2, #8]
 8000b82:	6812      	ldr	r2, [r2, #0]
 8000b84:	6a1b      	ldr	r3, [r3, #32]
 8000b86:	6213      	str	r3, [r2, #32]
  // Set capture flag to 0
  sr04_struct->capture_flag = 0;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	739a      	strb	r2, [r3, #14]
  // Enable echo pin
  HAL_TIM_IC_Start_IT(sr04_struct->echo_htim, sr04_struct->echo_channel);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	899b      	ldrh	r3, [r3, #12]
 8000b96:	4619      	mov	r1, r3
 8000b98:	4610      	mov	r0, r2
 8000b9a:	f004 fe3f 	bl	800581c <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(sr04_struct->echo_htim);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f004 fd60 	bl	8005668 <HAL_TIM_Base_Start_IT>
  //printf(">> HCSR04 initialized\r\n");
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <sr04_trigger>:

void sr04_trigger(sr04_t *sr04_struct){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  // Send pulse to trigger pin
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_SET);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	889b      	ldrh	r3, [r3, #4]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f001 ffc2 	bl	8002b4c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f001 f897 	bl	8001cfc <HAL_Delay>
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	889b      	ldrh	r3, [r3, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f001 ffb7 	bl	8002b4c <HAL_GPIO_WritePin>
  //printf(">> Sent trigger\r\n");

}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <sr04_read_distance>:

void sr04_read_distance(sr04_t *sr04_struct){
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  // This function should be called in the timer input capture callback
  switch (sr04_struct->capture_flag){
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7b9b      	ldrb	r3, [r3, #14]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d002      	beq.n	8000bfe <sr04_read_distance+0x16>
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d07b      	beq.n	8000cf4 <sr04_read_distance+0x10c>
      sr04_struct->last_distance = sr04_struct->distance;
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
      //printf(">> Case 1\r\n");
      break;
  }
}
 8000bfc:	e11e      	b.n	8000e3c <sr04_read_distance+0x254>
      sr04_struct->start_counter = __HAL_TIM_GET_COUNTER(sr04_struct->echo_htim);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	611a      	str	r2, [r3, #16]
      sr04_struct->capture_flag = 1;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	739a      	strb	r2, [r3, #14]
      sr04_struct->tim_update_count = 0;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	841a      	strh	r2, [r3, #32]
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	899b      	ldrh	r3, [r3, #12]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10a      	bne.n	8000c34 <sr04_read_distance+0x4c>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	6a1a      	ldr	r2, [r3, #32]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f022 020a 	bic.w	r2, r2, #10
 8000c30:	621a      	str	r2, [r3, #32]
 8000c32:	e027      	b.n	8000c84 <sr04_read_distance+0x9c>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	899b      	ldrh	r3, [r3, #12]
 8000c38:	2b04      	cmp	r3, #4
 8000c3a:	d10a      	bne.n	8000c52 <sr04_read_distance+0x6a>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6a1b      	ldr	r3, [r3, #32]
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	6892      	ldr	r2, [r2, #8]
 8000c48:	6812      	ldr	r2, [r2, #0]
 8000c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000c4e:	6213      	str	r3, [r2, #32]
 8000c50:	e018      	b.n	8000c84 <sr04_read_distance+0x9c>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	899b      	ldrh	r3, [r3, #12]
 8000c56:	2b08      	cmp	r3, #8
 8000c58:	d10a      	bne.n	8000c70 <sr04_read_distance+0x88>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6a1b      	ldr	r3, [r3, #32]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	6892      	ldr	r2, [r2, #8]
 8000c66:	6812      	ldr	r2, [r2, #0]
 8000c68:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8000c6c:	6213      	str	r3, [r2, #32]
 8000c6e:	e009      	b.n	8000c84 <sr04_read_distance+0x9c>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	6892      	ldr	r2, [r2, #8]
 8000c7c:	6812      	ldr	r2, [r2, #0]
 8000c7e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8000c82:	6213      	str	r3, [r2, #32]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	899b      	ldrh	r3, [r3, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10a      	bne.n	8000ca2 <sr04_read_distance+0xba>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6a1a      	ldr	r2, [r3, #32]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f042 0202 	orr.w	r2, r2, #2
 8000c9e:	621a      	str	r2, [r3, #32]
      break;
 8000ca0:	e0cc      	b.n	8000e3c <sr04_read_distance+0x254>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	899b      	ldrh	r3, [r3, #12]
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	d10a      	bne.n	8000cc0 <sr04_read_distance+0xd8>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6a1b      	ldr	r3, [r3, #32]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	6892      	ldr	r2, [r2, #8]
 8000cb6:	6812      	ldr	r2, [r2, #0]
 8000cb8:	f043 0320 	orr.w	r3, r3, #32
 8000cbc:	6213      	str	r3, [r2, #32]
      break;
 8000cbe:	e0bd      	b.n	8000e3c <sr04_read_distance+0x254>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	899b      	ldrh	r3, [r3, #12]
 8000cc4:	2b08      	cmp	r3, #8
 8000cc6:	d10a      	bne.n	8000cde <sr04_read_distance+0xf6>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6a1b      	ldr	r3, [r3, #32]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	6892      	ldr	r2, [r2, #8]
 8000cd4:	6812      	ldr	r2, [r2, #0]
 8000cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cda:	6213      	str	r3, [r2, #32]
      break;
 8000cdc:	e0ae      	b.n	8000e3c <sr04_read_distance+0x254>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	6892      	ldr	r2, [r2, #8]
 8000cea:	6812      	ldr	r2, [r2, #0]
 8000cec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cf0:	6213      	str	r3, [r2, #32]
      break;
 8000cf2:	e0a3      	b.n	8000e3c <sr04_read_distance+0x254>
      sr04_struct->end_counter = __HAL_TIM_GET_COUNTER(sr04_struct->echo_htim) + sr04_struct->tim_update_count * sr04_struct->echo_htim->Init.Period;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	8c1b      	ldrh	r3, [r3, #32]
 8000d00:	4619      	mov	r1, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	fb01 f303 	mul.w	r3, r1, r3
 8000d0c:	441a      	add	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	615a      	str	r2, [r3, #20]
      sr04_struct->capture_flag = 0;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	739a      	strb	r2, [r3, #14]
      sr04_struct->distance = (sr04_struct->end_counter - sr04_struct->start_counter) * 340 / (SystemCoreClock / 1000000) / 2 / (1000 / sr04_struct->echo_htim->Init.Prescaler);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	695a      	ldr	r2, [r3, #20]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8000d26:	fb03 f202 	mul.w	r2, r3, r2
 8000d2a:	4b47      	ldr	r3, [pc, #284]	; (8000e48 <sr04_read_distance+0x260>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4947      	ldr	r1, [pc, #284]	; (8000e4c <sr04_read_distance+0x264>)
 8000d30:	fba1 1303 	umull	r1, r3, r1, r3
 8000d34:	0c9b      	lsrs	r3, r3, #18
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3a:	085a      	lsrs	r2, r3, #1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	619a      	str	r2, [r3, #24]
      if(sr04_struct->distance > DISTANCE_LIMIT){
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d903      	bls.n	8000d66 <sr04_read_distance+0x17e>
        sr04_struct->distance = sr04_struct->last_distance;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69da      	ldr	r2, [r3, #28]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	619a      	str	r2, [r3, #24]
      sr04_struct->last_distance = sr04_struct->distance;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	699a      	ldr	r2, [r3, #24]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	61da      	str	r2, [r3, #28]
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	899b      	ldrh	r3, [r3, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d10a      	bne.n	8000d8c <sr04_read_distance+0x1a4>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6a1a      	ldr	r2, [r3, #32]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 020a 	bic.w	r2, r2, #10
 8000d88:	621a      	str	r2, [r3, #32]
 8000d8a:	e027      	b.n	8000ddc <sr04_read_distance+0x1f4>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	899b      	ldrh	r3, [r3, #12]
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d10a      	bne.n	8000daa <sr04_read_distance+0x1c2>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6892      	ldr	r2, [r2, #8]
 8000da0:	6812      	ldr	r2, [r2, #0]
 8000da2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000da6:	6213      	str	r3, [r2, #32]
 8000da8:	e018      	b.n	8000ddc <sr04_read_distance+0x1f4>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	899b      	ldrh	r3, [r3, #12]
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d10a      	bne.n	8000dc8 <sr04_read_distance+0x1e0>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6a1b      	ldr	r3, [r3, #32]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	6892      	ldr	r2, [r2, #8]
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8000dc4:	6213      	str	r3, [r2, #32]
 8000dc6:	e009      	b.n	8000ddc <sr04_read_distance+0x1f4>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	6892      	ldr	r2, [r2, #8]
 8000dd4:	6812      	ldr	r2, [r2, #0]
 8000dd6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8000dda:	6213      	str	r3, [r2, #32]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	899b      	ldrh	r3, [r3, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d108      	bne.n	8000df6 <sr04_read_distance+0x20e>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6a12      	ldr	r2, [r2, #32]
 8000df2:	621a      	str	r2, [r3, #32]
      break;
 8000df4:	e021      	b.n	8000e3a <sr04_read_distance+0x252>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	899b      	ldrh	r3, [r3, #12]
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	d108      	bne.n	8000e10 <sr04_read_distance+0x228>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	6892      	ldr	r2, [r2, #8]
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	6213      	str	r3, [r2, #32]
      break;
 8000e0e:	e014      	b.n	8000e3a <sr04_read_distance+0x252>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	899b      	ldrh	r3, [r3, #12]
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d108      	bne.n	8000e2a <sr04_read_distance+0x242>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6892      	ldr	r2, [r2, #8]
 8000e22:	6812      	ldr	r2, [r2, #0]
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	6213      	str	r3, [r2, #32]
      break;
 8000e28:	e007      	b.n	8000e3a <sr04_read_distance+0x252>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	6892      	ldr	r2, [r2, #8]
 8000e34:	6812      	ldr	r2, [r2, #0]
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	6213      	str	r3, [r2, #32]
      break;
 8000e3a:	bf00      	nop
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	24000000 	.word	0x24000000
 8000e4c:	431bde83 	.word	0x431bde83

08000e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e5a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e5c:	bf00      	nop
 8000e5e:	4b3f      	ldr	r3, [pc, #252]	; (8000f5c <main+0x10c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d004      	beq.n	8000e74 <main+0x24>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	1e5a      	subs	r2, r3, #1
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	dcf4      	bgt.n	8000e5e <main+0xe>
  if ( timeout < 0 )
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	da01      	bge.n	8000e7e <main+0x2e>
  {
  Error_Handler();
 8000e7a:	f000 fb19 	bl	80014b0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f000 feab 	bl	8001bd8 <HAL_Init>

  /* USER CODE BEGIN Init */
  SystemCoreClockUpdate();  // 🔁 Actualiza el valor global correcto del reloj
 8000e82:	f7ff fc95 	bl	80007b0 <SystemCoreClockUpdate>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e86:	f000 f879 	bl	8000f7c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e8a:	4b34      	ldr	r3, [pc, #208]	; (8000f5c <main+0x10c>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	4a32      	ldr	r2, [pc, #200]	; (8000f5c <main+0x10c>)
 8000e92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9a:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <main+0x10c>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f001 fe83 	bl	8002bb4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f001 fe99 	bl	8002be8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eba:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ebc:	bf00      	nop
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <main+0x10c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d104      	bne.n	8000ed4 <main+0x84>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	1e5a      	subs	r2, r3, #1
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	dcf4      	bgt.n	8000ebe <main+0x6e>
if ( timeout < 0 )
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	da01      	bge.n	8000ede <main+0x8e>
{
Error_Handler();
 8000eda:	f000 fae9 	bl	80014b0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ede:	f000 fa09 	bl	80012f4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000ee2:	f000 f8c7 	bl	8001074 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ee6:	f000 f987 	bl	80011f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000eea:	f000 f9d1 	bl	8001290 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000eee:	f000 f90d 	bl	800110c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  printf("Initializing...\r\n");
 8000ef2:	481b      	ldr	r0, [pc, #108]	; (8000f60 <main+0x110>)
 8000ef4:	f007 f8c4 	bl	8008080 <puts>
  sr04.trig_port = GPIOE;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <main+0x114>)
 8000efa:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <main+0x118>)
 8000efc:	601a      	str	r2, [r3, #0]
  sr04.trig_pin = GPIO_PIN_11;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <main+0x114>)
 8000f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f04:	809a      	strh	r2, [r3, #4]
  sr04.echo_htim = &htim1;
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <main+0x114>)
 8000f08:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <main+0x11c>)
 8000f0a:	609a      	str	r2, [r3, #8]
  sr04.echo_channel = TIM_CHANNEL_1;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <main+0x114>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	819a      	strh	r2, [r3, #12]
  sr04_init(&sr04);
 8000f12:	4814      	ldr	r0, [pc, #80]	; (8000f64 <main+0x114>)
 8000f14:	f7ff fdc6 	bl	8000aa4 <sr04_init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);     // Captura con interrupción
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4814      	ldr	r0, [pc, #80]	; (8000f6c <main+0x11c>)
 8000f1c:	f004 fc7e 	bl	800581c <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);                  // Base del timer con interrupción (para detectar overflow)
 8000f20:	4812      	ldr	r0, [pc, #72]	; (8000f6c <main+0x11c>)
 8000f22:	f004 fba1 	bl	8005668 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	sr04_trigger(&sr04);
 8000f26:	480f      	ldr	r0, [pc, #60]	; (8000f64 <main+0x114>)
 8000f28:	f7ff fe42 	bl	8000bb0 <sr04_trigger>
	HAL_Delay(100);
 8000f2c:	2064      	movs	r0, #100	; 0x64
 8000f2e:	f000 fee5 	bl	8001cfc <HAL_Delay>
	printf("Distance: %lu cm\r\n", sr04.distance / 10); // For cm
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <main+0x114>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <main+0x120>)
 8000f38:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3c:	08db      	lsrs	r3, r3, #3
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <main+0x124>)
 8000f42:	f007 f817 	bl	8007f74 <iprintf>
	// LED for debug
	HAL_Delay(100);
 8000f46:	2064      	movs	r0, #100	; 0x64
 8000f48:	f000 fed8 	bl	8001cfc <HAL_Delay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	480a      	ldr	r0, [pc, #40]	; (8000f78 <main+0x128>)
 8000f50:	f001 fe15 	bl	8002b7e <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000f54:	2064      	movs	r0, #100	; 0x64
 8000f56:	f000 fed1 	bl	8001cfc <HAL_Delay>
	sr04_trigger(&sr04);
 8000f5a:	e7e4      	b.n	8000f26 <main+0xd6>
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	08008f94 	.word	0x08008f94
 8000f64:	24000820 	.word	0x24000820
 8000f68:	58021000 	.word	0x58021000
 8000f6c:	24000238 	.word	0x24000238
 8000f70:	cccccccd 	.word	0xcccccccd
 8000f74:	08008fa8 	.word	0x08008fa8
 8000f78:	58020400 	.word	0x58020400

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b09c      	sub	sp, #112	; 0x70
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f86:	224c      	movs	r2, #76	; 0x4c
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 ffea 	bl	8007f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2220      	movs	r2, #32
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f006 ffe4 	bl	8007f64 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f9c:	2004      	movs	r0, #4
 8000f9e:	f001 ff7f 	bl	8002ea0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <SystemClock_Config+0xf0>)
 8000fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000faa:	4a30      	ldr	r2, [pc, #192]	; (800106c <SystemClock_Config+0xf0>)
 8000fac:	f023 0301 	bic.w	r3, r3, #1
 8000fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	; (800106c <SystemClock_Config+0xf0>)
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	; (8001070 <SystemClock_Config+0xf4>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fc4:	4a2a      	ldr	r2, [pc, #168]	; (8001070 <SystemClock_Config+0xf4>)
 8000fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <SystemClock_Config+0xf4>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fd8:	bf00      	nop
 8000fda:	4b25      	ldr	r3, [pc, #148]	; (8001070 <SystemClock_Config+0xf4>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fe6:	d1f8      	bne.n	8000fda <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000ffe:	2314      	movs	r3, #20
 8001000:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001002:	2302      	movs	r3, #2
 8001004:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001006:	2304      	movs	r3, #4
 8001008:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800100a:	2302      	movs	r3, #2
 800100c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800100e:	230c      	movs	r3, #12
 8001010:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001012:	2302      	movs	r3, #2
 8001014:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	4618      	mov	r0, r3
 8001020:	f001 ffa8 	bl	8002f74 <HAL_RCC_OscConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800102a:	f000 fa41 	bl	80014b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	233f      	movs	r3, #63	; 0x3f
 8001030:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001032:	2303      	movs	r3, #3
 8001034:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001042:	2340      	movs	r3, #64	; 0x40
 8001044:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2101      	movs	r1, #1
 8001052:	4618      	mov	r0, r3
 8001054:	f002 fbbc 	bl	80037d0 <HAL_RCC_ClockConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800105e:	f000 fa27 	bl	80014b0 <Error_Handler>
  }
}
 8001062:	bf00      	nop
 8001064:	3770      	adds	r7, #112	; 0x70
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	58000400 	.word	0x58000400
 8001070:	58024800 	.word	0x58024800

08001074 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_ETH_Init+0x80>)
 800107a:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <MX_ETH_Init+0x84>)
 800107c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <MX_ETH_Init+0x88>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_ETH_Init+0x88>)
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <MX_ETH_Init+0x88>)
 800108c:	22e1      	movs	r2, #225	; 0xe1
 800108e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_ETH_Init+0x88>)
 8001092:	2200      	movs	r2, #0
 8001094:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_ETH_Init+0x88>)
 8001098:	2200      	movs	r2, #0
 800109a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_ETH_Init+0x88>)
 800109e:	2200      	movs	r2, #0
 80010a0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_ETH_Init+0x80>)
 80010a4:	4a15      	ldr	r2, [pc, #84]	; (80010fc <MX_ETH_Init+0x88>)
 80010a6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_ETH_Init+0x80>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_ETH_Init+0x80>)
 80010b0:	4a13      	ldr	r2, [pc, #76]	; (8001100 <MX_ETH_Init+0x8c>)
 80010b2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_ETH_Init+0x80>)
 80010b6:	4a13      	ldr	r2, [pc, #76]	; (8001104 <MX_ETH_Init+0x90>)
 80010b8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_ETH_Init+0x80>)
 80010bc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010c0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010c2:	480c      	ldr	r0, [pc, #48]	; (80010f4 <MX_ETH_Init+0x80>)
 80010c4:	f000 ff6e 	bl	8001fa4 <HAL_ETH_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80010ce:	f000 f9ef 	bl	80014b0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010d2:	2238      	movs	r2, #56	; 0x38
 80010d4:	2100      	movs	r1, #0
 80010d6:	480c      	ldr	r0, [pc, #48]	; (8001108 <MX_ETH_Init+0x94>)
 80010d8:	f006 ff44 	bl	8007f64 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <MX_ETH_Init+0x94>)
 80010de:	2221      	movs	r2, #33	; 0x21
 80010e0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_ETH_Init+0x94>)
 80010e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010e8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <MX_ETH_Init+0x94>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	24000188 	.word	0x24000188
 80010f8:	40028000 	.word	0x40028000
 80010fc:	24000844 	.word	0x24000844
 8001100:	240000d4 	.word	0x240000d4
 8001104:	24000074 	.word	0x24000074
 8001108:	24000150 	.word	0x24000150

0800110c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	; 0x30
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001138:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <MX_TIM1_Init+0xe4>)
 800113a:	4a2e      	ldr	r2, [pc, #184]	; (80011f4 <MX_TIM1_Init+0xe8>)
 800113c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 800113e:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <MX_TIM1_Init+0xe4>)
 8001140:	2248      	movs	r2, #72	; 0x48
 8001142:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <MX_TIM1_Init+0xe4>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <MX_TIM1_Init+0xe4>)
 800114c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001150:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001152:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <MX_TIM1_Init+0xe4>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <MX_TIM1_Init+0xe4>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <MX_TIM1_Init+0xe4>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001164:	4822      	ldr	r0, [pc, #136]	; (80011f0 <MX_TIM1_Init+0xe4>)
 8001166:	f004 fa27 	bl	80055b8 <HAL_TIM_Base_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001170:	f000 f99e 	bl	80014b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001178:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	4619      	mov	r1, r3
 8001180:	481b      	ldr	r0, [pc, #108]	; (80011f0 <MX_TIM1_Init+0xe4>)
 8001182:	f004 fe57 	bl	8005e34 <HAL_TIM_ConfigClockSource>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800118c:	f000 f990 	bl	80014b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001190:	4817      	ldr	r0, [pc, #92]	; (80011f0 <MX_TIM1_Init+0xe4>)
 8001192:	f004 fae1 	bl	8005758 <HAL_TIM_IC_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800119c:	f000 f988 	bl	80014b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	480f      	ldr	r0, [pc, #60]	; (80011f0 <MX_TIM1_Init+0xe4>)
 80011b4:	f005 f9f0 	bl	8006598 <HAL_TIMEx_MasterConfigSynchronization>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80011be:	f000 f977 	bl	80014b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011c6:	2301      	movs	r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_TIM1_Init+0xe4>)
 80011da:	f004 fd8e 	bl	8005cfa <HAL_TIM_IC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80011e4:	f000 f964 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3730      	adds	r7, #48	; 0x30
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	24000238 	.word	0x24000238
 80011f4:	40010000 	.word	0x40010000

080011f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <MX_USART3_UART_Init+0x90>)
 80011fe:	4a23      	ldr	r2, [pc, #140]	; (800128c <MX_USART3_UART_Init+0x94>)
 8001200:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001204:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001208:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001240:	4811      	ldr	r0, [pc, #68]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001242:	f005 fa55 	bl	80066f0 <HAL_UART_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800124c:	f000 f930 	bl	80014b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001250:	2100      	movs	r1, #0
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001254:	f006 fa88 	bl	8007768 <HAL_UARTEx_SetTxFifoThreshold>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800125e:	f000 f927 	bl	80014b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001262:	2100      	movs	r1, #0
 8001264:	4808      	ldr	r0, [pc, #32]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001266:	f006 fabd 	bl	80077e4 <HAL_UARTEx_SetRxFifoThreshold>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001270:	f000 f91e 	bl	80014b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001276:	f006 fa3e 	bl	80076f6 <HAL_UARTEx_DisableFifoMode>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001280:	f000 f916 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	24000284 	.word	0x24000284
 800128c:	40004800 	.word	0x40004800

08001290 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001296:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001298:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800129c:	2209      	movs	r2, #9
 800129e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a2:	2202      	movs	r2, #2
 80012a4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ae:	2202      	movs	r2, #2
 80012b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012d8:	f001 fc9a 	bl	8002c10 <HAL_PCD_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80012e2:	f000 f8e5 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	24000314 	.word	0x24000314
 80012f0:	40080000 	.word	0x40080000

080012f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	; 0x30
 80012f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130a:	4b63      	ldr	r3, [pc, #396]	; (8001498 <MX_GPIO_Init+0x1a4>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	4a61      	ldr	r2, [pc, #388]	; (8001498 <MX_GPIO_Init+0x1a4>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131a:	4b5f      	ldr	r3, [pc, #380]	; (8001498 <MX_GPIO_Init+0x1a4>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001328:	4b5b      	ldr	r3, [pc, #364]	; (8001498 <MX_GPIO_Init+0x1a4>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	4a5a      	ldr	r2, [pc, #360]	; (8001498 <MX_GPIO_Init+0x1a4>)
 8001330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001338:	4b57      	ldr	r3, [pc, #348]	; (8001498 <MX_GPIO_Init+0x1a4>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b54      	ldr	r3, [pc, #336]	; (8001498 <MX_GPIO_Init+0x1a4>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	4a52      	ldr	r2, [pc, #328]	; (8001498 <MX_GPIO_Init+0x1a4>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001356:	4b50      	ldr	r3, [pc, #320]	; (8001498 <MX_GPIO_Init+0x1a4>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001364:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <MX_GPIO_Init+0x1a4>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	4a4b      	ldr	r2, [pc, #300]	; (8001498 <MX_GPIO_Init+0x1a4>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001374:	4b48      	ldr	r3, [pc, #288]	; (8001498 <MX_GPIO_Init+0x1a4>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001382:	4b45      	ldr	r3, [pc, #276]	; (8001498 <MX_GPIO_Init+0x1a4>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001388:	4a43      	ldr	r2, [pc, #268]	; (8001498 <MX_GPIO_Init+0x1a4>)
 800138a:	f043 0310 	orr.w	r3, r3, #16
 800138e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001392:	4b41      	ldr	r3, [pc, #260]	; (8001498 <MX_GPIO_Init+0x1a4>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a0:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <MX_GPIO_Init+0x1a4>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a6:	4a3c      	ldr	r2, [pc, #240]	; (8001498 <MX_GPIO_Init+0x1a4>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b0:	4b39      	ldr	r3, [pc, #228]	; (8001498 <MX_GPIO_Init+0x1a4>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013be:	4b36      	ldr	r3, [pc, #216]	; (8001498 <MX_GPIO_Init+0x1a4>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c4:	4a34      	ldr	r2, [pc, #208]	; (8001498 <MX_GPIO_Init+0x1a4>)
 80013c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ce:	4b32      	ldr	r3, [pc, #200]	; (8001498 <MX_GPIO_Init+0x1a4>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f244 0101 	movw	r1, #16385	; 0x4001
 80013e2:	482e      	ldr	r0, [pc, #184]	; (800149c <MX_GPIO_Init+0x1a8>)
 80013e4:	f001 fbb2 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f640 0102 	movw	r1, #2050	; 0x802
 80013ee:	482c      	ldr	r0, [pc, #176]	; (80014a0 <MX_GPIO_Init+0x1ac>)
 80013f0:	f001 fbac 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fa:	482a      	ldr	r0, [pc, #168]	; (80014a4 <MX_GPIO_Init+0x1b0>)
 80013fc:	f001 fba6 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4824      	ldr	r0, [pc, #144]	; (80014a8 <MX_GPIO_Init+0x1b4>)
 8001416:	f001 f9e9 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800141a:	f244 0301 	movw	r3, #16385	; 0x4001
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	481a      	ldr	r0, [pc, #104]	; (800149c <MX_GPIO_Init+0x1a8>)
 8001434:	f001 f9da 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin LD2_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|LD2_Pin;
 8001438:	f640 0302 	movw	r3, #2050	; 0x802
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	2301      	movs	r3, #1
 8001440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <MX_GPIO_Init+0x1ac>)
 8001452:	f001 f9cb 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <MX_GPIO_Init+0x1b0>)
 8001470:	f001 f9bc 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001478:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4808      	ldr	r0, [pc, #32]	; (80014ac <MX_GPIO_Init+0x1b8>)
 800148a:	f001 f9af 	bl	80027ec <HAL_GPIO_Init>

}
 800148e:	bf00      	nop
 8001490:	3730      	adds	r7, #48	; 0x30
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	58024400 	.word	0x58024400
 800149c:	58020400 	.word	0x58020400
 80014a0:	58021000 	.word	0x58021000
 80014a4:	58020c00 	.word	0x58020c00
 80014a8:	58020800 	.word	0x58020800
 80014ac:	58021800 	.word	0x58021800

080014b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <Error_Handler+0x8>
	...

080014bc <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80014c4:	1d39      	adds	r1, r7, #4
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	2201      	movs	r2, #1
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <__io_putchar+0x20>)
 80014ce:	f005 f95f 	bl	8006790 <HAL_UART_Transmit>
  return ch;
 80014d2:	687b      	ldr	r3, [r7, #4]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	24000284 	.word	0x24000284

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_MspInit+0x30>)
 80014e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014ec:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_MspInit+0x30>)
 80014ee:	f043 0302 	orr.w	r3, r3, #2
 80014f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_MspInit+0x30>)
 80014f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	58024400 	.word	0x58024400

08001514 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08e      	sub	sp, #56	; 0x38
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a59      	ldr	r2, [pc, #356]	; (8001698 <HAL_ETH_MspInit+0x184>)
 8001532:	4293      	cmp	r3, r2
 8001534:	f040 80ab 	bne.w	800168e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001538:	4b58      	ldr	r3, [pc, #352]	; (800169c <HAL_ETH_MspInit+0x188>)
 800153a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800153e:	4a57      	ldr	r2, [pc, #348]	; (800169c <HAL_ETH_MspInit+0x188>)
 8001540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001544:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001548:	4b54      	ldr	r3, [pc, #336]	; (800169c <HAL_ETH_MspInit+0x188>)
 800154a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800154e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001552:	623b      	str	r3, [r7, #32]
 8001554:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001556:	4b51      	ldr	r3, [pc, #324]	; (800169c <HAL_ETH_MspInit+0x188>)
 8001558:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800155c:	4a4f      	ldr	r2, [pc, #316]	; (800169c <HAL_ETH_MspInit+0x188>)
 800155e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001562:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001566:	4b4d      	ldr	r3, [pc, #308]	; (800169c <HAL_ETH_MspInit+0x188>)
 8001568:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001574:	4b49      	ldr	r3, [pc, #292]	; (800169c <HAL_ETH_MspInit+0x188>)
 8001576:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800157a:	4a48      	ldr	r2, [pc, #288]	; (800169c <HAL_ETH_MspInit+0x188>)
 800157c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001580:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001584:	4b45      	ldr	r3, [pc, #276]	; (800169c <HAL_ETH_MspInit+0x188>)
 8001586:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	4b42      	ldr	r3, [pc, #264]	; (800169c <HAL_ETH_MspInit+0x188>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001598:	4a40      	ldr	r2, [pc, #256]	; (800169c <HAL_ETH_MspInit+0x188>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a2:	4b3e      	ldr	r3, [pc, #248]	; (800169c <HAL_ETH_MspInit+0x188>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b3a      	ldr	r3, [pc, #232]	; (800169c <HAL_ETH_MspInit+0x188>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b6:	4a39      	ldr	r2, [pc, #228]	; (800169c <HAL_ETH_MspInit+0x188>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <HAL_ETH_MspInit+0x188>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_ETH_MspInit+0x188>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d4:	4a31      	ldr	r2, [pc, #196]	; (800169c <HAL_ETH_MspInit+0x188>)
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015de:	4b2f      	ldr	r3, [pc, #188]	; (800169c <HAL_ETH_MspInit+0x188>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_ETH_MspInit+0x188>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f2:	4a2a      	ldr	r2, [pc, #168]	; (800169c <HAL_ETH_MspInit+0x188>)
 80015f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fc:	4b27      	ldr	r3, [pc, #156]	; (800169c <HAL_ETH_MspInit+0x188>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800160a:	2332      	movs	r3, #50	; 0x32
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800161a:	230b      	movs	r3, #11
 800161c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	4619      	mov	r1, r3
 8001624:	481e      	ldr	r0, [pc, #120]	; (80016a0 <HAL_ETH_MspInit+0x18c>)
 8001626:	f001 f8e1 	bl	80027ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800162a:	2386      	movs	r3, #134	; 0x86
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800163a:	230b      	movs	r3, #11
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	4619      	mov	r1, r3
 8001644:	4817      	ldr	r0, [pc, #92]	; (80016a4 <HAL_ETH_MspInit+0x190>)
 8001646:	f001 f8d1 	bl	80027ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800164a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800165c:	230b      	movs	r3, #11
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	4619      	mov	r1, r3
 8001666:	4810      	ldr	r0, [pc, #64]	; (80016a8 <HAL_ETH_MspInit+0x194>)
 8001668:	f001 f8c0 	bl	80027ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800166c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800167e:	230b      	movs	r3, #11
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001686:	4619      	mov	r1, r3
 8001688:	4808      	ldr	r0, [pc, #32]	; (80016ac <HAL_ETH_MspInit+0x198>)
 800168a:	f001 f8af 	bl	80027ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800168e:	bf00      	nop
 8001690:	3738      	adds	r7, #56	; 0x38
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40028000 	.word	0x40028000
 800169c:	58024400 	.word	0x58024400
 80016a0:	58020800 	.word	0x58020800
 80016a4:	58020000 	.word	0x58020000
 80016a8:	58020400 	.word	0x58020400
 80016ac:	58021800 	.word	0x58021800

080016b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a2a      	ldr	r2, [pc, #168]	; (8001778 <HAL_TIM_Base_MspInit+0xc8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d14e      	bne.n	8001770 <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <HAL_TIM_Base_MspInit+0xcc>)
 80016d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016d8:	4a28      	ldr	r2, [pc, #160]	; (800177c <HAL_TIM_Base_MspInit+0xcc>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016e2:	4b26      	ldr	r3, [pc, #152]	; (800177c <HAL_TIM_Base_MspInit+0xcc>)
 80016e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f0:	4b22      	ldr	r3, [pc, #136]	; (800177c <HAL_TIM_Base_MspInit+0xcc>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f6:	4a21      	ldr	r2, [pc, #132]	; (800177c <HAL_TIM_Base_MspInit+0xcc>)
 80016f8:	f043 0310 	orr.w	r3, r3, #16
 80016fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_TIM_Base_MspInit+0xcc>)
 8001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 800170e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001720:	2301      	movs	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4815      	ldr	r0, [pc, #84]	; (8001780 <HAL_TIM_Base_MspInit+0xd0>)
 800172c:	f001 f85e 	bl	80027ec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	2018      	movs	r0, #24
 8001736:	f000 fc00 	bl	8001f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800173a:	2018      	movs	r0, #24
 800173c:	f000 fc17 	bl	8001f6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	2019      	movs	r0, #25
 8001746:	f000 fbf8 	bl	8001f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800174a:	2019      	movs	r0, #25
 800174c:	f000 fc0f 	bl	8001f6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2100      	movs	r1, #0
 8001754:	201a      	movs	r0, #26
 8001756:	f000 fbf0 	bl	8001f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800175a:	201a      	movs	r0, #26
 800175c:	f000 fc07 	bl	8001f6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	201b      	movs	r0, #27
 8001766:	f000 fbe8 	bl	8001f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800176a:	201b      	movs	r0, #27
 800176c:	f000 fbff 	bl	8001f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40010000 	.word	0x40010000
 800177c:	58024400 	.word	0x58024400
 8001780:	58021000 	.word	0x58021000

08001784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b0b8      	sub	sp, #224	; 0xe0
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	22bc      	movs	r2, #188	; 0xbc
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f006 fbdd 	bl	8007f64 <memset>
  if(huart->Instance==USART3)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a25      	ldr	r2, [pc, #148]	; (8001844 <HAL_UART_MspInit+0xc0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d142      	bne.n	800183a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017b4:	2302      	movs	r3, #2
 80017b6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 fb90 	bl	8003ee8 <HAL_RCCEx_PeriphCLKConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017ce:	f7ff fe6f 	bl	80014b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_UART_MspInit+0xc4>)
 80017d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <HAL_UART_MspInit+0xc4>)
 80017da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_UART_MspInit+0xc4>)
 80017e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_UART_MspInit+0xc4>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f6:	4a14      	ldr	r2, [pc, #80]	; (8001848 <HAL_UART_MspInit+0xc4>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_UART_MspInit+0xc4>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800180e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001812:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001828:	2307      	movs	r3, #7
 800182a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <HAL_UART_MspInit+0xc8>)
 8001836:	f000 ffd9 	bl	80027ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	37e0      	adds	r7, #224	; 0xe0
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40004800 	.word	0x40004800
 8001848:	58024400 	.word	0x58024400
 800184c:	58020c00 	.word	0x58020c00

08001850 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0b8      	sub	sp, #224	; 0xe0
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	22bc      	movs	r2, #188	; 0xbc
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f006 fb77 	bl	8007f64 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a2f      	ldr	r2, [pc, #188]	; (8001938 <HAL_PCD_MspInit+0xe8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d156      	bne.n	800192e <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001880:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001884:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001886:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800188a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	4618      	mov	r0, r3
 8001894:	f002 fb28 	bl	8003ee8 <HAL_RCCEx_PeriphCLKConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800189e:	f7ff fe07 	bl	80014b0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80018a2:	f001 fb57 	bl	8002f54 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_PCD_MspInit+0xec>)
 80018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ac:	4a23      	ldr	r2, [pc, #140]	; (800193c <HAL_PCD_MspInit+0xec>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_PCD_MspInit+0xec>)
 80018b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80018c4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80018c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80018de:	230a      	movs	r3, #10
 80018e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018e8:	4619      	mov	r1, r3
 80018ea:	4815      	ldr	r0, [pc, #84]	; (8001940 <HAL_PCD_MspInit+0xf0>)
 80018ec:	f000 ff7e 	bl	80027ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001908:	4619      	mov	r1, r3
 800190a:	480d      	ldr	r0, [pc, #52]	; (8001940 <HAL_PCD_MspInit+0xf0>)
 800190c:	f000 ff6e 	bl	80027ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_PCD_MspInit+0xec>)
 8001912:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <HAL_PCD_MspInit+0xec>)
 8001918:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800191c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_PCD_MspInit+0xec>)
 8001922:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001926:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800192e:	bf00      	nop
 8001930:	37e0      	adds	r7, #224	; 0xe0
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40080000 	.word	0x40080000
 800193c:	58024400 	.word	0x58024400
 8001940:	58020000 	.word	0x58020000

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <NMI_Handler+0x4>

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler+0x4>

08001962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001990:	f000 f994 	bl	8001cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <TIM1_BRK_IRQHandler+0x10>)
 800199e:	f004 f88d 	bl	8005abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	24000238 	.word	0x24000238

080019ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
  // Update interrupt handling
  if (__HAL_TIM_GET_FLAG(sr04.echo_htim, TIM_FLAG_UPDATE) != RESET)
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <TIM1_UP_IRQHandler+0x3c>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d10d      	bne.n	80019dc <TIM1_UP_IRQHandler+0x30>
  {
      if (__HAL_TIM_GET_IT_SOURCE(sr04.echo_htim, TIM_IT_UPDATE) != RESET)
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <TIM1_UP_IRQHandler+0x3c>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <TIM1_UP_IRQHandler+0x30>
      {
          sr04.tim_update_count++;
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <TIM1_UP_IRQHandler+0x3c>)
 80019d2:	8c1b      	ldrh	r3, [r3, #32]
 80019d4:	3301      	adds	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <TIM1_UP_IRQHandler+0x3c>)
 80019da:	841a      	strh	r2, [r3, #32]
      }
  }
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <TIM1_UP_IRQHandler+0x40>)
 80019de:	f004 f86d 	bl	8005abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	24000820 	.word	0x24000820
 80019ec:	24000238 	.word	0x24000238

080019f0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <TIM1_TRG_COM_IRQHandler+0x10>)
 80019f6:	f004 f861 	bl	8005abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	24000238 	.word	0x24000238

08001a04 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
  // Capture interrupt handling
  if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC1) != RESET)
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <TIM1_CC_IRQHandler+0x30>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d109      	bne.n	8001a2a <TIM1_CC_IRQHandler+0x26>
  {
      if (__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_CC1) != RESET)
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <TIM1_CC_IRQHandler+0x30>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d102      	bne.n	8001a2a <TIM1_CC_IRQHandler+0x26>
      {
    	  //printf(">> Captura recibida\r\n");
          sr04_read_distance(&sr04);
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <TIM1_CC_IRQHandler+0x34>)
 8001a26:	f7ff f8df 	bl	8000be8 <sr04_read_distance>
      }
  }
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a2a:	4802      	ldr	r0, [pc, #8]	; (8001a34 <TIM1_CC_IRQHandler+0x30>)
 8001a2c:	f004 f846 	bl	8005abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	24000238 	.word	0x24000238
 8001a38:	24000820 	.word	0x24000820

08001a3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e00a      	b.n	8001a64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a4e:	f3af 8000 	nop.w
 8001a52:	4601      	mov	r1, r0
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	60ba      	str	r2, [r7, #8]
 8001a5a:	b2ca      	uxtb	r2, r1
 8001a5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dbf0      	blt.n	8001a4e <_read+0x12>
	}

return len;
 8001a6c:	687b      	ldr	r3, [r7, #4]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e009      	b.n	8001a9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	60ba      	str	r2, [r7, #8]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fd13 	bl	80014bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbf1      	blt.n	8001a88 <_write+0x12>
	}
	return len;
 8001aa4:	687b      	ldr	r3, [r7, #4]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_close>:

int _close(int file)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ad6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <_isatty>:

int _isatty(int file)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
	return 1;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
	return 0;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b20:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <_sbrk+0x5c>)
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <_sbrk+0x60>)
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <_sbrk+0x64>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <_sbrk+0x68>)
 8001b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d207      	bcs.n	8001b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b48:	f006 f9e2 	bl	8007f10 <__errno>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	220c      	movs	r2, #12
 8001b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	e009      	b.n	8001b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <_sbrk+0x64>)
 8001b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	24080000 	.word	0x24080000
 8001b78:	00000400 	.word	0x00000400
 8001b7c:	2400084c 	.word	0x2400084c
 8001b80:	24000868 	.word	0x24000868

08001b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b88:	f7fe fd7c 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b8e:	490d      	ldr	r1, [pc, #52]	; (8001bc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b90:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b94:	e002      	b.n	8001b9c <LoopCopyDataInit>

08001b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9a:	3304      	adds	r3, #4

08001b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba0:	d3f9      	bcc.n	8001b96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ba4:	4c0a      	ldr	r4, [pc, #40]	; (8001bd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba8:	e001      	b.n	8001bae <LoopFillZerobss>

08001baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bac:	3204      	adds	r2, #4

08001bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb0:	d3fb      	bcc.n	8001baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bb2:	f006 f9b3 	bl	8007f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bb6:	f7ff f94b 	bl	8000e50 <main>
  bx  lr
 8001bba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bbc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001bc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bc4:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001bc8:	0800909c 	.word	0x0800909c
  ldr r2, =_sbss
 8001bcc:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8001bd0:	24000864 	.word	0x24000864

08001bd4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd4:	e7fe      	b.n	8001bd4 <ADC3_IRQHandler>
	...

08001bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bde:	2003      	movs	r0, #3
 8001be0:	f000 f9a0 	bl	8001f24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001be4:	f001 ffaa 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_Init+0x68>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	4913      	ldr	r1, [pc, #76]	; (8001c44 <HAL_Init+0x6c>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_Init+0x68>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <HAL_Init+0x6c>)
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
 8001c18:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <HAL_Init+0x70>)
 8001c1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <HAL_Init+0x74>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 f814 	bl	8001c50 <HAL_InitTick>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e002      	b.n	8001c38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c32:	f7ff fc55 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	58024400 	.word	0x58024400
 8001c44:	08008fbc 	.word	0x08008fbc
 8001c48:	24000004 	.word	0x24000004
 8001c4c:	24000000 	.word	0x24000000

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_InitTick+0x60>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e021      	b.n	8001ca8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <HAL_InitTick+0x64>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_InitTick+0x60>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f985 	bl	8001f8a <HAL_SYSTICK_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00e      	b.n	8001ca8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d80a      	bhi.n	8001ca6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c90:	2200      	movs	r2, #0
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f000 f94f 	bl	8001f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c9c:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <HAL_InitTick+0x68>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e000      	b.n	8001ca8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	2400000c 	.word	0x2400000c
 8001cb4:	24000000 	.word	0x24000000
 8001cb8:	24000008 	.word	0x24000008

08001cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_IncTick+0x20>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x24>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <HAL_IncTick+0x24>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	2400000c 	.word	0x2400000c
 8001ce0:	24000850 	.word	0x24000850

08001ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_GetTick+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	24000850 	.word	0x24000850

08001cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff ffee 	bl	8001ce4 <HAL_GetTick>
 8001d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d005      	beq.n	8001d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_Delay+0x44>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d22:	bf00      	nop
 8001d24:	f7ff ffde 	bl	8001ce4 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d8f7      	bhi.n	8001d24 <HAL_Delay+0x28>
  {
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2400000c 	.word	0x2400000c

08001d44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_GetREVID+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0c1b      	lsrs	r3, r3, #16
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	5c001000 	.word	0x5c001000

08001d5c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001d6c:	4904      	ldr	r1, [pc, #16]	; (8001d80 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	58000400 	.word	0x58000400

08001d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da0:	4013      	ands	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db2:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	60d3      	str	r3, [r2, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00
 8001dc8:	05fa0000 	.word	0x05fa0000

08001dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	f003 0307 	and.w	r3, r3, #7
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	db0b      	blt.n	8001e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	4907      	ldr	r1, [pc, #28]	; (8001e20 <__NVIC_EnableIRQ+0x38>)
 8001e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	2001      	movs	r0, #1
 8001e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000e100 	.word	0xe000e100

08001e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	db0a      	blt.n	8001e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	490c      	ldr	r1, [pc, #48]	; (8001e70 <__NVIC_SetPriority+0x4c>)
 8001e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	440b      	add	r3, r1
 8001e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e4c:	e00a      	b.n	8001e64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4908      	ldr	r1, [pc, #32]	; (8001e74 <__NVIC_SetPriority+0x50>)
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	761a      	strb	r2, [r3, #24]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000e100 	.word	0xe000e100
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f1c3 0307 	rsb	r3, r3, #7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	bf28      	it	cs
 8001e96:	2304      	movcs	r3, #4
 8001e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d902      	bls.n	8001ea8 <NVIC_EncodePriority+0x30>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3b03      	subs	r3, #3
 8001ea6:	e000      	b.n	8001eaa <NVIC_EncodePriority+0x32>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43d9      	mvns	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	4313      	orrs	r3, r2
         );
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef0:	d301      	bcc.n	8001ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00f      	b.n	8001f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <SysTick_Config+0x40>)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efe:	210f      	movs	r1, #15
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f7ff ff8e 	bl	8001e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <SysTick_Config+0x40>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0e:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <SysTick_Config+0x40>)
 8001f10:	2207      	movs	r2, #7
 8001f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	e000e010 	.word	0xe000e010

08001f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff29 	bl	8001d84 <__NVIC_SetPriorityGrouping>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f48:	f7ff ff40 	bl	8001dcc <__NVIC_GetPriorityGrouping>
 8001f4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	6978      	ldr	r0, [r7, #20]
 8001f54:	f7ff ff90 	bl	8001e78 <NVIC_EncodePriority>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff5f 	bl	8001e24 <__NVIC_SetPriority>
}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff33 	bl	8001de8 <__NVIC_EnableIRQ>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffa4 	bl	8001ee0 <SysTick_Config>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0cf      	b.n	8002156 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d106      	bne.n	8001fce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2223      	movs	r2, #35	; 0x23
 8001fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff faa3 	bl	8001514 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	4b64      	ldr	r3, [pc, #400]	; (8002160 <HAL_ETH_Init+0x1bc>)
 8001fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fd4:	4a62      	ldr	r2, [pc, #392]	; (8002160 <HAL_ETH_Init+0x1bc>)
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fde:	4b60      	ldr	r3, [pc, #384]	; (8002160 <HAL_ETH_Init+0x1bc>)
 8001fe0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7a1b      	ldrb	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d103      	bne.n	8001ffc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f7ff feb1 	bl	8001d5c <HAL_SYSCFG_ETHInterfaceSelect>
 8001ffa:	e003      	b.n	8002004 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001ffc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002000:	f7ff feac 	bl	8001d5c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002004:	4b57      	ldr	r3, [pc, #348]	; (8002164 <HAL_ETH_Init+0x1c0>)
 8002006:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800201e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002020:	f7ff fe60 	bl	8001ce4 <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002026:	e011      	b.n	800204c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002028:	f7ff fe5c 	bl	8001ce4 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002036:	d909      	bls.n	800204c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2204      	movs	r2, #4
 800203c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	22e0      	movs	r2, #224	; 0xe0
 8002044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e084      	b.n	8002156 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1e4      	bne.n	8002028 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f886 	bl	8002170 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002064:	f001 fee4 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8002068:	4603      	mov	r3, r0
 800206a:	4a3f      	ldr	r2, [pc, #252]	; (8002168 <HAL_ETH_Init+0x1c4>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	0c9a      	lsrs	r2, r3, #18
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3a01      	subs	r2, #1
 8002078:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 fa71 	bl	8002564 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800208e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800209a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800209e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d009      	beq.n	80020c2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	22e0      	movs	r2, #224	; 0xe0
 80020ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e049      	b.n	8002156 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80020ce:	4b27      	ldr	r3, [pc, #156]	; (800216c <HAL_ETH_Init+0x1c8>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6952      	ldr	r2, [r2, #20]
 80020d6:	0051      	lsls	r1, r2, #1
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	430b      	orrs	r3, r1
 80020de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020e2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fad9 	bl	800269e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fb1f 	bl	8002730 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	3305      	adds	r3, #5
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	021a      	lsls	r2, r3, #8
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	3304      	adds	r3, #4
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	3303      	adds	r3, #3
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	061a      	lsls	r2, r3, #24
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	3302      	adds	r3, #2
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	041b      	lsls	r3, r3, #16
 8002124:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	3301      	adds	r3, #1
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002130:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800213e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002140:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2210      	movs	r2, #16
 8002150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	58024400 	.word	0x58024400
 8002164:	58000400 	.word	0x58000400
 8002168:	431bde83 	.word	0x431bde83
 800216c:	ffff8001 	.word	0xffff8001

08002170 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002180:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002188:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800218a:	f001 fe51 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 800218e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4a1e      	ldr	r2, [pc, #120]	; (800220c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d908      	bls.n	80021aa <HAL_ETH_SetMDIOClockRange+0x3a>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d804      	bhi.n	80021aa <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	e027      	b.n	80021fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4a18      	ldr	r2, [pc, #96]	; (8002210 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d908      	bls.n	80021c4 <HAL_ETH_SetMDIOClockRange+0x54>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4a17      	ldr	r2, [pc, #92]	; (8002214 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d204      	bcs.n	80021c4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	e01a      	b.n	80021fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4a13      	ldr	r2, [pc, #76]	; (8002214 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d303      	bcc.n	80021d4 <HAL_ETH_SetMDIOClockRange+0x64>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d911      	bls.n	80021f8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4a10      	ldr	r2, [pc, #64]	; (8002218 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d908      	bls.n	80021ee <HAL_ETH_SetMDIOClockRange+0x7e>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4a0f      	ldr	r2, [pc, #60]	; (800221c <HAL_ETH_SetMDIOClockRange+0xac>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d804      	bhi.n	80021ee <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e005      	b.n	80021fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e000      	b.n	80021fa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80021f8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	01312cff 	.word	0x01312cff
 8002210:	02160ebf 	.word	0x02160ebf
 8002214:	03938700 	.word	0x03938700
 8002218:	05f5e0ff 	.word	0x05f5e0ff
 800221c:	08f0d17f 	.word	0x08f0d17f

08002220 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002232:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	791b      	ldrb	r3, [r3, #4]
 8002238:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800223a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	7b1b      	ldrb	r3, [r3, #12]
 8002240:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002242:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	7b5b      	ldrb	r3, [r3, #13]
 8002248:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800224a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	7b9b      	ldrb	r3, [r3, #14]
 8002250:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002252:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	7bdb      	ldrb	r3, [r3, #15]
 8002258:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800225a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	7c12      	ldrb	r2, [r2, #16]
 8002260:	2a00      	cmp	r2, #0
 8002262:	d102      	bne.n	800226a <ETH_SetMACConfig+0x4a>
 8002264:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002268:	e000      	b.n	800226c <ETH_SetMACConfig+0x4c>
 800226a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800226c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	7c52      	ldrb	r2, [r2, #17]
 8002272:	2a00      	cmp	r2, #0
 8002274:	d102      	bne.n	800227c <ETH_SetMACConfig+0x5c>
 8002276:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800227a:	e000      	b.n	800227e <ETH_SetMACConfig+0x5e>
 800227c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800227e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	7c9b      	ldrb	r3, [r3, #18]
 8002284:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002286:	431a      	orrs	r2, r3
               macconf->Speed |
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800228c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002292:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	7f1b      	ldrb	r3, [r3, #28]
 8002298:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800229a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	7f5b      	ldrb	r3, [r3, #29]
 80022a0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80022a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	7f92      	ldrb	r2, [r2, #30]
 80022a8:	2a00      	cmp	r2, #0
 80022aa:	d102      	bne.n	80022b2 <ETH_SetMACConfig+0x92>
 80022ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b0:	e000      	b.n	80022b4 <ETH_SetMACConfig+0x94>
 80022b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80022b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	7fdb      	ldrb	r3, [r3, #31]
 80022ba:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80022bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022c4:	2a00      	cmp	r2, #0
 80022c6:	d102      	bne.n	80022ce <ETH_SetMACConfig+0xae>
 80022c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022cc:	e000      	b.n	80022d0 <ETH_SetMACConfig+0xb0>
 80022ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80022d0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022de:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80022e0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b56      	ldr	r3, [pc, #344]	; (800244c <ETH_SetMACConfig+0x22c>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	68f9      	ldr	r1, [r7, #12]
 80022fa:	430b      	orrs	r3, r1
 80022fc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002302:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800230a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800230c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002314:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002316:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800231e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002320:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002328:	2a00      	cmp	r2, #0
 800232a:	d102      	bne.n	8002332 <ETH_SetMACConfig+0x112>
 800232c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002330:	e000      	b.n	8002334 <ETH_SetMACConfig+0x114>
 8002332:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002334:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	4b42      	ldr	r3, [pc, #264]	; (8002450 <ETH_SetMACConfig+0x230>)
 8002346:	4013      	ands	r3, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	68f9      	ldr	r1, [r7, #12]
 800234e:	430b      	orrs	r3, r1
 8002350:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002358:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	4b3a      	ldr	r3, [pc, #232]	; (8002454 <ETH_SetMACConfig+0x234>)
 800236a:	4013      	ands	r3, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	68f9      	ldr	r1, [r7, #12]
 8002372:	430b      	orrs	r3, r1
 8002374:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800237c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002382:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800238a:	2a00      	cmp	r2, #0
 800238c:	d101      	bne.n	8002392 <ETH_SetMACConfig+0x172>
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	e000      	b.n	8002394 <ETH_SetMACConfig+0x174>
 8002392:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002394:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800239c:	4313      	orrs	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023a6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80023aa:	4013      	ands	r3, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	68f9      	ldr	r1, [r7, #12]
 80023b2:	430b      	orrs	r3, r1
 80023b4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80023bc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80023c4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	f023 0103 	bic.w	r1, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	430a      	orrs	r2, r1
 80023de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80023ea:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002406:	2a00      	cmp	r2, #0
 8002408:	d101      	bne.n	800240e <ETH_SetMACConfig+0x1ee>
 800240a:	2240      	movs	r2, #64	; 0x40
 800240c:	e000      	b.n	8002410 <ETH_SetMACConfig+0x1f0>
 800240e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002410:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002418:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800241a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002422:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002430:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	430a      	orrs	r2, r1
 800243c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	00048083 	.word	0x00048083
 8002450:	c0f88000 	.word	0xc0f88000
 8002454:	fffffef0 	.word	0xfffffef0

08002458 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b38      	ldr	r3, [pc, #224]	; (8002550 <ETH_SetDMAConfig+0xf8>)
 800246e:	4013      	ands	r3, r2
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	6811      	ldr	r1, [r2, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	430b      	orrs	r3, r1
 800247a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800247e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	791b      	ldrb	r3, [r3, #4]
 8002484:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800248a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	7b1b      	ldrb	r3, [r3, #12]
 8002490:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <ETH_SetDMAConfig+0xfc>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	68f9      	ldr	r1, [r7, #12]
 80024aa:	430b      	orrs	r3, r1
 80024ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024b0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	7b5b      	ldrb	r3, [r3, #13]
 80024b6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80024cc:	4b22      	ldr	r3, [pc, #136]	; (8002558 <ETH_SetDMAConfig+0x100>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	68f9      	ldr	r1, [r7, #12]
 80024d6:	430b      	orrs	r3, r1
 80024d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024dc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	7d1b      	ldrb	r3, [r3, #20]
 80024e8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80024ea:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	7f5b      	ldrb	r3, [r3, #29]
 80024f0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024fe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <ETH_SetDMAConfig+0x104>)
 8002504:	4013      	ands	r3, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	68f9      	ldr	r1, [r7, #12]
 800250c:	430b      	orrs	r3, r1
 800250e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002512:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	7f1b      	ldrb	r3, [r3, #28]
 800251a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800252c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <ETH_SetDMAConfig+0x108>)
 8002532:	4013      	ands	r3, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	430b      	orrs	r3, r1
 800253c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002540:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	ffff87fd 	.word	0xffff87fd
 8002554:	ffff2ffe 	.word	0xffff2ffe
 8002558:	fffec000 	.word	0xfffec000
 800255c:	ffc0efef 	.word	0xffc0efef
 8002560:	7fc0ffff 	.word	0x7fc0ffff

08002564 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b0a4      	sub	sp, #144	; 0x90
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002572:	2300      	movs	r3, #0
 8002574:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002582:	2301      	movs	r3, #1
 8002584:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002588:	2301      	movs	r3, #1
 800258a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800258e:	2301      	movs	r3, #1
 8002590:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800259a:	2301      	movs	r3, #1
 800259c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80025a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80025bc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80025c0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80025c8:	2300      	movs	r3, #0
 80025ca:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80025cc:	2301      	movs	r3, #1
 80025ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80025de:	2300      	movs	r3, #0
 80025e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80025e6:	2300      	movs	r3, #0
 80025e8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80025fc:	2320      	movs	r3, #32
 80025fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002602:	2301      	movs	r3, #1
 8002604:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800260e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002614:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002618:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002620:	2302      	movs	r3, #2
 8002622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002626:	2300      	movs	r3, #0
 8002628:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002638:	2301      	movs	r3, #1
 800263a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800263e:	2300      	movs	r3, #0
 8002640:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002642:	2301      	movs	r3, #1
 8002644:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800264c:	4619      	mov	r1, r3
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fde6 	bl	8002220 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002654:	2301      	movs	r3, #1
 8002656:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002658:	2301      	movs	r3, #1
 800265a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800266e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002672:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002678:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800267c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800267e:	2300      	movs	r3, #0
 8002680:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002684:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800268a:	f107 0308 	add.w	r3, r7, #8
 800268e:	4619      	mov	r1, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff fee1 	bl	8002458 <ETH_SetDMAConfig>
}
 8002696:	bf00      	nop
 8002698:	3790      	adds	r7, #144	; 0x90
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800269e:	b480      	push	{r7}
 80026a0:	b085      	sub	sp, #20
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e01d      	b.n	80026e8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68d9      	ldr	r1, [r3, #12]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	440b      	add	r3, r1
 80026bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2200      	movs	r2, #0
 80026c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2200      	movs	r2, #0
 80026d4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	3206      	adds	r2, #6
 80026de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3301      	adds	r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d9de      	bls.n	80026ac <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fc:	461a      	mov	r2, r3
 80026fe:	2303      	movs	r3, #3
 8002700:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002710:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002720:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e023      	b.n	8002786 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6919      	ldr	r1, [r3, #16]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	440b      	add	r3, r1
 800274e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2200      	movs	r2, #0
 800275a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2200      	movs	r2, #0
 8002766:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2200      	movs	r2, #0
 8002772:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	3212      	adds	r2, #18
 800277c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3301      	adds	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d9d8      	bls.n	800273e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b2:	461a      	mov	r2, r3
 80027b4:	2303      	movs	r3, #3
 80027b6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027da:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	; 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027fa:	4b89      	ldr	r3, [pc, #548]	; (8002a20 <HAL_GPIO_Init+0x234>)
 80027fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027fe:	e194      	b.n	8002b2a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8186 	beq.w	8002b24 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d005      	beq.n	8002830 <HAL_GPIO_Init+0x44>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d130      	bne.n	8002892 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002866:	2201      	movs	r2, #1
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 0201 	and.w	r2, r3, #1
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b03      	cmp	r3, #3
 800289c:	d017      	beq.n	80028ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	2203      	movs	r2, #3
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d123      	bne.n	8002922 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	08da      	lsrs	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3208      	adds	r2, #8
 80028e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	69b9      	ldr	r1, [r7, #24]
 800291e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0203 	and.w	r2, r3, #3
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80e0 	beq.w	8002b24 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002964:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <HAL_GPIO_Init+0x238>)
 8002966:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800296a:	4a2e      	ldr	r2, [pc, #184]	; (8002a24 <HAL_GPIO_Init+0x238>)
 800296c:	f043 0302 	orr.w	r3, r3, #2
 8002970:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002974:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_GPIO_Init+0x238>)
 8002976:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002982:	4a29      	ldr	r2, [pc, #164]	; (8002a28 <HAL_GPIO_Init+0x23c>)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	3302      	adds	r3, #2
 800298a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	220f      	movs	r2, #15
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <HAL_GPIO_Init+0x240>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d052      	beq.n	8002a54 <HAL_GPIO_Init+0x268>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <HAL_GPIO_Init+0x244>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d031      	beq.n	8002a1a <HAL_GPIO_Init+0x22e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <HAL_GPIO_Init+0x248>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d02b      	beq.n	8002a16 <HAL_GPIO_Init+0x22a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <HAL_GPIO_Init+0x24c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d025      	beq.n	8002a12 <HAL_GPIO_Init+0x226>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <HAL_GPIO_Init+0x250>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01f      	beq.n	8002a0e <HAL_GPIO_Init+0x222>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <HAL_GPIO_Init+0x254>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d019      	beq.n	8002a0a <HAL_GPIO_Init+0x21e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1a      	ldr	r2, [pc, #104]	; (8002a44 <HAL_GPIO_Init+0x258>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_GPIO_Init+0x21a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a19      	ldr	r2, [pc, #100]	; (8002a48 <HAL_GPIO_Init+0x25c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00d      	beq.n	8002a02 <HAL_GPIO_Init+0x216>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <HAL_GPIO_Init+0x260>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <HAL_GPIO_Init+0x212>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <HAL_GPIO_Init+0x264>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_GPIO_Init+0x20e>
 80029f6:	2309      	movs	r3, #9
 80029f8:	e02d      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 80029fa:	230a      	movs	r3, #10
 80029fc:	e02b      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 80029fe:	2308      	movs	r3, #8
 8002a00:	e029      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a02:	2307      	movs	r3, #7
 8002a04:	e027      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a06:	2306      	movs	r3, #6
 8002a08:	e025      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a0a:	2305      	movs	r3, #5
 8002a0c:	e023      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a0e:	2304      	movs	r3, #4
 8002a10:	e021      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a12:	2303      	movs	r3, #3
 8002a14:	e01f      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e01d      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e01b      	b.n	8002a56 <HAL_GPIO_Init+0x26a>
 8002a1e:	bf00      	nop
 8002a20:	58000080 	.word	0x58000080
 8002a24:	58024400 	.word	0x58024400
 8002a28:	58000400 	.word	0x58000400
 8002a2c:	58020000 	.word	0x58020000
 8002a30:	58020400 	.word	0x58020400
 8002a34:	58020800 	.word	0x58020800
 8002a38:	58020c00 	.word	0x58020c00
 8002a3c:	58021000 	.word	0x58021000
 8002a40:	58021400 	.word	0x58021400
 8002a44:	58021800 	.word	0x58021800
 8002a48:	58021c00 	.word	0x58021c00
 8002a4c:	58022000 	.word	0x58022000
 8002a50:	58022400 	.word	0x58022400
 8002a54:	2300      	movs	r3, #0
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	f002 0203 	and.w	r2, r2, #3
 8002a5c:	0092      	lsls	r2, r2, #2
 8002a5e:	4093      	lsls	r3, r2
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a66:	4938      	ldr	r1, [pc, #224]	; (8002b48 <HAL_GPIO_Init+0x35c>)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	3301      	adds	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f47f ae63 	bne.w	8002800 <HAL_GPIO_Init+0x14>
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
 8002b3e:	3724      	adds	r7, #36	; 0x24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	58000400 	.word	0x58000400

08002b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b5c:	787b      	ldrb	r3, [r7, #1]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b68:	e003      	b.n	8002b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	041a      	lsls	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	619a      	str	r2, [r3, #24]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b085      	sub	sp, #20
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b90:	887a      	ldrh	r2, [r7, #2]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4013      	ands	r3, r2
 8002b96:	041a      	lsls	r2, r3, #16
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	43d9      	mvns	r1, r3
 8002b9c:	887b      	ldrh	r3, [r7, #2]
 8002b9e:	400b      	ands	r3, r1
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	619a      	str	r2, [r3, #24]
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002bbc:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <HAL_HSEM_FastTake+0x2c>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3320      	adds	r3, #32
 8002bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc6:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <HAL_HSEM_FastTake+0x30>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d101      	bne.n	8002bd0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e000      	b.n	8002bd2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	58026400 	.word	0x58026400
 8002be4:	80000300 	.word	0x80000300

08002be8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002bf2:	4906      	ldr	r1, [pc, #24]	; (8002c0c <HAL_HSEM_Release+0x24>)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	58026400 	.word	0x58026400

08002c10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c12:	b08f      	sub	sp, #60	; 0x3c
 8002c14:	af0a      	add	r7, sp, #40	; 0x28
 8002c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e116      	b.n	8002e50 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d106      	bne.n	8002c42 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7fe fe07 	bl	8001850 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2203      	movs	r2, #3
 8002c46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d102      	bne.n	8002c5c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f004 feb9 	bl	80079d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	687e      	ldr	r6, [r7, #4]
 8002c6e:	466d      	mov	r5, sp
 8002c70:	f106 0410 	add.w	r4, r6, #16
 8002c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c80:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c84:	1d33      	adds	r3, r6, #4
 8002c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c88:	6838      	ldr	r0, [r7, #0]
 8002c8a:	f004 fe37 	bl	80078fc <USB_CoreInit>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0d7      	b.n	8002e50 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f004 fea7 	bl	80079fa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cac:	2300      	movs	r3, #0
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	e04a      	b.n	8002d48 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	333d      	adds	r3, #61	; 0x3d
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	333c      	adds	r3, #60	; 0x3c
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	b298      	uxth	r0, r3
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	3344      	adds	r3, #68	; 0x44
 8002cee:	4602      	mov	r2, r0
 8002cf0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	3340      	adds	r3, #64	; 0x40
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	3348      	adds	r3, #72	; 0x48
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d1a:	7bfa      	ldrb	r2, [r7, #15]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	334c      	adds	r3, #76	; 0x4c
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3354      	adds	r3, #84	; 0x54
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	3301      	adds	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3af      	bcc.n	8002cb2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
 8002d56:	e044      	b.n	8002de2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d9a:	7bfa      	ldrb	r2, [r7, #15]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	3301      	adds	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d3b5      	bcc.n	8002d58 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	687e      	ldr	r6, [r7, #4]
 8002df4:	466d      	mov	r5, sp
 8002df6:	f106 0410 	add.w	r4, r6, #16
 8002dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e06:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e0a:	1d33      	adds	r3, r6, #4
 8002e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e0e:	6838      	ldr	r0, [r7, #0]
 8002e10:	f004 fe40 	bl	8007a94 <USB_DevInit>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e014      	b.n	8002e50 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d102      	bne.n	8002e44 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f80a 	bl	8002e58 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f004 fffe 	bl	8007e4a <USB_DevDisconnect>

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e58 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_PCDEx_ActivateLPM+0x44>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	10000003 	.word	0x10000003

08002ea0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002ea8:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <HAL_PWREx_ConfigSupply+0xb0>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	2b06      	cmp	r3, #6
 8002eb2:	d00a      	beq.n	8002eca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002eb4:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_PWREx_ConfigSupply+0xb0>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d001      	beq.n	8002ec6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e040      	b.n	8002f48 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e03e      	b.n	8002f48 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002eca:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002ed2:	491f      	ldr	r1, [pc, #124]	; (8002f50 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002eda:	f7fe ff03 	bl	8001ce4 <HAL_GetTick>
 8002ede:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ee0:	e009      	b.n	8002ef6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ee2:	f7fe feff 	bl	8001ce4 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ef0:	d901      	bls.n	8002ef6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e028      	b.n	8002f48 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ef6:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f02:	d1ee      	bne.n	8002ee2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b1e      	cmp	r3, #30
 8002f08:	d008      	beq.n	8002f1c <HAL_PWREx_ConfigSupply+0x7c>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b2e      	cmp	r3, #46	; 0x2e
 8002f0e:	d005      	beq.n	8002f1c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b1d      	cmp	r3, #29
 8002f14:	d002      	beq.n	8002f1c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b2d      	cmp	r3, #45	; 0x2d
 8002f1a:	d114      	bne.n	8002f46 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002f1c:	f7fe fee2 	bl	8001ce4 <HAL_GetTick>
 8002f20:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f22:	e009      	b.n	8002f38 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f24:	f7fe fede 	bl	8001ce4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f32:	d901      	bls.n	8002f38 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e007      	b.n	8002f48 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d1ee      	bne.n	8002f24 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	58024800 	.word	0x58024800

08002f54 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f62:	60d3      	str	r3, [r2, #12]
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	58024800 	.word	0x58024800

08002f74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08c      	sub	sp, #48	; 0x30
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f000 bc1d 	b.w	80037c2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8087 	beq.w	80030a4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f96:	4b99      	ldr	r3, [pc, #612]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fa0:	4b96      	ldr	r3, [pc, #600]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa8:	2b10      	cmp	r3, #16
 8002faa:	d007      	beq.n	8002fbc <HAL_RCC_OscConfig+0x48>
 8002fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fae:	2b18      	cmp	r3, #24
 8002fb0:	d110      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x60>
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d10b      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	4b8f      	ldr	r3, [pc, #572]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d06c      	beq.n	80030a2 <HAL_RCC_OscConfig+0x12e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d168      	bne.n	80030a2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e3f6      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fdc:	d106      	bne.n	8002fec <HAL_RCC_OscConfig+0x78>
 8002fde:	4b87      	ldr	r3, [pc, #540]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a86      	ldr	r2, [pc, #536]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e02e      	b.n	800304a <HAL_RCC_OscConfig+0xd6>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10c      	bne.n	800300e <HAL_RCC_OscConfig+0x9a>
 8002ff4:	4b81      	ldr	r3, [pc, #516]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a80      	ldr	r2, [pc, #512]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8002ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b7e      	ldr	r3, [pc, #504]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a7d      	ldr	r2, [pc, #500]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e01d      	b.n	800304a <HAL_RCC_OscConfig+0xd6>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003016:	d10c      	bne.n	8003032 <HAL_RCC_OscConfig+0xbe>
 8003018:	4b78      	ldr	r3, [pc, #480]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a77      	ldr	r2, [pc, #476]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 800301e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b75      	ldr	r3, [pc, #468]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a74      	ldr	r2, [pc, #464]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	e00b      	b.n	800304a <HAL_RCC_OscConfig+0xd6>
 8003032:	4b72      	ldr	r3, [pc, #456]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a71      	ldr	r2, [pc, #452]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4b6f      	ldr	r3, [pc, #444]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a6e      	ldr	r2, [pc, #440]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003044:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003048:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d013      	beq.n	800307a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7fe fe47 	bl	8001ce4 <HAL_GetTick>
 8003056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800305a:	f7fe fe43 	bl	8001ce4 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b64      	cmp	r3, #100	; 0x64
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e3aa      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800306c:	4b63      	ldr	r3, [pc, #396]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0xe6>
 8003078:	e014      	b.n	80030a4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe fe33 	bl	8001ce4 <HAL_GetTick>
 800307e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003082:	f7fe fe2f 	bl	8001ce4 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b64      	cmp	r3, #100	; 0x64
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e396      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003094:	4b59      	ldr	r3, [pc, #356]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x10e>
 80030a0:	e000      	b.n	80030a4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80cb 	beq.w	8003248 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030b2:	4b52      	ldr	r3, [pc, #328]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ba:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030bc:	4b4f      	ldr	r3, [pc, #316]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <HAL_RCC_OscConfig+0x164>
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	2b18      	cmp	r3, #24
 80030cc:	d156      	bne.n	800317c <HAL_RCC_OscConfig+0x208>
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d151      	bne.n	800317c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d8:	4b48      	ldr	r3, [pc, #288]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_OscConfig+0x17c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e368      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030f0:	4b42      	ldr	r3, [pc, #264]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f023 0219 	bic.w	r2, r3, #25
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	493f      	ldr	r1, [pc, #252]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003102:	f7fe fdef 	bl	8001ce4 <HAL_GetTick>
 8003106:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310a:	f7fe fdeb 	bl	8001ce4 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e352      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800311c:	4b37      	ldr	r3, [pc, #220]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	f7fe fe0c 	bl	8001d44 <HAL_GetREVID>
 800312c:	4603      	mov	r3, r0
 800312e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003132:	4293      	cmp	r3, r2
 8003134:	d817      	bhi.n	8003166 <HAL_RCC_OscConfig+0x1f2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	d108      	bne.n	8003150 <HAL_RCC_OscConfig+0x1dc>
 800313e:	4b2f      	ldr	r3, [pc, #188]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003146:	4a2d      	ldr	r2, [pc, #180]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800314c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800314e:	e07b      	b.n	8003248 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003150:	4b2a      	ldr	r3, [pc, #168]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	031b      	lsls	r3, r3, #12
 800315e:	4927      	ldr	r1, [pc, #156]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003164:	e070      	b.n	8003248 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003166:	4b25      	ldr	r3, [pc, #148]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	061b      	lsls	r3, r3, #24
 8003174:	4921      	ldr	r1, [pc, #132]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003176:	4313      	orrs	r3, r2
 8003178:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800317a:	e065      	b.n	8003248 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d048      	beq.n	8003216 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003184:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 0219 	bic.w	r2, r3, #25
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	491a      	ldr	r1, [pc, #104]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003196:	f7fe fda5 	bl	8001ce4 <HAL_GetTick>
 800319a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800319e:	f7fe fda1 	bl	8001ce4 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e308      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031b0:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	f7fe fdc2 	bl	8001d44 <HAL_GetREVID>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d81a      	bhi.n	8003200 <HAL_RCC_OscConfig+0x28c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b40      	cmp	r3, #64	; 0x40
 80031d0:	d108      	bne.n	80031e4 <HAL_RCC_OscConfig+0x270>
 80031d2:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80031da:	4a08      	ldr	r2, [pc, #32]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 80031dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e0:	6053      	str	r3, [r2, #4]
 80031e2:	e031      	b.n	8003248 <HAL_RCC_OscConfig+0x2d4>
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	031b      	lsls	r3, r3, #12
 80031f2:	4902      	ldr	r1, [pc, #8]	; (80031fc <HAL_RCC_OscConfig+0x288>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
 80031f8:	e026      	b.n	8003248 <HAL_RCC_OscConfig+0x2d4>
 80031fa:	bf00      	nop
 80031fc:	58024400 	.word	0x58024400
 8003200:	4b9a      	ldr	r3, [pc, #616]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	061b      	lsls	r3, r3, #24
 800320e:	4997      	ldr	r1, [pc, #604]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
 8003214:	e018      	b.n	8003248 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003216:	4b95      	ldr	r3, [pc, #596]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a94      	ldr	r2, [pc, #592]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003222:	f7fe fd5f 	bl	8001ce4 <HAL_GetTick>
 8003226:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800322a:	f7fe fd5b 	bl	8001ce4 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e2c2      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800323c:	4b8b      	ldr	r3, [pc, #556]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f0      	bne.n	800322a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80a9 	beq.w	80033a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003256:	4b85      	ldr	r3, [pc, #532]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800325e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003260:	4b82      	ldr	r3, [pc, #520]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b08      	cmp	r3, #8
 800326a:	d007      	beq.n	800327c <HAL_RCC_OscConfig+0x308>
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b18      	cmp	r3, #24
 8003270:	d13a      	bne.n	80032e8 <HAL_RCC_OscConfig+0x374>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d135      	bne.n	80032e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800327c:	4b7b      	ldr	r3, [pc, #492]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_OscConfig+0x320>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	2b80      	cmp	r3, #128	; 0x80
 800328e:	d001      	beq.n	8003294 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e296      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003294:	f7fe fd56 	bl	8001d44 <HAL_GetREVID>
 8003298:	4603      	mov	r3, r0
 800329a:	f241 0203 	movw	r2, #4099	; 0x1003
 800329e:	4293      	cmp	r3, r2
 80032a0:	d817      	bhi.n	80032d2 <HAL_RCC_OscConfig+0x35e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d108      	bne.n	80032bc <HAL_RCC_OscConfig+0x348>
 80032aa:	4b70      	ldr	r3, [pc, #448]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80032b2:	4a6e      	ldr	r2, [pc, #440]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 80032b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032ba:	e075      	b.n	80033a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032bc:	4b6b      	ldr	r3, [pc, #428]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	069b      	lsls	r3, r3, #26
 80032ca:	4968      	ldr	r1, [pc, #416]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032d0:	e06a      	b.n	80033a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032d2:	4b66      	ldr	r3, [pc, #408]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	061b      	lsls	r3, r3, #24
 80032e0:	4962      	ldr	r1, [pc, #392]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032e6:	e05f      	b.n	80033a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d042      	beq.n	8003376 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80032f0:	4b5e      	ldr	r3, [pc, #376]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a5d      	ldr	r2, [pc, #372]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 80032f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe fcf2 	bl	8001ce4 <HAL_GetTick>
 8003300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003304:	f7fe fcee 	bl	8001ce4 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e255      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003316:	4b55      	ldr	r3, [pc, #340]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003322:	f7fe fd0f 	bl	8001d44 <HAL_GetREVID>
 8003326:	4603      	mov	r3, r0
 8003328:	f241 0203 	movw	r2, #4099	; 0x1003
 800332c:	4293      	cmp	r3, r2
 800332e:	d817      	bhi.n	8003360 <HAL_RCC_OscConfig+0x3ec>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	2b20      	cmp	r3, #32
 8003336:	d108      	bne.n	800334a <HAL_RCC_OscConfig+0x3d6>
 8003338:	4b4c      	ldr	r3, [pc, #304]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003340:	4a4a      	ldr	r2, [pc, #296]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 8003342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003346:	6053      	str	r3, [r2, #4]
 8003348:	e02e      	b.n	80033a8 <HAL_RCC_OscConfig+0x434>
 800334a:	4b48      	ldr	r3, [pc, #288]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	069b      	lsls	r3, r3, #26
 8003358:	4944      	ldr	r1, [pc, #272]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
 800335e:	e023      	b.n	80033a8 <HAL_RCC_OscConfig+0x434>
 8003360:	4b42      	ldr	r3, [pc, #264]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	061b      	lsls	r3, r3, #24
 800336e:	493f      	ldr	r1, [pc, #252]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 8003370:	4313      	orrs	r3, r2
 8003372:	60cb      	str	r3, [r1, #12]
 8003374:	e018      	b.n	80033a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003376:	4b3d      	ldr	r3, [pc, #244]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a3c      	ldr	r2, [pc, #240]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 800337c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fe fcaf 	bl	8001ce4 <HAL_GetTick>
 8003386:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800338a:	f7fe fcab 	bl	8001ce4 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e212      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800339c:	4b33      	ldr	r3, [pc, #204]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f0      	bne.n	800338a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d036      	beq.n	8003422 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d019      	beq.n	80033f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033bc:	4b2b      	ldr	r3, [pc, #172]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 80033be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c0:	4a2a      	ldr	r2, [pc, #168]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fe fc8c 	bl	8001ce4 <HAL_GetTick>
 80033cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d0:	f7fe fc88 	bl	8001ce4 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e1ef      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033e2:	4b22      	ldr	r3, [pc, #136]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 80033e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x45c>
 80033ee:	e018      	b.n	8003422 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f0:	4b1e      	ldr	r3, [pc, #120]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 80033f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f4:	4a1d      	ldr	r2, [pc, #116]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fe fc72 	bl	8001ce4 <HAL_GetTick>
 8003400:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003404:	f7fe fc6e 	bl	8001ce4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e1d5      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003416:	4b15      	ldr	r3, [pc, #84]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 8003418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d039      	beq.n	80034a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d01c      	beq.n	8003470 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003436:	4b0d      	ldr	r3, [pc, #52]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a0c      	ldr	r2, [pc, #48]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 800343c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003440:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003442:	f7fe fc4f 	bl	8001ce4 <HAL_GetTick>
 8003446:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800344a:	f7fe fc4b 	bl	8001ce4 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e1b2      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <HAL_RCC_OscConfig+0x4f8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x4d6>
 8003468:	e01b      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
 800346a:	bf00      	nop
 800346c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003470:	4b9b      	ldr	r3, [pc, #620]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a9a      	ldr	r2, [pc, #616]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800347a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800347c:	f7fe fc32 	bl	8001ce4 <HAL_GetTick>
 8003480:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003484:	f7fe fc2e 	bl	8001ce4 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e195      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003496:	4b92      	ldr	r3, [pc, #584]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 8081 	beq.w	80035b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034b0:	4b8c      	ldr	r3, [pc, #560]	; (80036e4 <HAL_RCC_OscConfig+0x770>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a8b      	ldr	r2, [pc, #556]	; (80036e4 <HAL_RCC_OscConfig+0x770>)
 80034b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034bc:	f7fe fc12 	bl	8001ce4 <HAL_GetTick>
 80034c0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034c4:	f7fe fc0e 	bl	8001ce4 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e175      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034d6:	4b83      	ldr	r3, [pc, #524]	; (80036e4 <HAL_RCC_OscConfig+0x770>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d106      	bne.n	80034f8 <HAL_RCC_OscConfig+0x584>
 80034ea:	4b7d      	ldr	r3, [pc, #500]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	4a7c      	ldr	r2, [pc, #496]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6713      	str	r3, [r2, #112]	; 0x70
 80034f6:	e02d      	b.n	8003554 <HAL_RCC_OscConfig+0x5e0>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10c      	bne.n	800351a <HAL_RCC_OscConfig+0x5a6>
 8003500:	4b77      	ldr	r3, [pc, #476]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	4a76      	ldr	r2, [pc, #472]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	6713      	str	r3, [r2, #112]	; 0x70
 800350c:	4b74      	ldr	r3, [pc, #464]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	4a73      	ldr	r2, [pc, #460]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003512:	f023 0304 	bic.w	r3, r3, #4
 8003516:	6713      	str	r3, [r2, #112]	; 0x70
 8003518:	e01c      	b.n	8003554 <HAL_RCC_OscConfig+0x5e0>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b05      	cmp	r3, #5
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0x5c8>
 8003522:	4b6f      	ldr	r3, [pc, #444]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	4a6e      	ldr	r2, [pc, #440]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003528:	f043 0304 	orr.w	r3, r3, #4
 800352c:	6713      	str	r3, [r2, #112]	; 0x70
 800352e:	4b6c      	ldr	r3, [pc, #432]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003532:	4a6b      	ldr	r2, [pc, #428]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6713      	str	r3, [r2, #112]	; 0x70
 800353a:	e00b      	b.n	8003554 <HAL_RCC_OscConfig+0x5e0>
 800353c:	4b68      	ldr	r3, [pc, #416]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 800353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003540:	4a67      	ldr	r2, [pc, #412]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003542:	f023 0301 	bic.w	r3, r3, #1
 8003546:	6713      	str	r3, [r2, #112]	; 0x70
 8003548:	4b65      	ldr	r3, [pc, #404]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	4a64      	ldr	r2, [pc, #400]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 800354e:	f023 0304 	bic.w	r3, r3, #4
 8003552:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d015      	beq.n	8003588 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fe fbc2 	bl	8001ce4 <HAL_GetTick>
 8003560:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003562:	e00a      	b.n	800357a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003564:	f7fe fbbe 	bl	8001ce4 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e123      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800357a:	4b59      	ldr	r3, [pc, #356]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0ee      	beq.n	8003564 <HAL_RCC_OscConfig+0x5f0>
 8003586:	e014      	b.n	80035b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fe fbac 	bl	8001ce4 <HAL_GetTick>
 800358c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800358e:	e00a      	b.n	80035a6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003590:	f7fe fba8 	bl	8001ce4 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	; 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e10d      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035a6:	4b4e      	ldr	r3, [pc, #312]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ee      	bne.n	8003590 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8102 	beq.w	80037c0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80035bc:	4b48      	ldr	r3, [pc, #288]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035c4:	2b18      	cmp	r3, #24
 80035c6:	f000 80bd 	beq.w	8003744 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	f040 809e 	bne.w	8003710 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d4:	4b42      	ldr	r3, [pc, #264]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a41      	ldr	r2, [pc, #260]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80035da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fe fb80 	bl	8001ce4 <HAL_GetTick>
 80035e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fe fb7c 	bl	8001ce4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e0e3      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035fa:	4b39      	ldr	r3, [pc, #228]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003606:	4b36      	ldr	r3, [pc, #216]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800360a:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <HAL_RCC_OscConfig+0x774>)
 800360c:	4013      	ands	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003616:	0112      	lsls	r2, r2, #4
 8003618:	430a      	orrs	r2, r1
 800361a:	4931      	ldr	r1, [pc, #196]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 800361c:	4313      	orrs	r3, r2
 800361e:	628b      	str	r3, [r1, #40]	; 0x28
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	3b01      	subs	r3, #1
 8003626:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362e:	3b01      	subs	r3, #1
 8003630:	025b      	lsls	r3, r3, #9
 8003632:	b29b      	uxth	r3, r3
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	3b01      	subs	r3, #1
 800363c:	041b      	lsls	r3, r3, #16
 800363e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003648:	3b01      	subs	r3, #1
 800364a:	061b      	lsls	r3, r3, #24
 800364c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003650:	4923      	ldr	r1, [pc, #140]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003652:	4313      	orrs	r3, r2
 8003654:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003656:	4b22      	ldr	r3, [pc, #136]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	4a21      	ldr	r2, [pc, #132]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003662:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003666:	4b21      	ldr	r3, [pc, #132]	; (80036ec <HAL_RCC_OscConfig+0x778>)
 8003668:	4013      	ands	r3, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800366e:	00d2      	lsls	r2, r2, #3
 8003670:	491b      	ldr	r1, [pc, #108]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003672:	4313      	orrs	r3, r2
 8003674:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003676:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	f023 020c 	bic.w	r2, r3, #12
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	4917      	ldr	r1, [pc, #92]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003684:	4313      	orrs	r3, r2
 8003686:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003688:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	f023 0202 	bic.w	r2, r3, #2
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	4912      	ldr	r1, [pc, #72]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 8003696:	4313      	orrs	r3, r2
 8003698:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800369a:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	4a10      	ldr	r2, [pc, #64]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80036a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a6:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	4a0d      	ldr	r2, [pc, #52]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80036ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80036b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80036be:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <HAL_RCC_OscConfig+0x76c>)
 80036d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fe fb05 	bl	8001ce4 <HAL_GetTick>
 80036da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036dc:	e011      	b.n	8003702 <HAL_RCC_OscConfig+0x78e>
 80036de:	bf00      	nop
 80036e0:	58024400 	.word	0x58024400
 80036e4:	58024800 	.word	0x58024800
 80036e8:	fffffc0c 	.word	0xfffffc0c
 80036ec:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fe faf8 	bl	8001ce4 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e05f      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003702:	4b32      	ldr	r3, [pc, #200]	; (80037cc <HAL_RCC_OscConfig+0x858>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x77c>
 800370e:	e057      	b.n	80037c0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003710:	4b2e      	ldr	r3, [pc, #184]	; (80037cc <HAL_RCC_OscConfig+0x858>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a2d      	ldr	r2, [pc, #180]	; (80037cc <HAL_RCC_OscConfig+0x858>)
 8003716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800371a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe fae2 	bl	8001ce4 <HAL_GetTick>
 8003720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe fade 	bl	8001ce4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e045      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003736:	4b25      	ldr	r3, [pc, #148]	; (80037cc <HAL_RCC_OscConfig+0x858>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x7b0>
 8003742:	e03d      	b.n	80037c0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003744:	4b21      	ldr	r3, [pc, #132]	; (80037cc <HAL_RCC_OscConfig+0x858>)
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800374a:	4b20      	ldr	r3, [pc, #128]	; (80037cc <HAL_RCC_OscConfig+0x858>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	2b01      	cmp	r3, #1
 8003756:	d031      	beq.n	80037bc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f003 0203 	and.w	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003762:	429a      	cmp	r2, r3
 8003764:	d12a      	bne.n	80037bc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d122      	bne.n	80037bc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d11a      	bne.n	80037bc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	0a5b      	lsrs	r3, r3, #9
 800378a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003792:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d111      	bne.n	80037bc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	0c1b      	lsrs	r3, r3, #16
 800379c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d108      	bne.n	80037bc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	0e1b      	lsrs	r3, r3, #24
 80037ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3730      	adds	r7, #48	; 0x30
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	58024400 	.word	0x58024400

080037d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e19c      	b.n	8003b1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e4:	4b8a      	ldr	r3, [pc, #552]	; (8003a10 <HAL_RCC_ClockConfig+0x240>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d910      	bls.n	8003814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b87      	ldr	r3, [pc, #540]	; (8003a10 <HAL_RCC_ClockConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 020f 	bic.w	r2, r3, #15
 80037fa:	4985      	ldr	r1, [pc, #532]	; (8003a10 <HAL_RCC_ClockConfig+0x240>)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	4313      	orrs	r3, r2
 8003800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	4b83      	ldr	r3, [pc, #524]	; (8003a10 <HAL_RCC_ClockConfig+0x240>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d001      	beq.n	8003814 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e184      	b.n	8003b1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d010      	beq.n	8003842 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	4b7b      	ldr	r3, [pc, #492]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800382c:	429a      	cmp	r2, r3
 800382e:	d908      	bls.n	8003842 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003830:	4b78      	ldr	r3, [pc, #480]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	4975      	ldr	r1, [pc, #468]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 800383e:	4313      	orrs	r3, r2
 8003840:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d010      	beq.n	8003870 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	4b70      	ldr	r3, [pc, #448]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800385a:	429a      	cmp	r2, r3
 800385c:	d908      	bls.n	8003870 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800385e:	4b6d      	ldr	r3, [pc, #436]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	496a      	ldr	r1, [pc, #424]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 800386c:	4313      	orrs	r3, r2
 800386e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b00      	cmp	r3, #0
 800387a:	d010      	beq.n	800389e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699a      	ldr	r2, [r3, #24]
 8003880:	4b64      	ldr	r3, [pc, #400]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003888:	429a      	cmp	r2, r3
 800388a:	d908      	bls.n	800389e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800388c:	4b61      	ldr	r3, [pc, #388]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	495e      	ldr	r1, [pc, #376]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 800389a:	4313      	orrs	r3, r2
 800389c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d010      	beq.n	80038cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	4b59      	ldr	r3, [pc, #356]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d908      	bls.n	80038cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80038ba:	4b56      	ldr	r3, [pc, #344]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4953      	ldr	r1, [pc, #332]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d010      	beq.n	80038fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	4b4d      	ldr	r3, [pc, #308]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d908      	bls.n	80038fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e8:	4b4a      	ldr	r3, [pc, #296]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f023 020f 	bic.w	r2, r3, #15
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4947      	ldr	r1, [pc, #284]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d055      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003906:	4b43      	ldr	r3, [pc, #268]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	4940      	ldr	r1, [pc, #256]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 8003914:	4313      	orrs	r3, r2
 8003916:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d107      	bne.n	8003930 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003920:	4b3c      	ldr	r3, [pc, #240]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d121      	bne.n	8003970 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0f6      	b.n	8003b1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d107      	bne.n	8003948 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003938:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d115      	bne.n	8003970 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0ea      	b.n	8003b1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003950:	4b30      	ldr	r3, [pc, #192]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d109      	bne.n	8003970 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0de      	b.n	8003b1e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003960:	4b2c      	ldr	r3, [pc, #176]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0d6      	b.n	8003b1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003970:	4b28      	ldr	r3, [pc, #160]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f023 0207 	bic.w	r2, r3, #7
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4925      	ldr	r1, [pc, #148]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 800397e:	4313      	orrs	r3, r2
 8003980:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003982:	f7fe f9af 	bl	8001ce4 <HAL_GetTick>
 8003986:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003988:	e00a      	b.n	80039a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800398a:	f7fe f9ab 	bl	8001ce4 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	f241 3288 	movw	r2, #5000	; 0x1388
 8003998:	4293      	cmp	r3, r2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e0be      	b.n	8003b1e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a0:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d1eb      	bne.n	800398a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d010      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d208      	bcs.n	80039e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ce:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f023 020f 	bic.w	r2, r3, #15
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	490e      	ldr	r1, [pc, #56]	; (8003a14 <HAL_RCC_ClockConfig+0x244>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_RCC_ClockConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d214      	bcs.n	8003a18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <HAL_RCC_ClockConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 020f 	bic.w	r2, r3, #15
 80039f6:	4906      	ldr	r1, [pc, #24]	; (8003a10 <HAL_RCC_ClockConfig+0x240>)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <HAL_RCC_ClockConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e086      	b.n	8003b1e <HAL_RCC_ClockConfig+0x34e>
 8003a10:	52002000 	.word	0x52002000
 8003a14:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d010      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <HAL_RCC_ClockConfig+0x358>)
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d208      	bcs.n	8003a46 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a34:	4b3c      	ldr	r3, [pc, #240]	; (8003b28 <HAL_RCC_ClockConfig+0x358>)
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	4939      	ldr	r1, [pc, #228]	; (8003b28 <HAL_RCC_ClockConfig+0x358>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d010      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	4b34      	ldr	r3, [pc, #208]	; (8003b28 <HAL_RCC_ClockConfig+0x358>)
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d208      	bcs.n	8003a74 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a62:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <HAL_RCC_ClockConfig+0x358>)
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	492e      	ldr	r1, [pc, #184]	; (8003b28 <HAL_RCC_ClockConfig+0x358>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d010      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699a      	ldr	r2, [r3, #24]
 8003a84:	4b28      	ldr	r3, [pc, #160]	; (8003b28 <HAL_RCC_ClockConfig+0x358>)
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d208      	bcs.n	8003aa2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_RCC_ClockConfig+0x358>)
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	4922      	ldr	r1, [pc, #136]	; (8003b28 <HAL_RCC_ClockConfig+0x358>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d010      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69da      	ldr	r2, [r3, #28]
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_RCC_ClockConfig+0x358>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d208      	bcs.n	8003ad0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003abe:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <HAL_RCC_ClockConfig+0x358>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	4917      	ldr	r1, [pc, #92]	; (8003b28 <HAL_RCC_ClockConfig+0x358>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ad0:	f000 f834 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <HAL_RCC_ClockConfig+0x358>)
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	4912      	ldr	r1, [pc, #72]	; (8003b2c <HAL_RCC_ClockConfig+0x35c>)
 8003ae2:	5ccb      	ldrb	r3, [r1, r3]
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003aee:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <HAL_RCC_ClockConfig+0x358>)
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <HAL_RCC_ClockConfig+0x35c>)
 8003af8:	5cd3      	ldrb	r3, [r2, r3]
 8003afa:	f003 031f 	and.w	r3, r3, #31
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
 8003b04:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <HAL_RCC_ClockConfig+0x360>)
 8003b06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b08:	4a0a      	ldr	r2, [pc, #40]	; (8003b34 <HAL_RCC_ClockConfig+0x364>)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <HAL_RCC_ClockConfig+0x368>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe f89c 	bl	8001c50 <HAL_InitTick>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	58024400 	.word	0x58024400
 8003b2c:	08008fbc 	.word	0x08008fbc
 8003b30:	24000004 	.word	0x24000004
 8003b34:	24000000 	.word	0x24000000
 8003b38:	24000008 	.word	0x24000008

08003b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b089      	sub	sp, #36	; 0x24
 8003b40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b42:	4bb3      	ldr	r3, [pc, #716]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b4a:	2b18      	cmp	r3, #24
 8003b4c:	f200 8155 	bhi.w	8003dfa <HAL_RCC_GetSysClockFreq+0x2be>
 8003b50:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b56:	bf00      	nop
 8003b58:	08003bbd 	.word	0x08003bbd
 8003b5c:	08003dfb 	.word	0x08003dfb
 8003b60:	08003dfb 	.word	0x08003dfb
 8003b64:	08003dfb 	.word	0x08003dfb
 8003b68:	08003dfb 	.word	0x08003dfb
 8003b6c:	08003dfb 	.word	0x08003dfb
 8003b70:	08003dfb 	.word	0x08003dfb
 8003b74:	08003dfb 	.word	0x08003dfb
 8003b78:	08003be3 	.word	0x08003be3
 8003b7c:	08003dfb 	.word	0x08003dfb
 8003b80:	08003dfb 	.word	0x08003dfb
 8003b84:	08003dfb 	.word	0x08003dfb
 8003b88:	08003dfb 	.word	0x08003dfb
 8003b8c:	08003dfb 	.word	0x08003dfb
 8003b90:	08003dfb 	.word	0x08003dfb
 8003b94:	08003dfb 	.word	0x08003dfb
 8003b98:	08003be9 	.word	0x08003be9
 8003b9c:	08003dfb 	.word	0x08003dfb
 8003ba0:	08003dfb 	.word	0x08003dfb
 8003ba4:	08003dfb 	.word	0x08003dfb
 8003ba8:	08003dfb 	.word	0x08003dfb
 8003bac:	08003dfb 	.word	0x08003dfb
 8003bb0:	08003dfb 	.word	0x08003dfb
 8003bb4:	08003dfb 	.word	0x08003dfb
 8003bb8:	08003bef 	.word	0x08003bef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bbc:	4b94      	ldr	r3, [pc, #592]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d009      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bc8:	4b91      	ldr	r3, [pc, #580]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	08db      	lsrs	r3, r3, #3
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	4a90      	ldr	r2, [pc, #576]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003bda:	e111      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bdc:	4b8d      	ldr	r3, [pc, #564]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bde:	61bb      	str	r3, [r7, #24]
    break;
 8003be0:	e10e      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003be2:	4b8d      	ldr	r3, [pc, #564]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003be4:	61bb      	str	r3, [r7, #24]
    break;
 8003be6:	e10b      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003be8:	4b8c      	ldr	r3, [pc, #560]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003bea:	61bb      	str	r3, [r7, #24]
    break;
 8003bec:	e108      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bee:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003bf8:	4b85      	ldr	r3, [pc, #532]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c04:	4b82      	ldr	r3, [pc, #520]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003c0e:	4b80      	ldr	r3, [pc, #512]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c12:	08db      	lsrs	r3, r3, #3
 8003c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	fb02 f303 	mul.w	r3, r2, r3
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80e1 	beq.w	8003df4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	f000 8083 	beq.w	8003d40 <HAL_RCC_GetSysClockFreq+0x204>
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	f200 80a1 	bhi.w	8003d84 <HAL_RCC_GetSysClockFreq+0x248>
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x114>
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d056      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c4e:	e099      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c50:	4b6f      	ldr	r3, [pc, #444]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d02d      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c5c:	4b6c      	ldr	r3, [pc, #432]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	08db      	lsrs	r3, r3, #3
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	4a6b      	ldr	r2, [pc, #428]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	ee07 3a90 	vmov	s15, r3
 8003c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c86:	4b62      	ldr	r3, [pc, #392]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003cb6:	e087      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003e24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cca:	4b51      	ldr	r3, [pc, #324]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cde:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cfa:	e065      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	ee07 3a90 	vmov	s15, r3
 8003d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003e28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d0e:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d3e:	e043      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003e2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d52:	4b2f      	ldr	r3, [pc, #188]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d82:	e021      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d96:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003daa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003e20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dc6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	0a5b      	lsrs	r3, r3, #9
 8003dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	ee07 3a90 	vmov	s15, r3
 8003ddc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003de0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dec:	ee17 3a90 	vmov	r3, s15
 8003df0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003df2:	e005      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61bb      	str	r3, [r7, #24]
    break;
 8003df8:	e002      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003dfa:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003dfc:	61bb      	str	r3, [r7, #24]
    break;
 8003dfe:	bf00      	nop
  }

  return sysclockfreq;
 8003e00:	69bb      	ldr	r3, [r7, #24]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3724      	adds	r7, #36	; 0x24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	58024400 	.word	0x58024400
 8003e14:	03d09000 	.word	0x03d09000
 8003e18:	003d0900 	.word	0x003d0900
 8003e1c:	007a1200 	.word	0x007a1200
 8003e20:	46000000 	.word	0x46000000
 8003e24:	4c742400 	.word	0x4c742400
 8003e28:	4a742400 	.word	0x4a742400
 8003e2c:	4af42400 	.word	0x4af42400

08003e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003e36:	f7ff fe81 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	0a1b      	lsrs	r3, r3, #8
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	490f      	ldr	r1, [pc, #60]	; (8003e84 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e48:	5ccb      	ldrb	r3, [r1, r3]
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e54:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e5e:	5cd3      	ldrb	r3, [r2, r3]
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6a:	4a07      	ldr	r2, [pc, #28]	; (8003e88 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e6e:	4a07      	ldr	r2, [pc, #28]	; (8003e8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e74:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e76:	681b      	ldr	r3, [r3, #0]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	58024400 	.word	0x58024400
 8003e84:	08008fbc 	.word	0x08008fbc
 8003e88:	24000004 	.word	0x24000004
 8003e8c:	24000000 	.word	0x24000000

08003e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e94:	f7ff ffcc 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4904      	ldr	r1, [pc, #16]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ea6:	5ccb      	ldrb	r3, [r1, r3]
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	58024400 	.word	0x58024400
 8003eb8:	08008fbc 	.word	0x08008fbc

08003ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ec0:	f7ff ffb6 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4904      	ldr	r1, [pc, #16]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	58024400 	.word	0x58024400
 8003ee4:	08008fbc 	.word	0x08008fbc

08003ee8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d03f      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f0c:	d02a      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f12:	d824      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f18:	d018      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f1e:	d81e      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f28:	d007      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f2a:	e018      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f2c:	4ba3      	ldr	r3, [pc, #652]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	4aa2      	ldr	r2, [pc, #648]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f38:	e015      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	2102      	movs	r1, #2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f001 f9d5 	bl	80052f0 <RCCEx_PLL2_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f4a:	e00c      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3324      	adds	r3, #36	; 0x24
 8003f50:	2102      	movs	r1, #2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f001 fa7e 	bl	8005454 <RCCEx_PLL3_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f5c:	e003      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	75fb      	strb	r3, [r7, #23]
      break;
 8003f62:	e000      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d109      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f6c:	4b93      	ldr	r3, [pc, #588]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f78:	4990      	ldr	r1, [pc, #576]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	650b      	str	r3, [r1, #80]	; 0x50
 8003f7e:	e001      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d03d      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d826      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f98:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fb5 	.word	0x08003fb5
 8003fa4:	08003fc3 	.word	0x08003fc3
 8003fa8:	08003fd5 	.word	0x08003fd5
 8003fac:	08003fed 	.word	0x08003fed
 8003fb0:	08003fed 	.word	0x08003fed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb4:	4b81      	ldr	r3, [pc, #516]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	4a80      	ldr	r2, [pc, #512]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fc0:	e015      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 f991 	bl	80052f0 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fd2:	e00c      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3324      	adds	r3, #36	; 0x24
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 fa3a 	bl	8005454 <RCCEx_PLL3_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fe4:	e003      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8003fea:	e000      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ff4:	4b71      	ldr	r3, [pc, #452]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff8:	f023 0207 	bic.w	r2, r3, #7
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	496e      	ldr	r1, [pc, #440]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004002:	4313      	orrs	r3, r2
 8004004:	650b      	str	r3, [r1, #80]	; 0x50
 8004006:	e001      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004014:	2b00      	cmp	r3, #0
 8004016:	d042      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004020:	d02b      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004026:	d825      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004028:	2bc0      	cmp	r3, #192	; 0xc0
 800402a:	d028      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800402c:	2bc0      	cmp	r3, #192	; 0xc0
 800402e:	d821      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004030:	2b80      	cmp	r3, #128	; 0x80
 8004032:	d016      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004034:	2b80      	cmp	r3, #128	; 0x80
 8004036:	d81d      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d007      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004040:	e018      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004042:	4b5e      	ldr	r3, [pc, #376]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	4a5d      	ldr	r2, [pc, #372]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800404e:	e017      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3304      	adds	r3, #4
 8004054:	2100      	movs	r1, #0
 8004056:	4618      	mov	r0, r3
 8004058:	f001 f94a 	bl	80052f0 <RCCEx_PLL2_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004060:	e00e      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3324      	adds	r3, #36	; 0x24
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f001 f9f3 	bl	8005454 <RCCEx_PLL3_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004072:	e005      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	75fb      	strb	r3, [r7, #23]
      break;
 8004078:	e002      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800407a:	bf00      	nop
 800407c:	e000      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800407e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004080:	7dfb      	ldrb	r3, [r7, #23]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004086:	4b4d      	ldr	r3, [pc, #308]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004092:	494a      	ldr	r1, [pc, #296]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004094:	4313      	orrs	r3, r2
 8004096:	650b      	str	r3, [r1, #80]	; 0x50
 8004098:	e001      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409a:	7dfb      	ldrb	r3, [r7, #23]
 800409c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d049      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040b4:	d030      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80040b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040ba:	d82a      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040c0:	d02c      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80040c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040c6:	d824      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040cc:	d018      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80040ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d2:	d81e      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80040d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040dc:	d007      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80040de:	e018      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e0:	4b36      	ldr	r3, [pc, #216]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	4a35      	ldr	r2, [pc, #212]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040ec:	e017      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3304      	adds	r3, #4
 80040f2:	2100      	movs	r1, #0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 f8fb 	bl	80052f0 <RCCEx_PLL2_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80040fe:	e00e      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3324      	adds	r3, #36	; 0x24
 8004104:	2100      	movs	r1, #0
 8004106:	4618      	mov	r0, r3
 8004108:	f001 f9a4 	bl	8005454 <RCCEx_PLL3_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004110:	e005      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]
      break;
 8004116:	e002      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004118:	bf00      	nop
 800411a:	e000      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800411c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004124:	4b25      	ldr	r3, [pc, #148]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004128:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004132:	4922      	ldr	r1, [pc, #136]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004134:	4313      	orrs	r3, r2
 8004136:	658b      	str	r3, [r1, #88]	; 0x58
 8004138:	e001      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004146:	2b00      	cmp	r3, #0
 8004148:	d04b      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004154:	d030      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004156:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800415a:	d82a      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800415c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004160:	d02e      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004162:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004166:	d824      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004168:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800416c:	d018      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800416e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004172:	d81e      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800417c:	d007      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800417e:	e018      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004180:	4b0e      	ldr	r3, [pc, #56]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	4a0d      	ldr	r2, [pc, #52]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800418a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800418c:	e019      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3304      	adds	r3, #4
 8004192:	2100      	movs	r1, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f001 f8ab 	bl	80052f0 <RCCEx_PLL2_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800419e:	e010      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3324      	adds	r3, #36	; 0x24
 80041a4:	2100      	movs	r1, #0
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 f954 	bl	8005454 <RCCEx_PLL3_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041b0:	e007      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	75fb      	strb	r3, [r7, #23]
      break;
 80041b6:	e004      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80041b8:	bf00      	nop
 80041ba:	e002      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80041bc:	58024400 	.word	0x58024400
      break;
 80041c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80041c8:	4b99      	ldr	r3, [pc, #612]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041d6:	4996      	ldr	r1, [pc, #600]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	658b      	str	r3, [r1, #88]	; 0x58
 80041dc:	e001      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	7dfb      	ldrb	r3, [r7, #23]
 80041e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d032      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f2:	2b30      	cmp	r3, #48	; 0x30
 80041f4:	d01c      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80041f6:	2b30      	cmp	r3, #48	; 0x30
 80041f8:	d817      	bhi.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d00c      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d813      	bhi.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004206:	2b10      	cmp	r3, #16
 8004208:	d10f      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800420a:	4b89      	ldr	r3, [pc, #548]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	4a88      	ldr	r2, [pc, #544]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004214:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004216:	e00e      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	2102      	movs	r1, #2
 800421e:	4618      	mov	r0, r3
 8004220:	f001 f866 	bl	80052f0 <RCCEx_PLL2_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004228:	e005      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	75fb      	strb	r3, [r7, #23]
      break;
 800422e:	e002      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004230:	bf00      	nop
 8004232:	e000      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004236:	7dfb      	ldrb	r3, [r7, #23]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800423c:	4b7c      	ldr	r3, [pc, #496]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800423e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004240:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004248:	4979      	ldr	r1, [pc, #484]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800424a:	4313      	orrs	r3, r2
 800424c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800424e:	e001      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d047      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004268:	d030      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800426a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800426e:	d82a      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004270:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004274:	d02c      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004276:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800427a:	d824      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800427c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004280:	d018      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004286:	d81e      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004290:	d007      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004292:	e018      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004294:	4b66      	ldr	r3, [pc, #408]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	4a65      	ldr	r2, [pc, #404]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800429a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042a0:	e017      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3304      	adds	r3, #4
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 f821 	bl	80052f0 <RCCEx_PLL2_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042b2:	e00e      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3324      	adds	r3, #36	; 0x24
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 f8ca 	bl	8005454 <RCCEx_PLL3_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042c4:	e005      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	75fb      	strb	r3, [r7, #23]
      break;
 80042ca:	e002      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80042cc:	bf00      	nop
 80042ce:	e000      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80042d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d109      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80042d8:	4b55      	ldr	r3, [pc, #340]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e4:	4952      	ldr	r1, [pc, #328]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	650b      	str	r3, [r1, #80]	; 0x50
 80042ea:	e001      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
 80042ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d049      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004304:	d02e      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004306:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800430a:	d828      	bhi.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800430c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004310:	d02a      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004312:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004316:	d822      	bhi.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004318:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800431c:	d026      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800431e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004322:	d81c      	bhi.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004328:	d010      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800432a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800432e:	d816      	bhi.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01d      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004338:	d111      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3304      	adds	r3, #4
 800433e:	2101      	movs	r1, #1
 8004340:	4618      	mov	r0, r3
 8004342:	f000 ffd5 	bl	80052f0 <RCCEx_PLL2_Config>
 8004346:	4603      	mov	r3, r0
 8004348:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800434a:	e012      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3324      	adds	r3, #36	; 0x24
 8004350:	2101      	movs	r1, #1
 8004352:	4618      	mov	r0, r3
 8004354:	f001 f87e 	bl	8005454 <RCCEx_PLL3_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800435c:	e009      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	75fb      	strb	r3, [r7, #23]
      break;
 8004362:	e006      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004364:	bf00      	nop
 8004366:	e004      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004368:	bf00      	nop
 800436a:	e002      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800436c:	bf00      	nop
 800436e:	e000      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004372:	7dfb      	ldrb	r3, [r7, #23]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004378:	4b2d      	ldr	r3, [pc, #180]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800437a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004384:	492a      	ldr	r1, [pc, #168]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004386:	4313      	orrs	r3, r2
 8004388:	650b      	str	r3, [r1, #80]	; 0x50
 800438a:	e001      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d04d      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043a6:	d02e      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80043a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043ac:	d828      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80043ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b2:	d02a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b8:	d822      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80043ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043be:	d026      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80043c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043c4:	d81c      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80043c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043ca:	d010      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x506>
 80043cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043d0:	d816      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d01d      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80043d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043da:	d111      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	2101      	movs	r1, #1
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 ff84 	bl	80052f0 <RCCEx_PLL2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043ec:	e012      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3324      	adds	r3, #36	; 0x24
 80043f2:	2101      	movs	r1, #1
 80043f4:	4618      	mov	r0, r3
 80043f6:	f001 f82d 	bl	8005454 <RCCEx_PLL3_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043fe:	e009      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	75fb      	strb	r3, [r7, #23]
      break;
 8004404:	e006      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004406:	bf00      	nop
 8004408:	e004      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800440a:	bf00      	nop
 800440c:	e002      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800440e:	bf00      	nop
 8004410:	e000      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10c      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004428:	4901      	ldr	r1, [pc, #4]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800442a:	4313      	orrs	r3, r2
 800442c:	658b      	str	r3, [r1, #88]	; 0x58
 800442e:	e003      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004430:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004434:	7dfb      	ldrb	r3, [r7, #23]
 8004436:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d02f      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800444c:	d00e      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800444e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004452:	d814      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004454:	2b00      	cmp	r3, #0
 8004456:	d015      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004458:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800445c:	d10f      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800445e:	4baf      	ldr	r3, [pc, #700]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	4aae      	ldr	r2, [pc, #696]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004468:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800446a:	e00c      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	2101      	movs	r1, #1
 8004472:	4618      	mov	r0, r3
 8004474:	f000 ff3c 	bl	80052f0 <RCCEx_PLL2_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800447c:	e003      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	75fb      	strb	r3, [r7, #23]
      break;
 8004482:	e000      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004486:	7dfb      	ldrb	r3, [r7, #23]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d109      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800448c:	4ba3      	ldr	r3, [pc, #652]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800448e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004490:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004498:	49a0      	ldr	r1, [pc, #640]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800449a:	4313      	orrs	r3, r2
 800449c:	650b      	str	r3, [r1, #80]	; 0x50
 800449e:	e001      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a0:	7dfb      	ldrb	r3, [r7, #23]
 80044a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d032      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d81b      	bhi.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80044b8:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044be:	bf00      	nop
 80044c0:	080044f7 	.word	0x080044f7
 80044c4:	080044d1 	.word	0x080044d1
 80044c8:	080044df 	.word	0x080044df
 80044cc:	080044f7 	.word	0x080044f7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d0:	4b92      	ldr	r3, [pc, #584]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	4a91      	ldr	r2, [pc, #580]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044dc:	e00c      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3304      	adds	r3, #4
 80044e2:	2102      	movs	r1, #2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 ff03 	bl	80052f0 <RCCEx_PLL2_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044ee:	e003      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	75fb      	strb	r3, [r7, #23]
      break;
 80044f4:	e000      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80044f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044fe:	4b87      	ldr	r3, [pc, #540]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004502:	f023 0203 	bic.w	r2, r3, #3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450a:	4984      	ldr	r1, [pc, #528]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800450c:	4313      	orrs	r3, r2
 800450e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004510:	e001      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004512:	7dfb      	ldrb	r3, [r7, #23]
 8004514:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 8086 	beq.w	8004630 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004524:	4b7e      	ldr	r3, [pc, #504]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a7d      	ldr	r2, [pc, #500]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800452a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800452e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004530:	f7fd fbd8 	bl	8001ce4 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004536:	e009      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004538:	f7fd fbd4 	bl	8001ce4 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	; 0x64
 8004544:	d902      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	75fb      	strb	r3, [r7, #23]
        break;
 800454a:	e005      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800454c:	4b74      	ldr	r3, [pc, #464]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ef      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004558:	7dfb      	ldrb	r3, [r7, #23]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d166      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800455e:	4b6f      	ldr	r3, [pc, #444]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004560:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004568:	4053      	eors	r3, r2
 800456a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456e:	2b00      	cmp	r3, #0
 8004570:	d013      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004572:	4b6a      	ldr	r3, [pc, #424]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800457c:	4b67      	ldr	r3, [pc, #412]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	4a66      	ldr	r2, [pc, #408]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004586:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004588:	4b64      	ldr	r3, [pc, #400]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	4a63      	ldr	r2, [pc, #396]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800458e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004592:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004594:	4a61      	ldr	r2, [pc, #388]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a4:	d115      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fd fb9d 	bl	8001ce4 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045ac:	e00b      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fd fb99 	bl	8001ce4 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045bc:	4293      	cmp	r3, r2
 80045be:	d902      	bls.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	75fb      	strb	r3, [r7, #23]
            break;
 80045c4:	e005      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045c6:	4b55      	ldr	r3, [pc, #340]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0ed      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d126      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e6:	d10d      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80045e8:	4b4c      	ldr	r3, [pc, #304]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045f6:	0919      	lsrs	r1, r3, #4
 80045f8:	4b4a      	ldr	r3, [pc, #296]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80045fa:	400b      	ands	r3, r1
 80045fc:	4947      	ldr	r1, [pc, #284]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	610b      	str	r3, [r1, #16]
 8004602:	e005      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004604:	4b45      	ldr	r3, [pc, #276]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	4a44      	ldr	r2, [pc, #272]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800460a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800460e:	6113      	str	r3, [r2, #16]
 8004610:	4b42      	ldr	r3, [pc, #264]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004612:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800461a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800461e:	493f      	ldr	r1, [pc, #252]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004620:	4313      	orrs	r3, r2
 8004622:	670b      	str	r3, [r1, #112]	; 0x70
 8004624:	e004      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	75bb      	strb	r3, [r7, #22]
 800462a:	e001      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462c:	7dfb      	ldrb	r3, [r7, #23]
 800462e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 8085 	beq.w	8004748 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004642:	2b28      	cmp	r3, #40	; 0x28
 8004644:	d866      	bhi.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004646:	a201      	add	r2, pc, #4	; (adr r2, 800464c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464c:	08004729 	.word	0x08004729
 8004650:	08004715 	.word	0x08004715
 8004654:	08004715 	.word	0x08004715
 8004658:	08004715 	.word	0x08004715
 800465c:	08004715 	.word	0x08004715
 8004660:	08004715 	.word	0x08004715
 8004664:	08004715 	.word	0x08004715
 8004668:	08004715 	.word	0x08004715
 800466c:	080046f1 	.word	0x080046f1
 8004670:	08004715 	.word	0x08004715
 8004674:	08004715 	.word	0x08004715
 8004678:	08004715 	.word	0x08004715
 800467c:	08004715 	.word	0x08004715
 8004680:	08004715 	.word	0x08004715
 8004684:	08004715 	.word	0x08004715
 8004688:	08004715 	.word	0x08004715
 800468c:	08004703 	.word	0x08004703
 8004690:	08004715 	.word	0x08004715
 8004694:	08004715 	.word	0x08004715
 8004698:	08004715 	.word	0x08004715
 800469c:	08004715 	.word	0x08004715
 80046a0:	08004715 	.word	0x08004715
 80046a4:	08004715 	.word	0x08004715
 80046a8:	08004715 	.word	0x08004715
 80046ac:	08004729 	.word	0x08004729
 80046b0:	08004715 	.word	0x08004715
 80046b4:	08004715 	.word	0x08004715
 80046b8:	08004715 	.word	0x08004715
 80046bc:	08004715 	.word	0x08004715
 80046c0:	08004715 	.word	0x08004715
 80046c4:	08004715 	.word	0x08004715
 80046c8:	08004715 	.word	0x08004715
 80046cc:	08004729 	.word	0x08004729
 80046d0:	08004715 	.word	0x08004715
 80046d4:	08004715 	.word	0x08004715
 80046d8:	08004715 	.word	0x08004715
 80046dc:	08004715 	.word	0x08004715
 80046e0:	08004715 	.word	0x08004715
 80046e4:	08004715 	.word	0x08004715
 80046e8:	08004715 	.word	0x08004715
 80046ec:	08004729 	.word	0x08004729
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	2101      	movs	r1, #1
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fdfa 	bl	80052f0 <RCCEx_PLL2_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004700:	e013      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3324      	adds	r3, #36	; 0x24
 8004706:	2101      	movs	r1, #1
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fea3 	bl	8005454 <RCCEx_PLL3_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004712:	e00a      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	75fb      	strb	r3, [r7, #23]
      break;
 8004718:	e007      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800471a:	bf00      	nop
 800471c:	58024400 	.word	0x58024400
 8004720:	58024800 	.word	0x58024800
 8004724:	00ffffcf 	.word	0x00ffffcf
      break;
 8004728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800472a:	7dfb      	ldrb	r3, [r7, #23]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004730:	4b96      	ldr	r3, [pc, #600]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004734:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800473c:	4993      	ldr	r1, [pc, #588]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800473e:	4313      	orrs	r3, r2
 8004740:	654b      	str	r3, [r1, #84]	; 0x54
 8004742:	e001      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004744:	7dfb      	ldrb	r3, [r7, #23]
 8004746:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d038      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004758:	2b05      	cmp	r3, #5
 800475a:	d821      	bhi.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800475c:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800475e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004762:	bf00      	nop
 8004764:	080047a7 	.word	0x080047a7
 8004768:	0800477d 	.word	0x0800477d
 800476c:	0800478f 	.word	0x0800478f
 8004770:	080047a7 	.word	0x080047a7
 8004774:	080047a7 	.word	0x080047a7
 8004778:	080047a7 	.word	0x080047a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3304      	adds	r3, #4
 8004780:	2101      	movs	r1, #1
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fdb4 	bl	80052f0 <RCCEx_PLL2_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800478c:	e00c      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3324      	adds	r3, #36	; 0x24
 8004792:	2101      	movs	r1, #1
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fe5d 	bl	8005454 <RCCEx_PLL3_Config>
 800479a:	4603      	mov	r3, r0
 800479c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800479e:	e003      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	75fb      	strb	r3, [r7, #23]
      break;
 80047a4:	e000      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80047a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80047ae:	4b77      	ldr	r3, [pc, #476]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	f023 0207 	bic.w	r2, r3, #7
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ba:	4974      	ldr	r1, [pc, #464]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	654b      	str	r3, [r1, #84]	; 0x54
 80047c0:	e001      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
 80047c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d03a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d8:	2b05      	cmp	r3, #5
 80047da:	d821      	bhi.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80047dc:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80047de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e2:	bf00      	nop
 80047e4:	08004827 	.word	0x08004827
 80047e8:	080047fd 	.word	0x080047fd
 80047ec:	0800480f 	.word	0x0800480f
 80047f0:	08004827 	.word	0x08004827
 80047f4:	08004827 	.word	0x08004827
 80047f8:	08004827 	.word	0x08004827
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3304      	adds	r3, #4
 8004800:	2101      	movs	r1, #1
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fd74 	bl	80052f0 <RCCEx_PLL2_Config>
 8004808:	4603      	mov	r3, r0
 800480a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800480c:	e00c      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3324      	adds	r3, #36	; 0x24
 8004812:	2101      	movs	r1, #1
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fe1d 	bl	8005454 <RCCEx_PLL3_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800481e:	e003      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	75fb      	strb	r3, [r7, #23]
      break;
 8004824:	e000      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004828:	7dfb      	ldrb	r3, [r7, #23]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10a      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800482e:	4b57      	ldr	r3, [pc, #348]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004832:	f023 0207 	bic.w	r2, r3, #7
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	4953      	ldr	r1, [pc, #332]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800483e:	4313      	orrs	r3, r2
 8004840:	658b      	str	r3, [r1, #88]	; 0x58
 8004842:	e001      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004844:	7dfb      	ldrb	r3, [r7, #23]
 8004846:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0320 	and.w	r3, r3, #32
 8004850:	2b00      	cmp	r3, #0
 8004852:	d04b      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800485a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800485e:	d02e      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004864:	d828      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486a:	d02a      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800486c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004870:	d822      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004872:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004876:	d026      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004878:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800487c:	d81c      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800487e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004882:	d010      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004888:	d816      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800488a:	2b00      	cmp	r3, #0
 800488c:	d01d      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800488e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004892:	d111      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3304      	adds	r3, #4
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fd28 	bl	80052f0 <RCCEx_PLL2_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80048a4:	e012      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3324      	adds	r3, #36	; 0x24
 80048aa:	2102      	movs	r1, #2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fdd1 	bl	8005454 <RCCEx_PLL3_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80048b6:	e009      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	75fb      	strb	r3, [r7, #23]
      break;
 80048bc:	e006      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048be:	bf00      	nop
 80048c0:	e004      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048c2:	bf00      	nop
 80048c4:	e002      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048c6:	bf00      	nop
 80048c8:	e000      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10a      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048d2:	4b2e      	ldr	r3, [pc, #184]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048e0:	492a      	ldr	r1, [pc, #168]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	654b      	str	r3, [r1, #84]	; 0x54
 80048e6:	e001      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d04d      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004902:	d02e      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004904:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004908:	d828      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800490a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490e:	d02a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004914:	d822      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004916:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800491a:	d026      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800491c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004920:	d81c      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004926:	d010      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492c:	d816      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01d      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004936:	d111      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fcd6 	bl	80052f0 <RCCEx_PLL2_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004948:	e012      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3324      	adds	r3, #36	; 0x24
 800494e:	2102      	movs	r1, #2
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fd7f 	bl	8005454 <RCCEx_PLL3_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800495a:	e009      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	75fb      	strb	r3, [r7, #23]
      break;
 8004960:	e006      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004962:	bf00      	nop
 8004964:	e004      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004966:	bf00      	nop
 8004968:	e002      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800496a:	bf00      	nop
 800496c:	e000      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800496e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10c      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004984:	4901      	ldr	r1, [pc, #4]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004986:	4313      	orrs	r3, r2
 8004988:	658b      	str	r3, [r1, #88]	; 0x58
 800498a:	e003      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800498c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499c:	2b00      	cmp	r3, #0
 800499e:	d04b      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80049aa:	d02e      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80049ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80049b0:	d828      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80049b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b6:	d02a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80049b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049bc:	d822      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80049be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049c2:	d026      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80049c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049c8:	d81c      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80049ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049ce:	d010      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80049d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049d4:	d816      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d01d      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80049da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049de:	d111      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fc82 	bl	80052f0 <RCCEx_PLL2_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049f0:	e012      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3324      	adds	r3, #36	; 0x24
 80049f6:	2102      	movs	r1, #2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fd2b 	bl	8005454 <RCCEx_PLL3_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004a02:	e009      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	75fb      	strb	r3, [r7, #23]
      break;
 8004a08:	e006      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a0a:	bf00      	nop
 8004a0c:	e004      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a0e:	bf00      	nop
 8004a10:	e002      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a12:	bf00      	nop
 8004a14:	e000      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a1e:	4b9d      	ldr	r3, [pc, #628]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a2c:	4999      	ldr	r1, [pc, #612]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	658b      	str	r3, [r1, #88]	; 0x58
 8004a32:	e001      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
 8004a36:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4e:	d10a      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3324      	adds	r3, #36	; 0x24
 8004a54:	2102      	movs	r1, #2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fcfc 	bl	8005454 <RCCEx_PLL3_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a66:	4b8b      	ldr	r3, [pc, #556]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a74:	4987      	ldr	r1, [pc, #540]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01a      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a90:	d10a      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3324      	adds	r3, #36	; 0x24
 8004a96:	2102      	movs	r1, #2
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fcdb 	bl	8005454 <RCCEx_PLL3_Config>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004aa8:	4b7a      	ldr	r3, [pc, #488]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ab6:	4977      	ldr	r1, [pc, #476]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d034      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ace:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ad2:	d01d      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004ad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ad8:	d817      	bhi.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae2:	d009      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004ae4:	e011      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	2100      	movs	r1, #0
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fbff 	bl	80052f0 <RCCEx_PLL2_Config>
 8004af2:	4603      	mov	r3, r0
 8004af4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004af6:	e00c      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3324      	adds	r3, #36	; 0x24
 8004afc:	2102      	movs	r1, #2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fca8 	bl	8005454 <RCCEx_PLL3_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004b08:	e003      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b0e:	e000      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b18:	4b5e      	ldr	r3, [pc, #376]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b26:	495b      	ldr	r1, [pc, #364]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	658b      	str	r3, [r1, #88]	; 0x58
 8004b2c:	e001      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2e:	7dfb      	ldrb	r3, [r7, #23]
 8004b30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d033      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b48:	d01c      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004b4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b4e:	d816      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b54:	d003      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004b56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b5a:	d007      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004b5c:	e00f      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b5e:	4b4d      	ldr	r3, [pc, #308]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	4a4c      	ldr	r2, [pc, #304]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b6a:	e00c      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3324      	adds	r3, #36	; 0x24
 8004b70:	2101      	movs	r1, #1
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fc6e 	bl	8005454 <RCCEx_PLL3_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b7c:	e003      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	75fb      	strb	r3, [r7, #23]
      break;
 8004b82:	e000      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b86:	7dfb      	ldrb	r3, [r7, #23]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b8c:	4b41      	ldr	r3, [pc, #260]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b9a:	493e      	ldr	r1, [pc, #248]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	654b      	str	r3, [r1, #84]	; 0x54
 8004ba0:	e001      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
 8004ba4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d029      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bbe:	d007      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004bc0:	e00f      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc2:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	4a33      	ldr	r2, [pc, #204]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004bce:	e00b      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	2102      	movs	r1, #2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fb8a 	bl	80052f0 <RCCEx_PLL2_Config>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004be0:	e002      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
      break;
 8004be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d109      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bee:	4b29      	ldr	r3, [pc, #164]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	4926      	ldr	r1, [pc, #152]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c00:	e001      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3324      	adds	r3, #36	; 0x24
 8004c16:	2102      	movs	r1, #2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fc1b 	bl	8005454 <RCCEx_PLL3_Config>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d033      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c3c:	d017      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c42:	d811      	bhi.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c48:	d013      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c4e:	d80b      	bhi.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d010      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c58:	d106      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c5a:	4b0e      	ldr	r3, [pc, #56]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	4a0d      	ldr	r2, [pc, #52]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004c66:	e007      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c6c:	e004      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004c6e:	bf00      	nop
 8004c70:	e002      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004c72:	bf00      	nop
 8004c74:	e000      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8a:	4902      	ldr	r1, [pc, #8]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	654b      	str	r3, [r1, #84]	; 0x54
 8004c90:	e004      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004c92:	bf00      	nop
 8004c94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
 8004c9a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ca8:	4b31      	ldr	r3, [pc, #196]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb4:	492e      	ldr	r1, [pc, #184]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004cc6:	4b2a      	ldr	r3, [pc, #168]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cd4:	4926      	ldr	r1, [pc, #152]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d008      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ce6:	4b22      	ldr	r3, [pc, #136]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cf2:	491f      	ldr	r1, [pc, #124]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00d      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d04:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	4a19      	ldr	r2, [pc, #100]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d0e:	6113      	str	r3, [r2, #16]
 8004d10:	4b17      	ldr	r3, [pc, #92]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004d1a:	4915      	ldr	r1, [pc, #84]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	da08      	bge.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d28:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	490e      	ldr	r1, [pc, #56]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d009      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d54:	4906      	ldr	r1, [pc, #24]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004d5a:	7dbb      	ldrb	r3, [r7, #22]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	e000      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	58024400 	.word	0x58024400

08004d74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d78:	f7ff f85a 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	091b      	lsrs	r3, r3, #4
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	4904      	ldr	r1, [pc, #16]	; (8004d9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d8a:	5ccb      	ldrb	r3, [r1, r3]
 8004d8c:	f003 031f 	and.w	r3, r3, #31
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	58024400 	.word	0x58024400
 8004d9c:	08008fbc 	.word	0x08008fbc

08004da0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b089      	sub	sp, #36	; 0x24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004da8:	4ba1      	ldr	r3, [pc, #644]	; (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004db2:	4b9f      	ldr	r3, [pc, #636]	; (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	0b1b      	lsrs	r3, r3, #12
 8004db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004dbe:	4b9c      	ldr	r3, [pc, #624]	; (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	091b      	lsrs	r3, r3, #4
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004dca:	4b99      	ldr	r3, [pc, #612]	; (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	08db      	lsrs	r3, r3, #3
 8004dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8111 	beq.w	8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	f000 8083 	beq.w	8004efc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	f200 80a1 	bhi.w	8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d056      	beq.n	8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e0a:	e099      	b.n	8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e0c:	4b88      	ldr	r3, [pc, #544]	; (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d02d      	beq.n	8004e74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e18:	4b85      	ldr	r3, [pc, #532]	; (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	08db      	lsrs	r3, r3, #3
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	4a84      	ldr	r2, [pc, #528]	; (8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
 8004e28:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e42:	4b7b      	ldr	r3, [pc, #492]	; (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e72:	e087      	b.n	8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800503c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e86:	4b6a      	ldr	r3, [pc, #424]	; (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004eb6:	e065      	b.n	8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eca:	4b59      	ldr	r3, [pc, #356]	; (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ede:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004efa:	e043      	b.n	8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005044 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0e:	4b48      	ldr	r3, [pc, #288]	; (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f3e:	e021      	b.n	8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f52:	4b37      	ldr	r3, [pc, #220]	; (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004f84:	4b2a      	ldr	r3, [pc, #168]	; (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	0a5b      	lsrs	r3, r3, #9
 8004f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004faa:	ee17 2a90 	vmov	r2, s15
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004fb2:	4b1f      	ldr	r3, [pc, #124]	; (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	0c1b      	lsrs	r3, r3, #16
 8004fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fbc:	ee07 3a90 	vmov	s15, r3
 8004fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fd8:	ee17 2a90 	vmov	r2, s15
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004fe0:	4b13      	ldr	r3, [pc, #76]	; (8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	0e1b      	lsrs	r3, r3, #24
 8004fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005006:	ee17 2a90 	vmov	r2, s15
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800500e:	e008      	b.n	8005022 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	609a      	str	r2, [r3, #8]
}
 8005022:	bf00      	nop
 8005024:	3724      	adds	r7, #36	; 0x24
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	58024400 	.word	0x58024400
 8005034:	03d09000 	.word	0x03d09000
 8005038:	46000000 	.word	0x46000000
 800503c:	4c742400 	.word	0x4c742400
 8005040:	4a742400 	.word	0x4a742400
 8005044:	4af42400 	.word	0x4af42400

08005048 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005048:	b480      	push	{r7}
 800504a:	b089      	sub	sp, #36	; 0x24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005050:	4ba1      	ldr	r3, [pc, #644]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800505a:	4b9f      	ldr	r3, [pc, #636]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	0d1b      	lsrs	r3, r3, #20
 8005060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005064:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005066:	4b9c      	ldr	r3, [pc, #624]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005072:	4b99      	ldr	r3, [pc, #612]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005076:	08db      	lsrs	r3, r3, #3
 8005078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	fb02 f303 	mul.w	r3, r2, r3
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8111 	beq.w	80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b02      	cmp	r3, #2
 800509a:	f000 8083 	beq.w	80051a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	f200 80a1 	bhi.w	80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d056      	beq.n	8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80050b2:	e099      	b.n	80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050b4:	4b88      	ldr	r3, [pc, #544]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d02d      	beq.n	800511c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050c0:	4b85      	ldr	r3, [pc, #532]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	08db      	lsrs	r3, r3, #3
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	4a84      	ldr	r2, [pc, #528]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
 80050d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	ee07 3a90 	vmov	s15, r3
 80050d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ea:	4b7b      	ldr	r3, [pc, #492]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80050fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800510e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005116:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800511a:	e087      	b.n	800522c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800512a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512e:	4b6a      	ldr	r3, [pc, #424]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005142:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800515e:	e065      	b.n	800522c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800516e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005172:	4b59      	ldr	r3, [pc, #356]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005182:	ed97 6a03 	vldr	s12, [r7, #12]
 8005186:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800518a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051a2:	e043      	b.n	800522c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80051b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051b6:	4b48      	ldr	r3, [pc, #288]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051e6:	e021      	b.n	800522c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051fa:	4b37      	ldr	r3, [pc, #220]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800520a:	ed97 6a03 	vldr	s12, [r7, #12]
 800520e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800521a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800521e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005226:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800522a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800522c:	4b2a      	ldr	r3, [pc, #168]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	0a5b      	lsrs	r3, r3, #9
 8005232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005246:	edd7 6a07 	vldr	s13, [r7, #28]
 800524a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800524e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005252:	ee17 2a90 	vmov	r2, s15
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800525a:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	0c1b      	lsrs	r3, r3, #16
 8005260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005264:	ee07 3a90 	vmov	s15, r3
 8005268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005270:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005274:	edd7 6a07 	vldr	s13, [r7, #28]
 8005278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800527c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005280:	ee17 2a90 	vmov	r2, s15
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005288:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	0e1b      	lsrs	r3, r3, #24
 800528e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800529e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80052a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ae:	ee17 2a90 	vmov	r2, s15
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80052b6:	e008      	b.n	80052ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	609a      	str	r2, [r3, #8]
}
 80052ca:	bf00      	nop
 80052cc:	3724      	adds	r7, #36	; 0x24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	58024400 	.word	0x58024400
 80052dc:	03d09000 	.word	0x03d09000
 80052e0:	46000000 	.word	0x46000000
 80052e4:	4c742400 	.word	0x4c742400
 80052e8:	4a742400 	.word	0x4a742400
 80052ec:	4af42400 	.word	0x4af42400

080052f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052fe:	4b53      	ldr	r3, [pc, #332]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b03      	cmp	r3, #3
 8005308:	d101      	bne.n	800530e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e099      	b.n	8005442 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800530e:	4b4f      	ldr	r3, [pc, #316]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a4e      	ldr	r2, [pc, #312]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 8005314:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800531a:	f7fc fce3 	bl	8001ce4 <HAL_GetTick>
 800531e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005320:	e008      	b.n	8005334 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005322:	f7fc fcdf 	bl	8001ce4 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e086      	b.n	8005442 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005334:	4b45      	ldr	r3, [pc, #276]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1f0      	bne.n	8005322 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005340:	4b42      	ldr	r3, [pc, #264]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	031b      	lsls	r3, r3, #12
 800534e:	493f      	ldr	r1, [pc, #252]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 8005350:	4313      	orrs	r3, r2
 8005352:	628b      	str	r3, [r1, #40]	; 0x28
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	3b01      	subs	r3, #1
 800535a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	3b01      	subs	r3, #1
 8005364:	025b      	lsls	r3, r3, #9
 8005366:	b29b      	uxth	r3, r3
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	3b01      	subs	r3, #1
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	3b01      	subs	r3, #1
 800537e:	061b      	lsls	r3, r3, #24
 8005380:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005384:	4931      	ldr	r1, [pc, #196]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 8005386:	4313      	orrs	r3, r2
 8005388:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800538a:	4b30      	ldr	r3, [pc, #192]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 800538c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	492d      	ldr	r1, [pc, #180]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 8005398:	4313      	orrs	r3, r2
 800539a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800539c:	4b2b      	ldr	r3, [pc, #172]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	f023 0220 	bic.w	r2, r3, #32
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	4928      	ldr	r1, [pc, #160]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80053ae:	4b27      	ldr	r3, [pc, #156]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	4a26      	ldr	r2, [pc, #152]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 80053b4:	f023 0310 	bic.w	r3, r3, #16
 80053b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053ba:	4b24      	ldr	r3, [pc, #144]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 80053bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053be:	4b24      	ldr	r3, [pc, #144]	; (8005450 <RCCEx_PLL2_Config+0x160>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	69d2      	ldr	r2, [r2, #28]
 80053c6:	00d2      	lsls	r2, r2, #3
 80053c8:	4920      	ldr	r1, [pc, #128]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053ce:	4b1f      	ldr	r3, [pc, #124]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	4a1e      	ldr	r2, [pc, #120]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 80053d4:	f043 0310 	orr.w	r3, r3, #16
 80053d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053e0:	4b1a      	ldr	r3, [pc, #104]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	4a19      	ldr	r2, [pc, #100]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 80053e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053ec:	e00f      	b.n	800540e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d106      	bne.n	8005402 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80053f4:	4b15      	ldr	r3, [pc, #84]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	4a14      	ldr	r2, [pc, #80]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 80053fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005400:	e005      	b.n	800540e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005402:	4b12      	ldr	r3, [pc, #72]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	4a11      	ldr	r2, [pc, #68]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 8005408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800540c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800540e:	4b0f      	ldr	r3, [pc, #60]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a0e      	ldr	r2, [pc, #56]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 8005414:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800541a:	f7fc fc63 	bl	8001ce4 <HAL_GetTick>
 800541e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005420:	e008      	b.n	8005434 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005422:	f7fc fc5f 	bl	8001ce4 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e006      	b.n	8005442 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <RCCEx_PLL2_Config+0x15c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	58024400 	.word	0x58024400
 8005450:	ffff0007 	.word	0xffff0007

08005454 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005462:	4b53      	ldr	r3, [pc, #332]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b03      	cmp	r3, #3
 800546c:	d101      	bne.n	8005472 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e099      	b.n	80055a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005472:	4b4f      	ldr	r3, [pc, #316]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a4e      	ldr	r2, [pc, #312]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800547e:	f7fc fc31 	bl	8001ce4 <HAL_GetTick>
 8005482:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005484:	e008      	b.n	8005498 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005486:	f7fc fc2d 	bl	8001ce4 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e086      	b.n	80055a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005498:	4b45      	ldr	r3, [pc, #276]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1f0      	bne.n	8005486 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80054a4:	4b42      	ldr	r3, [pc, #264]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 80054a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	051b      	lsls	r3, r3, #20
 80054b2:	493f      	ldr	r1, [pc, #252]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	628b      	str	r3, [r1, #40]	; 0x28
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	3b01      	subs	r3, #1
 80054be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	025b      	lsls	r3, r3, #9
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	041b      	lsls	r3, r3, #16
 80054d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	061b      	lsls	r3, r3, #24
 80054e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054e8:	4931      	ldr	r1, [pc, #196]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054ee:	4b30      	ldr	r3, [pc, #192]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 80054f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	492d      	ldr	r1, [pc, #180]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005500:	4b2b      	ldr	r3, [pc, #172]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	4928      	ldr	r1, [pc, #160]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005512:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	4a26      	ldr	r2, [pc, #152]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800551c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800551e:	4b24      	ldr	r3, [pc, #144]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005522:	4b24      	ldr	r3, [pc, #144]	; (80055b4 <RCCEx_PLL3_Config+0x160>)
 8005524:	4013      	ands	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	69d2      	ldr	r2, [r2, #28]
 800552a:	00d2      	lsls	r2, r2, #3
 800552c:	4920      	ldr	r1, [pc, #128]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800552e:	4313      	orrs	r3, r2
 8005530:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005532:	4b1f      	ldr	r3, [pc, #124]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	4a1e      	ldr	r2, [pc, #120]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d106      	bne.n	8005552 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005544:	4b1a      	ldr	r3, [pc, #104]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	4a19      	ldr	r2, [pc, #100]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800554a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800554e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005550:	e00f      	b.n	8005572 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d106      	bne.n	8005566 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005558:	4b15      	ldr	r3, [pc, #84]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	4a14      	ldr	r2, [pc, #80]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800555e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005562:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005564:	e005      	b.n	8005572 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005566:	4b12      	ldr	r3, [pc, #72]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	4a11      	ldr	r2, [pc, #68]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800556c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005570:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005572:	4b0f      	ldr	r3, [pc, #60]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a0e      	ldr	r2, [pc, #56]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 8005578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800557e:	f7fc fbb1 	bl	8001ce4 <HAL_GetTick>
 8005582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005584:	e008      	b.n	8005598 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005586:	f7fc fbad 	bl	8001ce4 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e006      	b.n	80055a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <RCCEx_PLL3_Config+0x15c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	58024400 	.word	0x58024400
 80055b4:	ffff0007 	.word	0xffff0007

080055b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e049      	b.n	800565e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fc f866 	bl	80016b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3304      	adds	r3, #4
 80055f4:	4619      	mov	r1, r3
 80055f6:	4610      	mov	r0, r2
 80055f8:	f000 fd46 	bl	8006088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	d001      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e054      	b.n	800572a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a26      	ldr	r2, [pc, #152]	; (8005738 <HAL_TIM_Base_Start_IT+0xd0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d022      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x80>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056aa:	d01d      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x80>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a22      	ldr	r2, [pc, #136]	; (800573c <HAL_TIM_Base_Start_IT+0xd4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d018      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x80>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a21      	ldr	r2, [pc, #132]	; (8005740 <HAL_TIM_Base_Start_IT+0xd8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d013      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x80>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1f      	ldr	r2, [pc, #124]	; (8005744 <HAL_TIM_Base_Start_IT+0xdc>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00e      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x80>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1e      	ldr	r2, [pc, #120]	; (8005748 <HAL_TIM_Base_Start_IT+0xe0>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d009      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x80>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1c      	ldr	r2, [pc, #112]	; (800574c <HAL_TIM_Base_Start_IT+0xe4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d004      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x80>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a1b      	ldr	r2, [pc, #108]	; (8005750 <HAL_TIM_Base_Start_IT+0xe8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d115      	bne.n	8005714 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	4b19      	ldr	r3, [pc, #100]	; (8005754 <HAL_TIM_Base_Start_IT+0xec>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b06      	cmp	r3, #6
 80056f8:	d015      	beq.n	8005726 <HAL_TIM_Base_Start_IT+0xbe>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005700:	d011      	beq.n	8005726 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0201 	orr.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005712:	e008      	b.n	8005726 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	e000      	b.n	8005728 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005726:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40010000 	.word	0x40010000
 800573c:	40000400 	.word	0x40000400
 8005740:	40000800 	.word	0x40000800
 8005744:	40000c00 	.word	0x40000c00
 8005748:	40010400 	.word	0x40010400
 800574c:	40001800 	.word	0x40001800
 8005750:	40014000 	.word	0x40014000
 8005754:	00010007 	.word	0x00010007

08005758 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e049      	b.n	80057fe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f841 	bl	8005806 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3304      	adds	r3, #4
 8005794:	4619      	mov	r1, r3
 8005796:	4610      	mov	r0, r2
 8005798:	f000 fc76 	bl	8006088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d104      	bne.n	800583a <HAL_TIM_IC_Start_IT+0x1e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005836:	b2db      	uxtb	r3, r3
 8005838:	e023      	b.n	8005882 <HAL_TIM_IC_Start_IT+0x66>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b04      	cmp	r3, #4
 800583e:	d104      	bne.n	800584a <HAL_TIM_IC_Start_IT+0x2e>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005846:	b2db      	uxtb	r3, r3
 8005848:	e01b      	b.n	8005882 <HAL_TIM_IC_Start_IT+0x66>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d104      	bne.n	800585a <HAL_TIM_IC_Start_IT+0x3e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005856:	b2db      	uxtb	r3, r3
 8005858:	e013      	b.n	8005882 <HAL_TIM_IC_Start_IT+0x66>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b0c      	cmp	r3, #12
 800585e:	d104      	bne.n	800586a <HAL_TIM_IC_Start_IT+0x4e>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005866:	b2db      	uxtb	r3, r3
 8005868:	e00b      	b.n	8005882 <HAL_TIM_IC_Start_IT+0x66>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b10      	cmp	r3, #16
 800586e:	d104      	bne.n	800587a <HAL_TIM_IC_Start_IT+0x5e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005876:	b2db      	uxtb	r3, r3
 8005878:	e003      	b.n	8005882 <HAL_TIM_IC_Start_IT+0x66>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005880:	b2db      	uxtb	r3, r3
 8005882:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d104      	bne.n	8005894 <HAL_TIM_IC_Start_IT+0x78>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005890:	b2db      	uxtb	r3, r3
 8005892:	e013      	b.n	80058bc <HAL_TIM_IC_Start_IT+0xa0>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b04      	cmp	r3, #4
 8005898:	d104      	bne.n	80058a4 <HAL_TIM_IC_Start_IT+0x88>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	e00b      	b.n	80058bc <HAL_TIM_IC_Start_IT+0xa0>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d104      	bne.n	80058b4 <HAL_TIM_IC_Start_IT+0x98>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	e003      	b.n	80058bc <HAL_TIM_IC_Start_IT+0xa0>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80058be:	7bbb      	ldrb	r3, [r7, #14]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d102      	bne.n	80058ca <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80058c4:	7b7b      	ldrb	r3, [r7, #13]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d001      	beq.n	80058ce <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e0e2      	b.n	8005a94 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <HAL_TIM_IC_Start_IT+0xc2>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058dc:	e023      	b.n	8005926 <HAL_TIM_IC_Start_IT+0x10a>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d104      	bne.n	80058ee <HAL_TIM_IC_Start_IT+0xd2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ec:	e01b      	b.n	8005926 <HAL_TIM_IC_Start_IT+0x10a>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d104      	bne.n	80058fe <HAL_TIM_IC_Start_IT+0xe2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058fc:	e013      	b.n	8005926 <HAL_TIM_IC_Start_IT+0x10a>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b0c      	cmp	r3, #12
 8005902:	d104      	bne.n	800590e <HAL_TIM_IC_Start_IT+0xf2>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800590c:	e00b      	b.n	8005926 <HAL_TIM_IC_Start_IT+0x10a>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b10      	cmp	r3, #16
 8005912:	d104      	bne.n	800591e <HAL_TIM_IC_Start_IT+0x102>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800591c:	e003      	b.n	8005926 <HAL_TIM_IC_Start_IT+0x10a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d104      	bne.n	8005936 <HAL_TIM_IC_Start_IT+0x11a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005934:	e013      	b.n	800595e <HAL_TIM_IC_Start_IT+0x142>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b04      	cmp	r3, #4
 800593a:	d104      	bne.n	8005946 <HAL_TIM_IC_Start_IT+0x12a>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005944:	e00b      	b.n	800595e <HAL_TIM_IC_Start_IT+0x142>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d104      	bne.n	8005956 <HAL_TIM_IC_Start_IT+0x13a>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005954:	e003      	b.n	800595e <HAL_TIM_IC_Start_IT+0x142>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b0c      	cmp	r3, #12
 8005962:	d841      	bhi.n	80059e8 <HAL_TIM_IC_Start_IT+0x1cc>
 8005964:	a201      	add	r2, pc, #4	; (adr r2, 800596c <HAL_TIM_IC_Start_IT+0x150>)
 8005966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596a:	bf00      	nop
 800596c:	080059a1 	.word	0x080059a1
 8005970:	080059e9 	.word	0x080059e9
 8005974:	080059e9 	.word	0x080059e9
 8005978:	080059e9 	.word	0x080059e9
 800597c:	080059b3 	.word	0x080059b3
 8005980:	080059e9 	.word	0x080059e9
 8005984:	080059e9 	.word	0x080059e9
 8005988:	080059e9 	.word	0x080059e9
 800598c:	080059c5 	.word	0x080059c5
 8005990:	080059e9 	.word	0x080059e9
 8005994:	080059e9 	.word	0x080059e9
 8005998:	080059e9 	.word	0x080059e9
 800599c:	080059d7 	.word	0x080059d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0202 	orr.w	r2, r2, #2
 80059ae:	60da      	str	r2, [r3, #12]
      break;
 80059b0:	e01d      	b.n	80059ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0204 	orr.w	r2, r2, #4
 80059c0:	60da      	str	r2, [r3, #12]
      break;
 80059c2:	e014      	b.n	80059ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0208 	orr.w	r2, r2, #8
 80059d2:	60da      	str	r2, [r3, #12]
      break;
 80059d4:	e00b      	b.n	80059ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0210 	orr.w	r2, r2, #16
 80059e4:	60da      	str	r2, [r3, #12]
      break;
 80059e6:	e002      	b.n	80059ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	73fb      	strb	r3, [r7, #15]
      break;
 80059ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d14e      	bne.n	8005a92 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2201      	movs	r2, #1
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 fda5 	bl	800654c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a25      	ldr	r2, [pc, #148]	; (8005a9c <HAL_TIM_IC_Start_IT+0x280>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d022      	beq.n	8005a52 <HAL_TIM_IC_Start_IT+0x236>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a14:	d01d      	beq.n	8005a52 <HAL_TIM_IC_Start_IT+0x236>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a21      	ldr	r2, [pc, #132]	; (8005aa0 <HAL_TIM_IC_Start_IT+0x284>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d018      	beq.n	8005a52 <HAL_TIM_IC_Start_IT+0x236>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1f      	ldr	r2, [pc, #124]	; (8005aa4 <HAL_TIM_IC_Start_IT+0x288>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <HAL_TIM_IC_Start_IT+0x236>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1e      	ldr	r2, [pc, #120]	; (8005aa8 <HAL_TIM_IC_Start_IT+0x28c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00e      	beq.n	8005a52 <HAL_TIM_IC_Start_IT+0x236>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1c      	ldr	r2, [pc, #112]	; (8005aac <HAL_TIM_IC_Start_IT+0x290>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <HAL_TIM_IC_Start_IT+0x236>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1b      	ldr	r2, [pc, #108]	; (8005ab0 <HAL_TIM_IC_Start_IT+0x294>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <HAL_TIM_IC_Start_IT+0x236>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a19      	ldr	r2, [pc, #100]	; (8005ab4 <HAL_TIM_IC_Start_IT+0x298>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d115      	bne.n	8005a7e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <HAL_TIM_IC_Start_IT+0x29c>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b06      	cmp	r3, #6
 8005a62:	d015      	beq.n	8005a90 <HAL_TIM_IC_Start_IT+0x274>
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6a:	d011      	beq.n	8005a90 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7c:	e008      	b.n	8005a90 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0201 	orr.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e000      	b.n	8005a92 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a90:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40000400 	.word	0x40000400
 8005aa4:	40000800 	.word	0x40000800
 8005aa8:	40000c00 	.word	0x40000c00
 8005aac:	40010400 	.word	0x40010400
 8005ab0:	40001800 	.word	0x40001800
 8005ab4:	40014000 	.word	0x40014000
 8005ab8:	00010007 	.word	0x00010007

08005abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d122      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d11b      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0202 	mvn.w	r2, #2
 8005ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 faa4 	bl	800604c <HAL_TIM_IC_CaptureCallback>
 8005b04:	e005      	b.n	8005b12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fa96 	bl	8006038 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 faa7 	bl	8006060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0304 	and.w	r3, r3, #4
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d122      	bne.n	8005b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d11b      	bne.n	8005b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0204 	mvn.w	r2, #4
 8005b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2202      	movs	r2, #2
 8005b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fa7a 	bl	800604c <HAL_TIM_IC_CaptureCallback>
 8005b58:	e005      	b.n	8005b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fa6c 	bl	8006038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fa7d 	bl	8006060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b08      	cmp	r3, #8
 8005b78:	d122      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d11b      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f06f 0208 	mvn.w	r2, #8
 8005b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2204      	movs	r2, #4
 8005b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fa50 	bl	800604c <HAL_TIM_IC_CaptureCallback>
 8005bac:	e005      	b.n	8005bba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fa42 	bl	8006038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fa53 	bl	8006060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0310 	and.w	r3, r3, #16
 8005bca:	2b10      	cmp	r3, #16
 8005bcc:	d122      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	2b10      	cmp	r3, #16
 8005bda:	d11b      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0210 	mvn.w	r2, #16
 8005be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2208      	movs	r2, #8
 8005bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fa26 	bl	800604c <HAL_TIM_IC_CaptureCallback>
 8005c00:	e005      	b.n	8005c0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fa18 	bl	8006038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fa29 	bl	8006060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d10e      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d107      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0201 	mvn.w	r2, #1
 8005c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f9f2 	bl	8006024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4a:	2b80      	cmp	r3, #128	; 0x80
 8005c4c:	d10e      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c58:	2b80      	cmp	r3, #128	; 0x80
 8005c5a:	d107      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fd2e 	bl	80066c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c7a:	d10e      	bne.n	8005c9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c86:	2b80      	cmp	r3, #128	; 0x80
 8005c88:	d107      	bne.n	8005c9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fd21 	bl	80066dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca4:	2b40      	cmp	r3, #64	; 0x40
 8005ca6:	d10e      	bne.n	8005cc6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb2:	2b40      	cmp	r3, #64	; 0x40
 8005cb4:	d107      	bne.n	8005cc6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f9d7 	bl	8006074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d10e      	bne.n	8005cf2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	2b20      	cmp	r3, #32
 8005ce0:	d107      	bne.n	8005cf2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f06f 0220 	mvn.w	r2, #32
 8005cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fce1 	bl	80066b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b086      	sub	sp, #24
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e088      	b.n	8005e2a <HAL_TIM_IC_ConfigChannel+0x130>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d11b      	bne.n	8005d5e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6819      	ldr	r1, [r3, #0]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f000 fa41 	bl	80061bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699a      	ldr	r2, [r3, #24]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 020c 	bic.w	r2, r2, #12
 8005d48:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6999      	ldr	r1, [r3, #24]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	619a      	str	r2, [r3, #24]
 8005d5c:	e060      	b.n	8005e20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d11c      	bne.n	8005d9e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	6819      	ldr	r1, [r3, #0]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f000 fac5 	bl	8006302 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d86:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6999      	ldr	r1, [r3, #24]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	021a      	lsls	r2, r3, #8
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	619a      	str	r2, [r3, #24]
 8005d9c:	e040      	b.n	8005e20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d11b      	bne.n	8005ddc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6818      	ldr	r0, [r3, #0]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	6819      	ldr	r1, [r3, #0]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f000 fb12 	bl	80063dc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69da      	ldr	r2, [r3, #28]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 020c 	bic.w	r2, r2, #12
 8005dc6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	69d9      	ldr	r1, [r3, #28]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	61da      	str	r2, [r3, #28]
 8005dda:	e021      	b.n	8005e20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b0c      	cmp	r3, #12
 8005de0:	d11c      	bne.n	8005e1c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	6819      	ldr	r1, [r3, #0]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f000 fb2f 	bl	8006454 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69da      	ldr	r2, [r3, #28]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e04:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69d9      	ldr	r1, [r3, #28]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	021a      	lsls	r2, r3, #8
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	61da      	str	r2, [r3, #28]
 8005e1a:	e001      	b.n	8005e20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_TIM_ConfigClockSource+0x1c>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e0dc      	b.n	800600a <HAL_TIM_ConfigClockSource+0x1d6>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	4b6a      	ldr	r3, [pc, #424]	; (8006014 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a64      	ldr	r2, [pc, #400]	; (8006018 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	f000 80a9 	beq.w	8005fde <HAL_TIM_ConfigClockSource+0x1aa>
 8005e8c:	4a62      	ldr	r2, [pc, #392]	; (8006018 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	f200 80ae 	bhi.w	8005ff0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e94:	4a61      	ldr	r2, [pc, #388]	; (800601c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	f000 80a1 	beq.w	8005fde <HAL_TIM_ConfigClockSource+0x1aa>
 8005e9c:	4a5f      	ldr	r2, [pc, #380]	; (800601c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	f200 80a6 	bhi.w	8005ff0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ea4:	4a5e      	ldr	r2, [pc, #376]	; (8006020 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	f000 8099 	beq.w	8005fde <HAL_TIM_ConfigClockSource+0x1aa>
 8005eac:	4a5c      	ldr	r2, [pc, #368]	; (8006020 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	f200 809e 	bhi.w	8005ff0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005eb4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005eb8:	f000 8091 	beq.w	8005fde <HAL_TIM_ConfigClockSource+0x1aa>
 8005ebc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005ec0:	f200 8096 	bhi.w	8005ff0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec8:	f000 8089 	beq.w	8005fde <HAL_TIM_ConfigClockSource+0x1aa>
 8005ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ed0:	f200 808e 	bhi.w	8005ff0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed8:	d03e      	beq.n	8005f58 <HAL_TIM_ConfigClockSource+0x124>
 8005eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ede:	f200 8087 	bhi.w	8005ff0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee6:	f000 8086 	beq.w	8005ff6 <HAL_TIM_ConfigClockSource+0x1c2>
 8005eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eee:	d87f      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ef0:	2b70      	cmp	r3, #112	; 0x70
 8005ef2:	d01a      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0xf6>
 8005ef4:	2b70      	cmp	r3, #112	; 0x70
 8005ef6:	d87b      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ef8:	2b60      	cmp	r3, #96	; 0x60
 8005efa:	d050      	beq.n	8005f9e <HAL_TIM_ConfigClockSource+0x16a>
 8005efc:	2b60      	cmp	r3, #96	; 0x60
 8005efe:	d877      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f00:	2b50      	cmp	r3, #80	; 0x50
 8005f02:	d03c      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x14a>
 8005f04:	2b50      	cmp	r3, #80	; 0x50
 8005f06:	d873      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f08:	2b40      	cmp	r3, #64	; 0x40
 8005f0a:	d058      	beq.n	8005fbe <HAL_TIM_ConfigClockSource+0x18a>
 8005f0c:	2b40      	cmp	r3, #64	; 0x40
 8005f0e:	d86f      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f10:	2b30      	cmp	r3, #48	; 0x30
 8005f12:	d064      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x1aa>
 8005f14:	2b30      	cmp	r3, #48	; 0x30
 8005f16:	d86b      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d060      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x1aa>
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d867      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d05c      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x1aa>
 8005f24:	2b10      	cmp	r3, #16
 8005f26:	d05a      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x1aa>
 8005f28:	e062      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6899      	ldr	r1, [r3, #8]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f000 fae7 	bl	800650c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	609a      	str	r2, [r3, #8]
      break;
 8005f56:	e04f      	b.n	8005ff8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6818      	ldr	r0, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	6899      	ldr	r1, [r3, #8]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f000 fad0 	bl	800650c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f7a:	609a      	str	r2, [r3, #8]
      break;
 8005f7c:	e03c      	b.n	8005ff8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6859      	ldr	r1, [r3, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f000 f98a 	bl	80062a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2150      	movs	r1, #80	; 0x50
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fa9a 	bl	80064d0 <TIM_ITRx_SetConfig>
      break;
 8005f9c:	e02c      	b.n	8005ff8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6818      	ldr	r0, [r3, #0]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	6859      	ldr	r1, [r3, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	461a      	mov	r2, r3
 8005fac:	f000 f9e6 	bl	800637c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2160      	movs	r1, #96	; 0x60
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fa8a 	bl	80064d0 <TIM_ITRx_SetConfig>
      break;
 8005fbc:	e01c      	b.n	8005ff8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6818      	ldr	r0, [r3, #0]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6859      	ldr	r1, [r3, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f000 f96a 	bl	80062a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2140      	movs	r1, #64	; 0x40
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fa7a 	bl	80064d0 <TIM_ITRx_SetConfig>
      break;
 8005fdc:	e00c      	b.n	8005ff8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4610      	mov	r0, r2
 8005fea:	f000 fa71 	bl	80064d0 <TIM_ITRx_SetConfig>
      break;
 8005fee:	e003      	b.n	8005ff8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff4:	e000      	b.n	8005ff8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006008:	7bfb      	ldrb	r3, [r7, #15]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	ffceff88 	.word	0xffceff88
 8006018:	00100040 	.word	0x00100040
 800601c:	00100030 	.word	0x00100030
 8006020:	00100020 	.word	0x00100020

08006024 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a40      	ldr	r2, [pc, #256]	; (800619c <TIM_Base_SetConfig+0x114>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d013      	beq.n	80060c8 <TIM_Base_SetConfig+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a6:	d00f      	beq.n	80060c8 <TIM_Base_SetConfig+0x40>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a3d      	ldr	r2, [pc, #244]	; (80061a0 <TIM_Base_SetConfig+0x118>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00b      	beq.n	80060c8 <TIM_Base_SetConfig+0x40>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a3c      	ldr	r2, [pc, #240]	; (80061a4 <TIM_Base_SetConfig+0x11c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d007      	beq.n	80060c8 <TIM_Base_SetConfig+0x40>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a3b      	ldr	r2, [pc, #236]	; (80061a8 <TIM_Base_SetConfig+0x120>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_Base_SetConfig+0x40>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a3a      	ldr	r2, [pc, #232]	; (80061ac <TIM_Base_SetConfig+0x124>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d108      	bne.n	80060da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2f      	ldr	r2, [pc, #188]	; (800619c <TIM_Base_SetConfig+0x114>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d01f      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e8:	d01b      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a2c      	ldr	r2, [pc, #176]	; (80061a0 <TIM_Base_SetConfig+0x118>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d017      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a2b      	ldr	r2, [pc, #172]	; (80061a4 <TIM_Base_SetConfig+0x11c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a2a      	ldr	r2, [pc, #168]	; (80061a8 <TIM_Base_SetConfig+0x120>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00f      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a29      	ldr	r2, [pc, #164]	; (80061ac <TIM_Base_SetConfig+0x124>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00b      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a28      	ldr	r2, [pc, #160]	; (80061b0 <TIM_Base_SetConfig+0x128>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d007      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a27      	ldr	r2, [pc, #156]	; (80061b4 <TIM_Base_SetConfig+0x12c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d003      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a26      	ldr	r2, [pc, #152]	; (80061b8 <TIM_Base_SetConfig+0x130>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d108      	bne.n	8006134 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a10      	ldr	r2, [pc, #64]	; (800619c <TIM_Base_SetConfig+0x114>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00f      	beq.n	8006180 <TIM_Base_SetConfig+0xf8>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a12      	ldr	r2, [pc, #72]	; (80061ac <TIM_Base_SetConfig+0x124>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00b      	beq.n	8006180 <TIM_Base_SetConfig+0xf8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a11      	ldr	r2, [pc, #68]	; (80061b0 <TIM_Base_SetConfig+0x128>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d007      	beq.n	8006180 <TIM_Base_SetConfig+0xf8>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a10      	ldr	r2, [pc, #64]	; (80061b4 <TIM_Base_SetConfig+0x12c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_Base_SetConfig+0xf8>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a0f      	ldr	r2, [pc, #60]	; (80061b8 <TIM_Base_SetConfig+0x130>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d103      	bne.n	8006188 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	615a      	str	r2, [r3, #20]
}
 800618e:	bf00      	nop
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40010000 	.word	0x40010000
 80061a0:	40000400 	.word	0x40000400
 80061a4:	40000800 	.word	0x40000800
 80061a8:	40000c00 	.word	0x40000c00
 80061ac:	40010400 	.word	0x40010400
 80061b0:	40014000 	.word	0x40014000
 80061b4:	40014400 	.word	0x40014400
 80061b8:	40014800 	.word	0x40014800

080061bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f023 0201 	bic.w	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4a28      	ldr	r2, [pc, #160]	; (8006288 <TIM_TI1_SetConfig+0xcc>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01b      	beq.n	8006222 <TIM_TI1_SetConfig+0x66>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f0:	d017      	beq.n	8006222 <TIM_TI1_SetConfig+0x66>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4a25      	ldr	r2, [pc, #148]	; (800628c <TIM_TI1_SetConfig+0xd0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <TIM_TI1_SetConfig+0x66>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4a24      	ldr	r2, [pc, #144]	; (8006290 <TIM_TI1_SetConfig+0xd4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00f      	beq.n	8006222 <TIM_TI1_SetConfig+0x66>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4a23      	ldr	r2, [pc, #140]	; (8006294 <TIM_TI1_SetConfig+0xd8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00b      	beq.n	8006222 <TIM_TI1_SetConfig+0x66>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4a22      	ldr	r2, [pc, #136]	; (8006298 <TIM_TI1_SetConfig+0xdc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d007      	beq.n	8006222 <TIM_TI1_SetConfig+0x66>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4a21      	ldr	r2, [pc, #132]	; (800629c <TIM_TI1_SetConfig+0xe0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d003      	beq.n	8006222 <TIM_TI1_SetConfig+0x66>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4a20      	ldr	r2, [pc, #128]	; (80062a0 <TIM_TI1_SetConfig+0xe4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d101      	bne.n	8006226 <TIM_TI1_SetConfig+0x6a>
 8006222:	2301      	movs	r3, #1
 8006224:	e000      	b.n	8006228 <TIM_TI1_SetConfig+0x6c>
 8006226:	2300      	movs	r3, #0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f023 0303 	bic.w	r3, r3, #3
 8006232:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	e003      	b.n	8006246 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f043 0301 	orr.w	r3, r3, #1
 8006244:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800624c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	b2db      	uxtb	r3, r3
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f023 030a 	bic.w	r3, r3, #10
 8006260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f003 030a 	and.w	r3, r3, #10
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	621a      	str	r2, [r3, #32]
}
 800627a:	bf00      	nop
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	40010000 	.word	0x40010000
 800628c:	40000400 	.word	0x40000400
 8006290:	40000800 	.word	0x40000800
 8006294:	40000c00 	.word	0x40000c00
 8006298:	40010400 	.word	0x40010400
 800629c:	40001800 	.word	0x40001800
 80062a0:	40014000 	.word	0x40014000

080062a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f023 0201 	bic.w	r2, r3, #1
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f023 030a 	bic.w	r3, r3, #10
 80062e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	621a      	str	r2, [r3, #32]
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006302:	b480      	push	{r7}
 8006304:	b087      	sub	sp, #28
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	607a      	str	r2, [r7, #4]
 800630e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f023 0210 	bic.w	r2, r3, #16
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800632e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	031b      	lsls	r3, r3, #12
 8006346:	b29b      	uxth	r3, r3
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006354:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	621a      	str	r2, [r3, #32]
}
 8006370:	bf00      	nop
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	f023 0210 	bic.w	r2, r3, #16
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	031b      	lsls	r3, r3, #12
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	011b      	lsls	r3, r3, #4
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	621a      	str	r2, [r3, #32]
}
 80063d0:	bf00      	nop
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f023 0303 	bic.w	r3, r3, #3
 8006408:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006418:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	b2db      	uxtb	r3, r3
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800642c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	021b      	lsls	r3, r3, #8
 8006432:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	621a      	str	r2, [r3, #32]
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006480:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	021b      	lsls	r3, r3, #8
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006492:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	031b      	lsls	r3, r3, #12
 8006498:	b29b      	uxth	r3, r3
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80064a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	031b      	lsls	r3, r3, #12
 80064ac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
	...

080064d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4b09      	ldr	r3, [pc, #36]	; (8006508 <TIM_ITRx_SetConfig+0x38>)
 80064e4:	4013      	ands	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f043 0307 	orr.w	r3, r3, #7
 80064f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	609a      	str	r2, [r3, #8]
}
 80064fa:	bf00      	nop
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	ffcfff8f 	.word	0xffcfff8f

0800650c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
 8006518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	021a      	lsls	r2, r3, #8
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	431a      	orrs	r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4313      	orrs	r3, r2
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	4313      	orrs	r3, r2
 8006538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	609a      	str	r2, [r3, #8]
}
 8006540:	bf00      	nop
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f003 031f 	and.w	r3, r3, #31
 800655e:	2201      	movs	r2, #1
 8006560:	fa02 f303 	lsl.w	r3, r2, r3
 8006564:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a1a      	ldr	r2, [r3, #32]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	43db      	mvns	r3, r3
 800656e:	401a      	ands	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a1a      	ldr	r2, [r3, #32]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 031f 	and.w	r3, r3, #31
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	fa01 f303 	lsl.w	r3, r1, r3
 8006584:	431a      	orrs	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	621a      	str	r2, [r3, #32]
}
 800658a:	bf00      	nop
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
	...

08006598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d101      	bne.n	80065b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065ac:	2302      	movs	r3, #2
 80065ae:	e06d      	b.n	800668c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a30      	ldr	r2, [pc, #192]	; (8006698 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d004      	beq.n	80065e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a2f      	ldr	r2, [pc, #188]	; (800669c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d108      	bne.n	80065f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80065ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a20      	ldr	r2, [pc, #128]	; (8006698 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d022      	beq.n	8006660 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006622:	d01d      	beq.n	8006660 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a1d      	ldr	r2, [pc, #116]	; (80066a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d018      	beq.n	8006660 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a1c      	ldr	r2, [pc, #112]	; (80066a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d013      	beq.n	8006660 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a1a      	ldr	r2, [pc, #104]	; (80066a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00e      	beq.n	8006660 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a15      	ldr	r2, [pc, #84]	; (800669c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d009      	beq.n	8006660 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a16      	ldr	r2, [pc, #88]	; (80066ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d004      	beq.n	8006660 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a15      	ldr	r2, [pc, #84]	; (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d10c      	bne.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006666:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	4313      	orrs	r3, r2
 8006670:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	40010000 	.word	0x40010000
 800669c:	40010400 	.word	0x40010400
 80066a0:	40000400 	.word	0x40000400
 80066a4:	40000800 	.word	0x40000800
 80066a8:	40000c00 	.word	0x40000c00
 80066ac:	40001800 	.word	0x40001800
 80066b0:	40014000 	.word	0x40014000

080066b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e042      	b.n	8006788 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006708:	2b00      	cmp	r3, #0
 800670a:	d106      	bne.n	800671a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7fb f835 	bl	8001784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2224      	movs	r2, #36	; 0x24
 800671e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0201 	bic.w	r2, r2, #1
 8006730:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f8c2 	bl	80068bc <UART_SetConfig>
 8006738:	4603      	mov	r3, r0
 800673a:	2b01      	cmp	r3, #1
 800673c:	d101      	bne.n	8006742 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e022      	b.n	8006788 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fe1e 	bl	800738c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800675e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800676e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fea5 	bl	80074d0 <UART_CheckIdleState>
 8006786:	4603      	mov	r3, r0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	; 0x28
 8006794:	af02      	add	r7, sp, #8
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	4613      	mov	r3, r2
 800679e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	f040 8083 	bne.w	80068b2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <HAL_UART_Transmit+0x28>
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e07b      	b.n	80068b4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d101      	bne.n	80067ca <HAL_UART_Transmit+0x3a>
 80067c6:	2302      	movs	r3, #2
 80067c8:	e074      	b.n	80068b4 <HAL_UART_Transmit+0x124>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2221      	movs	r2, #33	; 0x21
 80067de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067e2:	f7fb fa7f 	bl	8001ce4 <HAL_GetTick>
 80067e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	88fa      	ldrh	r2, [r7, #6]
 80067ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	88fa      	ldrh	r2, [r7, #6]
 80067f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006800:	d108      	bne.n	8006814 <HAL_UART_Transmit+0x84>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800680a:	2300      	movs	r3, #0
 800680c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	e003      	b.n	800681c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006818:	2300      	movs	r3, #0
 800681a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006824:	e02c      	b.n	8006880 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2200      	movs	r2, #0
 800682e:	2180      	movs	r1, #128	; 0x80
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 fe98 	bl	8007566 <UART_WaitOnFlagUntilTimeout>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e039      	b.n	80068b4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10b      	bne.n	800685e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006854:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	3302      	adds	r3, #2
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	e007      	b.n	800686e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	781a      	ldrb	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	3301      	adds	r3, #1
 800686c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006874:	b29b      	uxth	r3, r3
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006886:	b29b      	uxth	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1cc      	bne.n	8006826 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2200      	movs	r2, #0
 8006894:	2140      	movs	r1, #64	; 0x40
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 fe65 	bl	8007566 <UART_WaitOnFlagUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e006      	b.n	80068b4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	e000      	b.n	80068b4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80068b2:	2302      	movs	r3, #2
  }
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3720      	adds	r7, #32
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068c0:	b092      	sub	sp, #72	; 0x48
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	431a      	orrs	r2, r3
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	431a      	orrs	r2, r3
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	4bbe      	ldr	r3, [pc, #760]	; (8006be4 <UART_SetConfig+0x328>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068f4:	430b      	orrs	r3, r1
 80068f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4ab3      	ldr	r2, [pc, #716]	; (8006be8 <UART_SetConfig+0x32c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d004      	beq.n	8006928 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006924:	4313      	orrs	r3, r2
 8006926:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	4baf      	ldr	r3, [pc, #700]	; (8006bec <UART_SetConfig+0x330>)
 8006930:	4013      	ands	r3, r2
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	6812      	ldr	r2, [r2, #0]
 8006936:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006938:	430b      	orrs	r3, r1
 800693a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	f023 010f 	bic.w	r1, r3, #15
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4aa6      	ldr	r2, [pc, #664]	; (8006bf0 <UART_SetConfig+0x334>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d177      	bne.n	8006a4c <UART_SetConfig+0x190>
 800695c:	4ba5      	ldr	r3, [pc, #660]	; (8006bf4 <UART_SetConfig+0x338>)
 800695e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006964:	2b28      	cmp	r3, #40	; 0x28
 8006966:	d86d      	bhi.n	8006a44 <UART_SetConfig+0x188>
 8006968:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <UART_SetConfig+0xb4>)
 800696a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696e:	bf00      	nop
 8006970:	08006a15 	.word	0x08006a15
 8006974:	08006a45 	.word	0x08006a45
 8006978:	08006a45 	.word	0x08006a45
 800697c:	08006a45 	.word	0x08006a45
 8006980:	08006a45 	.word	0x08006a45
 8006984:	08006a45 	.word	0x08006a45
 8006988:	08006a45 	.word	0x08006a45
 800698c:	08006a45 	.word	0x08006a45
 8006990:	08006a1d 	.word	0x08006a1d
 8006994:	08006a45 	.word	0x08006a45
 8006998:	08006a45 	.word	0x08006a45
 800699c:	08006a45 	.word	0x08006a45
 80069a0:	08006a45 	.word	0x08006a45
 80069a4:	08006a45 	.word	0x08006a45
 80069a8:	08006a45 	.word	0x08006a45
 80069ac:	08006a45 	.word	0x08006a45
 80069b0:	08006a25 	.word	0x08006a25
 80069b4:	08006a45 	.word	0x08006a45
 80069b8:	08006a45 	.word	0x08006a45
 80069bc:	08006a45 	.word	0x08006a45
 80069c0:	08006a45 	.word	0x08006a45
 80069c4:	08006a45 	.word	0x08006a45
 80069c8:	08006a45 	.word	0x08006a45
 80069cc:	08006a45 	.word	0x08006a45
 80069d0:	08006a2d 	.word	0x08006a2d
 80069d4:	08006a45 	.word	0x08006a45
 80069d8:	08006a45 	.word	0x08006a45
 80069dc:	08006a45 	.word	0x08006a45
 80069e0:	08006a45 	.word	0x08006a45
 80069e4:	08006a45 	.word	0x08006a45
 80069e8:	08006a45 	.word	0x08006a45
 80069ec:	08006a45 	.word	0x08006a45
 80069f0:	08006a35 	.word	0x08006a35
 80069f4:	08006a45 	.word	0x08006a45
 80069f8:	08006a45 	.word	0x08006a45
 80069fc:	08006a45 	.word	0x08006a45
 8006a00:	08006a45 	.word	0x08006a45
 8006a04:	08006a45 	.word	0x08006a45
 8006a08:	08006a45 	.word	0x08006a45
 8006a0c:	08006a45 	.word	0x08006a45
 8006a10:	08006a3d 	.word	0x08006a3d
 8006a14:	2301      	movs	r3, #1
 8006a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a1a:	e222      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006a1c:	2304      	movs	r3, #4
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a22:	e21e      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006a24:	2308      	movs	r3, #8
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a2a:	e21a      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006a2c:	2310      	movs	r3, #16
 8006a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a32:	e216      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006a34:	2320      	movs	r3, #32
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a3a:	e212      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006a3c:	2340      	movs	r3, #64	; 0x40
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a42:	e20e      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006a44:	2380      	movs	r3, #128	; 0x80
 8006a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a4a:	e20a      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a69      	ldr	r2, [pc, #420]	; (8006bf8 <UART_SetConfig+0x33c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d130      	bne.n	8006ab8 <UART_SetConfig+0x1fc>
 8006a56:	4b67      	ldr	r3, [pc, #412]	; (8006bf4 <UART_SetConfig+0x338>)
 8006a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	2b05      	cmp	r3, #5
 8006a60:	d826      	bhi.n	8006ab0 <UART_SetConfig+0x1f4>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <UART_SetConfig+0x1ac>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a81 	.word	0x08006a81
 8006a6c:	08006a89 	.word	0x08006a89
 8006a70:	08006a91 	.word	0x08006a91
 8006a74:	08006a99 	.word	0x08006a99
 8006a78:	08006aa1 	.word	0x08006aa1
 8006a7c:	08006aa9 	.word	0x08006aa9
 8006a80:	2300      	movs	r3, #0
 8006a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a86:	e1ec      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006a88:	2304      	movs	r3, #4
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a8e:	e1e8      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006a90:	2308      	movs	r3, #8
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a96:	e1e4      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006a98:	2310      	movs	r3, #16
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9e:	e1e0      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006aa0:	2320      	movs	r3, #32
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa6:	e1dc      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006aa8:	2340      	movs	r3, #64	; 0x40
 8006aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aae:	e1d8      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006ab0:	2380      	movs	r3, #128	; 0x80
 8006ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab6:	e1d4      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a4f      	ldr	r2, [pc, #316]	; (8006bfc <UART_SetConfig+0x340>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d130      	bne.n	8006b24 <UART_SetConfig+0x268>
 8006ac2:	4b4c      	ldr	r3, [pc, #304]	; (8006bf4 <UART_SetConfig+0x338>)
 8006ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac6:	f003 0307 	and.w	r3, r3, #7
 8006aca:	2b05      	cmp	r3, #5
 8006acc:	d826      	bhi.n	8006b1c <UART_SetConfig+0x260>
 8006ace:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <UART_SetConfig+0x218>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006aed 	.word	0x08006aed
 8006ad8:	08006af5 	.word	0x08006af5
 8006adc:	08006afd 	.word	0x08006afd
 8006ae0:	08006b05 	.word	0x08006b05
 8006ae4:	08006b0d 	.word	0x08006b0d
 8006ae8:	08006b15 	.word	0x08006b15
 8006aec:	2300      	movs	r3, #0
 8006aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af2:	e1b6      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006af4:	2304      	movs	r3, #4
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afa:	e1b2      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006afc:	2308      	movs	r3, #8
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b02:	e1ae      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006b04:	2310      	movs	r3, #16
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0a:	e1aa      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006b0c:	2320      	movs	r3, #32
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b12:	e1a6      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006b14:	2340      	movs	r3, #64	; 0x40
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1a:	e1a2      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006b1c:	2380      	movs	r3, #128	; 0x80
 8006b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b22:	e19e      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a35      	ldr	r2, [pc, #212]	; (8006c00 <UART_SetConfig+0x344>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d130      	bne.n	8006b90 <UART_SetConfig+0x2d4>
 8006b2e:	4b31      	ldr	r3, [pc, #196]	; (8006bf4 <UART_SetConfig+0x338>)
 8006b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	2b05      	cmp	r3, #5
 8006b38:	d826      	bhi.n	8006b88 <UART_SetConfig+0x2cc>
 8006b3a:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0x284>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006b59 	.word	0x08006b59
 8006b44:	08006b61 	.word	0x08006b61
 8006b48:	08006b69 	.word	0x08006b69
 8006b4c:	08006b71 	.word	0x08006b71
 8006b50:	08006b79 	.word	0x08006b79
 8006b54:	08006b81 	.word	0x08006b81
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b5e:	e180      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006b60:	2304      	movs	r3, #4
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b66:	e17c      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006b68:	2308      	movs	r3, #8
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6e:	e178      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006b70:	2310      	movs	r3, #16
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b76:	e174      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006b78:	2320      	movs	r3, #32
 8006b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7e:	e170      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006b80:	2340      	movs	r3, #64	; 0x40
 8006b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b86:	e16c      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006b88:	2380      	movs	r3, #128	; 0x80
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8e:	e168      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a1b      	ldr	r2, [pc, #108]	; (8006c04 <UART_SetConfig+0x348>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d142      	bne.n	8006c20 <UART_SetConfig+0x364>
 8006b9a:	4b16      	ldr	r3, [pc, #88]	; (8006bf4 <UART_SetConfig+0x338>)
 8006b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	2b05      	cmp	r3, #5
 8006ba4:	d838      	bhi.n	8006c18 <UART_SetConfig+0x35c>
 8006ba6:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <UART_SetConfig+0x2f0>)
 8006ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bac:	08006bc5 	.word	0x08006bc5
 8006bb0:	08006bcd 	.word	0x08006bcd
 8006bb4:	08006bd5 	.word	0x08006bd5
 8006bb8:	08006bdd 	.word	0x08006bdd
 8006bbc:	08006c09 	.word	0x08006c09
 8006bc0:	08006c11 	.word	0x08006c11
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bca:	e14a      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006bcc:	2304      	movs	r3, #4
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bd2:	e146      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006bd4:	2308      	movs	r3, #8
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bda:	e142      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006bdc:	2310      	movs	r3, #16
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be2:	e13e      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006be4:	cfff69f3 	.word	0xcfff69f3
 8006be8:	58000c00 	.word	0x58000c00
 8006bec:	11fff4ff 	.word	0x11fff4ff
 8006bf0:	40011000 	.word	0x40011000
 8006bf4:	58024400 	.word	0x58024400
 8006bf8:	40004400 	.word	0x40004400
 8006bfc:	40004800 	.word	0x40004800
 8006c00:	40004c00 	.word	0x40004c00
 8006c04:	40005000 	.word	0x40005000
 8006c08:	2320      	movs	r3, #32
 8006c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0e:	e128      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006c10:	2340      	movs	r3, #64	; 0x40
 8006c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c16:	e124      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006c18:	2380      	movs	r3, #128	; 0x80
 8006c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1e:	e120      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4acb      	ldr	r2, [pc, #812]	; (8006f54 <UART_SetConfig+0x698>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d176      	bne.n	8006d18 <UART_SetConfig+0x45c>
 8006c2a:	4bcb      	ldr	r3, [pc, #812]	; (8006f58 <UART_SetConfig+0x69c>)
 8006c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c32:	2b28      	cmp	r3, #40	; 0x28
 8006c34:	d86c      	bhi.n	8006d10 <UART_SetConfig+0x454>
 8006c36:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <UART_SetConfig+0x380>)
 8006c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3c:	08006ce1 	.word	0x08006ce1
 8006c40:	08006d11 	.word	0x08006d11
 8006c44:	08006d11 	.word	0x08006d11
 8006c48:	08006d11 	.word	0x08006d11
 8006c4c:	08006d11 	.word	0x08006d11
 8006c50:	08006d11 	.word	0x08006d11
 8006c54:	08006d11 	.word	0x08006d11
 8006c58:	08006d11 	.word	0x08006d11
 8006c5c:	08006ce9 	.word	0x08006ce9
 8006c60:	08006d11 	.word	0x08006d11
 8006c64:	08006d11 	.word	0x08006d11
 8006c68:	08006d11 	.word	0x08006d11
 8006c6c:	08006d11 	.word	0x08006d11
 8006c70:	08006d11 	.word	0x08006d11
 8006c74:	08006d11 	.word	0x08006d11
 8006c78:	08006d11 	.word	0x08006d11
 8006c7c:	08006cf1 	.word	0x08006cf1
 8006c80:	08006d11 	.word	0x08006d11
 8006c84:	08006d11 	.word	0x08006d11
 8006c88:	08006d11 	.word	0x08006d11
 8006c8c:	08006d11 	.word	0x08006d11
 8006c90:	08006d11 	.word	0x08006d11
 8006c94:	08006d11 	.word	0x08006d11
 8006c98:	08006d11 	.word	0x08006d11
 8006c9c:	08006cf9 	.word	0x08006cf9
 8006ca0:	08006d11 	.word	0x08006d11
 8006ca4:	08006d11 	.word	0x08006d11
 8006ca8:	08006d11 	.word	0x08006d11
 8006cac:	08006d11 	.word	0x08006d11
 8006cb0:	08006d11 	.word	0x08006d11
 8006cb4:	08006d11 	.word	0x08006d11
 8006cb8:	08006d11 	.word	0x08006d11
 8006cbc:	08006d01 	.word	0x08006d01
 8006cc0:	08006d11 	.word	0x08006d11
 8006cc4:	08006d11 	.word	0x08006d11
 8006cc8:	08006d11 	.word	0x08006d11
 8006ccc:	08006d11 	.word	0x08006d11
 8006cd0:	08006d11 	.word	0x08006d11
 8006cd4:	08006d11 	.word	0x08006d11
 8006cd8:	08006d11 	.word	0x08006d11
 8006cdc:	08006d09 	.word	0x08006d09
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce6:	e0bc      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006ce8:	2304      	movs	r3, #4
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cee:	e0b8      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006cf0:	2308      	movs	r3, #8
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf6:	e0b4      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cfe:	e0b0      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006d00:	2320      	movs	r3, #32
 8006d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d06:	e0ac      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006d08:	2340      	movs	r3, #64	; 0x40
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d0e:	e0a8      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006d10:	2380      	movs	r3, #128	; 0x80
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d16:	e0a4      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a8f      	ldr	r2, [pc, #572]	; (8006f5c <UART_SetConfig+0x6a0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d130      	bne.n	8006d84 <UART_SetConfig+0x4c8>
 8006d22:	4b8d      	ldr	r3, [pc, #564]	; (8006f58 <UART_SetConfig+0x69c>)
 8006d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	2b05      	cmp	r3, #5
 8006d2c:	d826      	bhi.n	8006d7c <UART_SetConfig+0x4c0>
 8006d2e:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <UART_SetConfig+0x478>)
 8006d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d34:	08006d4d 	.word	0x08006d4d
 8006d38:	08006d55 	.word	0x08006d55
 8006d3c:	08006d5d 	.word	0x08006d5d
 8006d40:	08006d65 	.word	0x08006d65
 8006d44:	08006d6d 	.word	0x08006d6d
 8006d48:	08006d75 	.word	0x08006d75
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d52:	e086      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006d54:	2304      	movs	r3, #4
 8006d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5a:	e082      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006d5c:	2308      	movs	r3, #8
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d62:	e07e      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006d64:	2310      	movs	r3, #16
 8006d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6a:	e07a      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006d6c:	2320      	movs	r3, #32
 8006d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d72:	e076      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006d74:	2340      	movs	r3, #64	; 0x40
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7a:	e072      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006d7c:	2380      	movs	r3, #128	; 0x80
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d82:	e06e      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a75      	ldr	r2, [pc, #468]	; (8006f60 <UART_SetConfig+0x6a4>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d130      	bne.n	8006df0 <UART_SetConfig+0x534>
 8006d8e:	4b72      	ldr	r3, [pc, #456]	; (8006f58 <UART_SetConfig+0x69c>)
 8006d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	2b05      	cmp	r3, #5
 8006d98:	d826      	bhi.n	8006de8 <UART_SetConfig+0x52c>
 8006d9a:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <UART_SetConfig+0x4e4>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006db9 	.word	0x08006db9
 8006da4:	08006dc1 	.word	0x08006dc1
 8006da8:	08006dc9 	.word	0x08006dc9
 8006dac:	08006dd1 	.word	0x08006dd1
 8006db0:	08006dd9 	.word	0x08006dd9
 8006db4:	08006de1 	.word	0x08006de1
 8006db8:	2300      	movs	r3, #0
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dbe:	e050      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006dc0:	2304      	movs	r3, #4
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc6:	e04c      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006dc8:	2308      	movs	r3, #8
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dce:	e048      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006dd0:	2310      	movs	r3, #16
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd6:	e044      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006dd8:	2320      	movs	r3, #32
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dde:	e040      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006de0:	2340      	movs	r3, #64	; 0x40
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de6:	e03c      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006de8:	2380      	movs	r3, #128	; 0x80
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dee:	e038      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a5b      	ldr	r2, [pc, #364]	; (8006f64 <UART_SetConfig+0x6a8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d130      	bne.n	8006e5c <UART_SetConfig+0x5a0>
 8006dfa:	4b57      	ldr	r3, [pc, #348]	; (8006f58 <UART_SetConfig+0x69c>)
 8006dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	2b05      	cmp	r3, #5
 8006e04:	d826      	bhi.n	8006e54 <UART_SetConfig+0x598>
 8006e06:	a201      	add	r2, pc, #4	; (adr r2, 8006e0c <UART_SetConfig+0x550>)
 8006e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0c:	08006e25 	.word	0x08006e25
 8006e10:	08006e2d 	.word	0x08006e2d
 8006e14:	08006e35 	.word	0x08006e35
 8006e18:	08006e3d 	.word	0x08006e3d
 8006e1c:	08006e45 	.word	0x08006e45
 8006e20:	08006e4d 	.word	0x08006e4d
 8006e24:	2302      	movs	r3, #2
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e2a:	e01a      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e32:	e016      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006e34:	2308      	movs	r3, #8
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3a:	e012      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e42:	e00e      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006e44:	2320      	movs	r3, #32
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4a:	e00a      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006e4c:	2340      	movs	r3, #64	; 0x40
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e52:	e006      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006e54:	2380      	movs	r3, #128	; 0x80
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5a:	e002      	b.n	8006e62 <UART_SetConfig+0x5a6>
 8006e5c:	2380      	movs	r3, #128	; 0x80
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a3f      	ldr	r2, [pc, #252]	; (8006f64 <UART_SetConfig+0x6a8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	f040 80f8 	bne.w	800705e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	dc46      	bgt.n	8006f04 <UART_SetConfig+0x648>
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	f2c0 8082 	blt.w	8006f80 <UART_SetConfig+0x6c4>
 8006e7c:	3b02      	subs	r3, #2
 8006e7e:	2b1e      	cmp	r3, #30
 8006e80:	d87e      	bhi.n	8006f80 <UART_SetConfig+0x6c4>
 8006e82:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <UART_SetConfig+0x5cc>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006f0b 	.word	0x08006f0b
 8006e8c:	08006f81 	.word	0x08006f81
 8006e90:	08006f13 	.word	0x08006f13
 8006e94:	08006f81 	.word	0x08006f81
 8006e98:	08006f81 	.word	0x08006f81
 8006e9c:	08006f81 	.word	0x08006f81
 8006ea0:	08006f23 	.word	0x08006f23
 8006ea4:	08006f81 	.word	0x08006f81
 8006ea8:	08006f81 	.word	0x08006f81
 8006eac:	08006f81 	.word	0x08006f81
 8006eb0:	08006f81 	.word	0x08006f81
 8006eb4:	08006f81 	.word	0x08006f81
 8006eb8:	08006f81 	.word	0x08006f81
 8006ebc:	08006f81 	.word	0x08006f81
 8006ec0:	08006f33 	.word	0x08006f33
 8006ec4:	08006f81 	.word	0x08006f81
 8006ec8:	08006f81 	.word	0x08006f81
 8006ecc:	08006f81 	.word	0x08006f81
 8006ed0:	08006f81 	.word	0x08006f81
 8006ed4:	08006f81 	.word	0x08006f81
 8006ed8:	08006f81 	.word	0x08006f81
 8006edc:	08006f81 	.word	0x08006f81
 8006ee0:	08006f81 	.word	0x08006f81
 8006ee4:	08006f81 	.word	0x08006f81
 8006ee8:	08006f81 	.word	0x08006f81
 8006eec:	08006f81 	.word	0x08006f81
 8006ef0:	08006f81 	.word	0x08006f81
 8006ef4:	08006f81 	.word	0x08006f81
 8006ef8:	08006f81 	.word	0x08006f81
 8006efc:	08006f81 	.word	0x08006f81
 8006f00:	08006f73 	.word	0x08006f73
 8006f04:	2b40      	cmp	r3, #64	; 0x40
 8006f06:	d037      	beq.n	8006f78 <UART_SetConfig+0x6bc>
 8006f08:	e03a      	b.n	8006f80 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006f0a:	f7fd ff33 	bl	8004d74 <HAL_RCCEx_GetD3PCLK1Freq>
 8006f0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f10:	e03c      	b.n	8006f8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fd ff42 	bl	8004da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f20:	e034      	b.n	8006f8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f22:	f107 0318 	add.w	r3, r7, #24
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe f88e 	bl	8005048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f30:	e02c      	b.n	8006f8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f32:	4b09      	ldr	r3, [pc, #36]	; (8006f58 <UART_SetConfig+0x69c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0320 	and.w	r3, r3, #32
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d016      	beq.n	8006f6c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f3e:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <UART_SetConfig+0x69c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	08db      	lsrs	r3, r3, #3
 8006f44:	f003 0303 	and.w	r3, r3, #3
 8006f48:	4a07      	ldr	r2, [pc, #28]	; (8006f68 <UART_SetConfig+0x6ac>)
 8006f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f50:	e01c      	b.n	8006f8c <UART_SetConfig+0x6d0>
 8006f52:	bf00      	nop
 8006f54:	40011400 	.word	0x40011400
 8006f58:	58024400 	.word	0x58024400
 8006f5c:	40007800 	.word	0x40007800
 8006f60:	40007c00 	.word	0x40007c00
 8006f64:	58000c00 	.word	0x58000c00
 8006f68:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006f6c:	4b9d      	ldr	r3, [pc, #628]	; (80071e4 <UART_SetConfig+0x928>)
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f70:	e00c      	b.n	8006f8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f72:	4b9d      	ldr	r3, [pc, #628]	; (80071e8 <UART_SetConfig+0x92c>)
 8006f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f76:	e009      	b.n	8006f8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f7e:	e005      	b.n	8006f8c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006f8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 81de 	beq.w	8007350 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	4a94      	ldr	r2, [pc, #592]	; (80071ec <UART_SetConfig+0x930>)
 8006f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fa6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	4613      	mov	r3, r2
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	4413      	add	r3, r2
 8006fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d305      	bcc.n	8006fc4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d903      	bls.n	8006fcc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006fca:	e1c1      	b.n	8007350 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fce:	2200      	movs	r2, #0
 8006fd0:	60bb      	str	r3, [r7, #8]
 8006fd2:	60fa      	str	r2, [r7, #12]
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	4a84      	ldr	r2, [pc, #528]	; (80071ec <UART_SetConfig+0x930>)
 8006fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	607a      	str	r2, [r7, #4]
 8006fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fee:	f7f9 f9c7 	bl	8000380 <__aeabi_uldivmod>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	f04f 0200 	mov.w	r2, #0
 8006ffe:	f04f 0300 	mov.w	r3, #0
 8007002:	020b      	lsls	r3, r1, #8
 8007004:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007008:	0202      	lsls	r2, r0, #8
 800700a:	6979      	ldr	r1, [r7, #20]
 800700c:	6849      	ldr	r1, [r1, #4]
 800700e:	0849      	lsrs	r1, r1, #1
 8007010:	2000      	movs	r0, #0
 8007012:	460c      	mov	r4, r1
 8007014:	4605      	mov	r5, r0
 8007016:	eb12 0804 	adds.w	r8, r2, r4
 800701a:	eb43 0905 	adc.w	r9, r3, r5
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	469a      	mov	sl, r3
 8007026:	4693      	mov	fp, r2
 8007028:	4652      	mov	r2, sl
 800702a:	465b      	mov	r3, fp
 800702c:	4640      	mov	r0, r8
 800702e:	4649      	mov	r1, r9
 8007030:	f7f9 f9a6 	bl	8000380 <__aeabi_uldivmod>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	4613      	mov	r3, r2
 800703a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007042:	d308      	bcc.n	8007056 <UART_SetConfig+0x79a>
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800704a:	d204      	bcs.n	8007056 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007052:	60da      	str	r2, [r3, #12]
 8007054:	e17c      	b.n	8007350 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800705c:	e178      	b.n	8007350 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007066:	f040 80c5 	bne.w	80071f4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800706a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800706e:	2b20      	cmp	r3, #32
 8007070:	dc48      	bgt.n	8007104 <UART_SetConfig+0x848>
 8007072:	2b00      	cmp	r3, #0
 8007074:	db7b      	blt.n	800716e <UART_SetConfig+0x8b2>
 8007076:	2b20      	cmp	r3, #32
 8007078:	d879      	bhi.n	800716e <UART_SetConfig+0x8b2>
 800707a:	a201      	add	r2, pc, #4	; (adr r2, 8007080 <UART_SetConfig+0x7c4>)
 800707c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007080:	0800710b 	.word	0x0800710b
 8007084:	08007113 	.word	0x08007113
 8007088:	0800716f 	.word	0x0800716f
 800708c:	0800716f 	.word	0x0800716f
 8007090:	0800711b 	.word	0x0800711b
 8007094:	0800716f 	.word	0x0800716f
 8007098:	0800716f 	.word	0x0800716f
 800709c:	0800716f 	.word	0x0800716f
 80070a0:	0800712b 	.word	0x0800712b
 80070a4:	0800716f 	.word	0x0800716f
 80070a8:	0800716f 	.word	0x0800716f
 80070ac:	0800716f 	.word	0x0800716f
 80070b0:	0800716f 	.word	0x0800716f
 80070b4:	0800716f 	.word	0x0800716f
 80070b8:	0800716f 	.word	0x0800716f
 80070bc:	0800716f 	.word	0x0800716f
 80070c0:	0800713b 	.word	0x0800713b
 80070c4:	0800716f 	.word	0x0800716f
 80070c8:	0800716f 	.word	0x0800716f
 80070cc:	0800716f 	.word	0x0800716f
 80070d0:	0800716f 	.word	0x0800716f
 80070d4:	0800716f 	.word	0x0800716f
 80070d8:	0800716f 	.word	0x0800716f
 80070dc:	0800716f 	.word	0x0800716f
 80070e0:	0800716f 	.word	0x0800716f
 80070e4:	0800716f 	.word	0x0800716f
 80070e8:	0800716f 	.word	0x0800716f
 80070ec:	0800716f 	.word	0x0800716f
 80070f0:	0800716f 	.word	0x0800716f
 80070f4:	0800716f 	.word	0x0800716f
 80070f8:	0800716f 	.word	0x0800716f
 80070fc:	0800716f 	.word	0x0800716f
 8007100:	08007161 	.word	0x08007161
 8007104:	2b40      	cmp	r3, #64	; 0x40
 8007106:	d02e      	beq.n	8007166 <UART_SetConfig+0x8aa>
 8007108:	e031      	b.n	800716e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800710a:	f7fc fec1 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 800710e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007110:	e033      	b.n	800717a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007112:	f7fc fed3 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 8007116:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007118:	e02f      	b.n	800717a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800711a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800711e:	4618      	mov	r0, r3
 8007120:	f7fd fe3e 	bl	8004da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007128:	e027      	b.n	800717a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800712a:	f107 0318 	add.w	r3, r7, #24
 800712e:	4618      	mov	r0, r3
 8007130:	f7fd ff8a 	bl	8005048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007138:	e01f      	b.n	800717a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800713a:	4b2d      	ldr	r3, [pc, #180]	; (80071f0 <UART_SetConfig+0x934>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0320 	and.w	r3, r3, #32
 8007142:	2b00      	cmp	r3, #0
 8007144:	d009      	beq.n	800715a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007146:	4b2a      	ldr	r3, [pc, #168]	; (80071f0 <UART_SetConfig+0x934>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	08db      	lsrs	r3, r3, #3
 800714c:	f003 0303 	and.w	r3, r3, #3
 8007150:	4a24      	ldr	r2, [pc, #144]	; (80071e4 <UART_SetConfig+0x928>)
 8007152:	fa22 f303 	lsr.w	r3, r2, r3
 8007156:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007158:	e00f      	b.n	800717a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800715a:	4b22      	ldr	r3, [pc, #136]	; (80071e4 <UART_SetConfig+0x928>)
 800715c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800715e:	e00c      	b.n	800717a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007160:	4b21      	ldr	r3, [pc, #132]	; (80071e8 <UART_SetConfig+0x92c>)
 8007162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007164:	e009      	b.n	800717a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800716a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800716c:	e005      	b.n	800717a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007178:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800717a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 80e7 	beq.w	8007350 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	4a19      	ldr	r2, [pc, #100]	; (80071ec <UART_SetConfig+0x930>)
 8007188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800718c:	461a      	mov	r2, r3
 800718e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007190:	fbb3 f3f2 	udiv	r3, r3, r2
 8007194:	005a      	lsls	r2, r3, #1
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	441a      	add	r2, r3
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	2b0f      	cmp	r3, #15
 80071ac:	d916      	bls.n	80071dc <UART_SetConfig+0x920>
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b4:	d212      	bcs.n	80071dc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f023 030f 	bic.w	r3, r3, #15
 80071be:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c2:	085b      	lsrs	r3, r3, #1
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80071ce:	4313      	orrs	r3, r2
 80071d0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80071d8:	60da      	str	r2, [r3, #12]
 80071da:	e0b9      	b.n	8007350 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80071e2:	e0b5      	b.n	8007350 <UART_SetConfig+0xa94>
 80071e4:	03d09000 	.word	0x03d09000
 80071e8:	003d0900 	.word	0x003d0900
 80071ec:	08008fcc 	.word	0x08008fcc
 80071f0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80071f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80071f8:	2b20      	cmp	r3, #32
 80071fa:	dc49      	bgt.n	8007290 <UART_SetConfig+0x9d4>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	db7c      	blt.n	80072fa <UART_SetConfig+0xa3e>
 8007200:	2b20      	cmp	r3, #32
 8007202:	d87a      	bhi.n	80072fa <UART_SetConfig+0xa3e>
 8007204:	a201      	add	r2, pc, #4	; (adr r2, 800720c <UART_SetConfig+0x950>)
 8007206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720a:	bf00      	nop
 800720c:	08007297 	.word	0x08007297
 8007210:	0800729f 	.word	0x0800729f
 8007214:	080072fb 	.word	0x080072fb
 8007218:	080072fb 	.word	0x080072fb
 800721c:	080072a7 	.word	0x080072a7
 8007220:	080072fb 	.word	0x080072fb
 8007224:	080072fb 	.word	0x080072fb
 8007228:	080072fb 	.word	0x080072fb
 800722c:	080072b7 	.word	0x080072b7
 8007230:	080072fb 	.word	0x080072fb
 8007234:	080072fb 	.word	0x080072fb
 8007238:	080072fb 	.word	0x080072fb
 800723c:	080072fb 	.word	0x080072fb
 8007240:	080072fb 	.word	0x080072fb
 8007244:	080072fb 	.word	0x080072fb
 8007248:	080072fb 	.word	0x080072fb
 800724c:	080072c7 	.word	0x080072c7
 8007250:	080072fb 	.word	0x080072fb
 8007254:	080072fb 	.word	0x080072fb
 8007258:	080072fb 	.word	0x080072fb
 800725c:	080072fb 	.word	0x080072fb
 8007260:	080072fb 	.word	0x080072fb
 8007264:	080072fb 	.word	0x080072fb
 8007268:	080072fb 	.word	0x080072fb
 800726c:	080072fb 	.word	0x080072fb
 8007270:	080072fb 	.word	0x080072fb
 8007274:	080072fb 	.word	0x080072fb
 8007278:	080072fb 	.word	0x080072fb
 800727c:	080072fb 	.word	0x080072fb
 8007280:	080072fb 	.word	0x080072fb
 8007284:	080072fb 	.word	0x080072fb
 8007288:	080072fb 	.word	0x080072fb
 800728c:	080072ed 	.word	0x080072ed
 8007290:	2b40      	cmp	r3, #64	; 0x40
 8007292:	d02e      	beq.n	80072f2 <UART_SetConfig+0xa36>
 8007294:	e031      	b.n	80072fa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007296:	f7fc fdfb 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 800729a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800729c:	e033      	b.n	8007306 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800729e:	f7fc fe0d 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 80072a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80072a4:	e02f      	b.n	8007306 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fd fd78 	bl	8004da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072b4:	e027      	b.n	8007306 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072b6:	f107 0318 	add.w	r3, r7, #24
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fd fec4 	bl	8005048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072c4:	e01f      	b.n	8007306 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072c6:	4b2d      	ldr	r3, [pc, #180]	; (800737c <UART_SetConfig+0xac0>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0320 	and.w	r3, r3, #32
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d009      	beq.n	80072e6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072d2:	4b2a      	ldr	r3, [pc, #168]	; (800737c <UART_SetConfig+0xac0>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	08db      	lsrs	r3, r3, #3
 80072d8:	f003 0303 	and.w	r3, r3, #3
 80072dc:	4a28      	ldr	r2, [pc, #160]	; (8007380 <UART_SetConfig+0xac4>)
 80072de:	fa22 f303 	lsr.w	r3, r2, r3
 80072e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80072e4:	e00f      	b.n	8007306 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80072e6:	4b26      	ldr	r3, [pc, #152]	; (8007380 <UART_SetConfig+0xac4>)
 80072e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072ea:	e00c      	b.n	8007306 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80072ec:	4b25      	ldr	r3, [pc, #148]	; (8007384 <UART_SetConfig+0xac8>)
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072f0:	e009      	b.n	8007306 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072f8:	e005      	b.n	8007306 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007304:	bf00      	nop
    }

    if (pclk != 0U)
 8007306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d021      	beq.n	8007350 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	4a1d      	ldr	r2, [pc, #116]	; (8007388 <UART_SetConfig+0xacc>)
 8007312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007316:	461a      	mov	r2, r3
 8007318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731a:	fbb3 f2f2 	udiv	r2, r3, r2
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	441a      	add	r2, r3
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	fbb2 f3f3 	udiv	r3, r2, r3
 800732e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007332:	2b0f      	cmp	r3, #15
 8007334:	d909      	bls.n	800734a <UART_SetConfig+0xa8e>
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800733c:	d205      	bcs.n	800734a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800733e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007340:	b29a      	uxth	r2, r3
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	60da      	str	r2, [r3, #12]
 8007348:	e002      	b.n	8007350 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	2201      	movs	r2, #1
 8007354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2201      	movs	r2, #1
 800735c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	2200      	movs	r2, #0
 8007364:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2200      	movs	r2, #0
 800736a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800736c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007370:	4618      	mov	r0, r3
 8007372:	3748      	adds	r7, #72	; 0x48
 8007374:	46bd      	mov	sp, r7
 8007376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800737a:	bf00      	nop
 800737c:	58024400 	.word	0x58024400
 8007380:	03d09000 	.word	0x03d09000
 8007384:	003d0900 	.word	0x003d0900
 8007388:	08008fcc 	.word	0x08008fcc

0800738c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00a      	beq.n	80073b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	430a      	orrs	r2, r1
 80073d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00a      	beq.n	80073fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007420:	f003 0310 	and.w	r3, r3, #16
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007442:	f003 0320 	and.w	r3, r3, #32
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01a      	beq.n	80074a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800748a:	d10a      	bne.n	80074a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	605a      	str	r2, [r3, #4]
  }
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af02      	add	r7, sp, #8
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074e0:	f7fa fc00 	bl	8001ce4 <HAL_GetTick>
 80074e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0308 	and.w	r3, r3, #8
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d10e      	bne.n	8007512 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f82f 	bl	8007566 <UART_WaitOnFlagUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e025      	b.n	800755e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b04      	cmp	r3, #4
 800751e:	d10e      	bne.n	800753e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f819 	bl	8007566 <UART_WaitOnFlagUntilTimeout>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e00f      	b.n	800755e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2220      	movs	r2, #32
 800754a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b09c      	sub	sp, #112	; 0x70
 800756a:	af00      	add	r7, sp, #0
 800756c:	60f8      	str	r0, [r7, #12]
 800756e:	60b9      	str	r1, [r7, #8]
 8007570:	603b      	str	r3, [r7, #0]
 8007572:	4613      	mov	r3, r2
 8007574:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007576:	e0a9      	b.n	80076cc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757e:	f000 80a5 	beq.w	80076cc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007582:	f7fa fbaf 	bl	8001ce4 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800758e:	429a      	cmp	r2, r3
 8007590:	d302      	bcc.n	8007598 <UART_WaitOnFlagUntilTimeout+0x32>
 8007592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007594:	2b00      	cmp	r3, #0
 8007596:	d140      	bne.n	800761a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a0:	e853 3f00 	ldrex	r3, [r3]
 80075a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075ac:	667b      	str	r3, [r7, #100]	; 0x64
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80075c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e6      	bne.n	8007598 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3308      	adds	r3, #8
 80075d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	f023 0301 	bic.w	r3, r3, #1
 80075e0:	663b      	str	r3, [r7, #96]	; 0x60
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3308      	adds	r3, #8
 80075e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80075ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e5      	bne.n	80075ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2220      	movs	r2, #32
 8007602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2220      	movs	r2, #32
 800760a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e069      	b.n	80076ee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0304 	and.w	r3, r3, #4
 8007624:	2b00      	cmp	r3, #0
 8007626:	d051      	beq.n	80076cc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007636:	d149      	bne.n	80076cc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007640:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007656:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	461a      	mov	r2, r3
 800765e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007660:	637b      	str	r3, [r7, #52]	; 0x34
 8007662:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800766e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e6      	bne.n	8007642 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3308      	adds	r3, #8
 800767a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	e853 3f00 	ldrex	r3, [r3]
 8007682:	613b      	str	r3, [r7, #16]
   return(result);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f023 0301 	bic.w	r3, r3, #1
 800768a:	66bb      	str	r3, [r7, #104]	; 0x68
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3308      	adds	r3, #8
 8007692:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007694:	623a      	str	r2, [r7, #32]
 8007696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007698:	69f9      	ldr	r1, [r7, #28]
 800769a:	6a3a      	ldr	r2, [r7, #32]
 800769c:	e841 2300 	strex	r3, r2, [r1]
 80076a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1e5      	bne.n	8007674 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2220      	movs	r2, #32
 80076ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e010      	b.n	80076ee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69da      	ldr	r2, [r3, #28]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	4013      	ands	r3, r2
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	429a      	cmp	r2, r3
 80076da:	bf0c      	ite	eq
 80076dc:	2301      	moveq	r3, #1
 80076de:	2300      	movne	r3, #0
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	461a      	mov	r2, r3
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	f43f af46 	beq.w	8007578 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3770      	adds	r7, #112	; 0x70
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b085      	sub	sp, #20
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_UARTEx_DisableFifoMode+0x16>
 8007708:	2302      	movs	r3, #2
 800770a:	e027      	b.n	800775c <HAL_UARTEx_DisableFifoMode+0x66>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2224      	movs	r2, #36	; 0x24
 8007718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0201 	bic.w	r2, r2, #1
 8007732:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800773a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2220      	movs	r2, #32
 800774e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800777c:	2302      	movs	r3, #2
 800777e:	e02d      	b.n	80077dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2224      	movs	r2, #36	; 0x24
 800778c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0201 	bic.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f84f 	bl	8007860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077f8:	2302      	movs	r3, #2
 80077fa:	e02d      	b.n	8007858 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2224      	movs	r2, #36	; 0x24
 8007808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 0201 	bic.w	r2, r2, #1
 8007822:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f811 	bl	8007860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2220      	movs	r2, #32
 800784a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800786c:	2b00      	cmp	r3, #0
 800786e:	d108      	bne.n	8007882 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007880:	e031      	b.n	80078e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007882:	2310      	movs	r3, #16
 8007884:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007886:	2310      	movs	r3, #16
 8007888:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	0e5b      	lsrs	r3, r3, #25
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	0f5b      	lsrs	r3, r3, #29
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f003 0307 	and.w	r3, r3, #7
 80078a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	7b3a      	ldrb	r2, [r7, #12]
 80078ae:	4911      	ldr	r1, [pc, #68]	; (80078f4 <UARTEx_SetNbDataToProcess+0x94>)
 80078b0:	5c8a      	ldrb	r2, [r1, r2]
 80078b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078b6:	7b3a      	ldrb	r2, [r7, #12]
 80078b8:	490f      	ldr	r1, [pc, #60]	; (80078f8 <UARTEx_SetNbDataToProcess+0x98>)
 80078ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	7b7a      	ldrb	r2, [r7, #13]
 80078cc:	4909      	ldr	r1, [pc, #36]	; (80078f4 <UARTEx_SetNbDataToProcess+0x94>)
 80078ce:	5c8a      	ldrb	r2, [r1, r2]
 80078d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078d4:	7b7a      	ldrb	r2, [r7, #13]
 80078d6:	4908      	ldr	r1, [pc, #32]	; (80078f8 <UARTEx_SetNbDataToProcess+0x98>)
 80078d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078da:	fb93 f3f2 	sdiv	r3, r3, r2
 80078de:	b29a      	uxth	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80078e6:	bf00      	nop
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	08008fe4 	.word	0x08008fe4
 80078f8:	08008fec 	.word	0x08008fec

080078fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078fc:	b084      	sub	sp, #16
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	f107 001c 	add.w	r0, r7, #28
 800790a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	2b01      	cmp	r3, #1
 8007912:	d120      	bne.n	8007956 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007918:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	4b2a      	ldr	r3, [pc, #168]	; (80079d0 <USB_CoreInit+0xd4>)
 8007926:	4013      	ands	r3, r2
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800793a:	2b01      	cmp	r3, #1
 800793c:	d105      	bne.n	800794a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 faac 	bl	8007ea8 <USB_CoreReset>
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]
 8007954:	e01a      	b.n	800798c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 faa0 	bl	8007ea8 <USB_CoreReset>
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800796c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d106      	bne.n	8007980 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007976:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	639a      	str	r2, [r3, #56]	; 0x38
 800797e:	e005      	b.n	800798c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007984:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	2b01      	cmp	r3, #1
 8007990:	d116      	bne.n	80079c0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007996:	b29a      	uxth	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80079a0:	4b0c      	ldr	r3, [pc, #48]	; (80079d4 <USB_CoreInit+0xd8>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f043 0206 	orr.w	r2, r3, #6
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f043 0220 	orr.w	r2, r3, #32
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079cc:	b004      	add	sp, #16
 80079ce:	4770      	bx	lr
 80079d0:	ffbdffbf 	.word	0xffbdffbf
 80079d4:	03ee0000 	.word	0x03ee0000

080079d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f023 0201 	bic.w	r2, r3, #1
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	460b      	mov	r3, r1
 8007a04:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a16:	78fb      	ldrb	r3, [r7, #3]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d115      	bne.n	8007a48 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a28:	2001      	movs	r0, #1
 8007a2a:	f7fa f967 	bl	8001cfc <HAL_Delay>
      ms++;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3301      	adds	r3, #1
 8007a32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fa29 	bl	8007e8c <USB_GetMode>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d01e      	beq.n	8007a7e <USB_SetCurrentMode+0x84>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b31      	cmp	r3, #49	; 0x31
 8007a44:	d9f0      	bls.n	8007a28 <USB_SetCurrentMode+0x2e>
 8007a46:	e01a      	b.n	8007a7e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d115      	bne.n	8007a7a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a5a:	2001      	movs	r0, #1
 8007a5c:	f7fa f94e 	bl	8001cfc <HAL_Delay>
      ms++;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	3301      	adds	r3, #1
 8007a64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa10 	bl	8007e8c <USB_GetMode>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <USB_SetCurrentMode+0x84>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b31      	cmp	r3, #49	; 0x31
 8007a76:	d9f0      	bls.n	8007a5a <USB_SetCurrentMode+0x60>
 8007a78:	e001      	b.n	8007a7e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e005      	b.n	8007a8a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b32      	cmp	r3, #50	; 0x32
 8007a82:	d101      	bne.n	8007a88 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e000      	b.n	8007a8a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a94:	b084      	sub	sp, #16
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b086      	sub	sp, #24
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007aae:	2300      	movs	r3, #0
 8007ab0:	613b      	str	r3, [r7, #16]
 8007ab2:	e009      	b.n	8007ac8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	3340      	adds	r3, #64	; 0x40
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	2200      	movs	r2, #0
 8007ac0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	613b      	str	r3, [r7, #16]
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	2b0e      	cmp	r3, #14
 8007acc:	d9f2      	bls.n	8007ab4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d11c      	bne.n	8007b0e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ae2:	f043 0302 	orr.w	r3, r3, #2
 8007ae6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	e005      	b.n	8007b1a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b20:	461a      	mov	r2, r3
 8007b22:	2300      	movs	r3, #0
 8007b24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b34:	461a      	mov	r2, r3
 8007b36:	680b      	ldr	r3, [r1, #0]
 8007b38:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d10c      	bne.n	8007b5a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d104      	bne.n	8007b50 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b46:	2100      	movs	r1, #0
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f965 	bl	8007e18 <USB_SetDevSpeed>
 8007b4e:	e008      	b.n	8007b62 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b50:	2101      	movs	r1, #1
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f960 	bl	8007e18 <USB_SetDevSpeed>
 8007b58:	e003      	b.n	8007b62 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b5a:	2103      	movs	r1, #3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f95b 	bl	8007e18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b62:	2110      	movs	r1, #16
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f8f3 	bl	8007d50 <USB_FlushTxFifo>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f91f 	bl	8007db8 <USB_FlushRxFifo>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d001      	beq.n	8007b84 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b96:	461a      	mov	r2, r3
 8007b98:	2300      	movs	r3, #0
 8007b9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ba8:	2300      	movs	r3, #0
 8007baa:	613b      	str	r3, [r7, #16]
 8007bac:	e043      	b.n	8007c36 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bc4:	d118      	bne.n	8007bf8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10a      	bne.n	8007be2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd8:	461a      	mov	r2, r3
 8007bda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	e013      	b.n	8007c0a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	e008      	b.n	8007c0a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c04:	461a      	mov	r2, r3
 8007c06:	2300      	movs	r3, #0
 8007c08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c16:	461a      	mov	r2, r3
 8007c18:	2300      	movs	r3, #0
 8007c1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c28:	461a      	mov	r2, r3
 8007c2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	3301      	adds	r3, #1
 8007c34:	613b      	str	r3, [r7, #16]
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d3b7      	bcc.n	8007bae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c3e:	2300      	movs	r3, #0
 8007c40:	613b      	str	r3, [r7, #16]
 8007c42:	e043      	b.n	8007ccc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c5a:	d118      	bne.n	8007c8e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c74:	6013      	str	r3, [r2, #0]
 8007c76:	e013      	b.n	8007ca0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c84:	461a      	mov	r2, r3
 8007c86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	e008      	b.n	8007ca0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cac:	461a      	mov	r2, r3
 8007cae:	2300      	movs	r3, #0
 8007cb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007cc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	613b      	str	r3, [r7, #16]
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d3b7      	bcc.n	8007c44 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ce6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007cf4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d105      	bne.n	8007d08 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	f043 0210 	orr.w	r2, r3, #16
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	699a      	ldr	r2, [r3, #24]
 8007d0c:	4b0e      	ldr	r3, [pc, #56]	; (8007d48 <USB_DevInit+0x2b4>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d005      	beq.n	8007d26 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	f043 0208 	orr.w	r2, r3, #8
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d105      	bne.n	8007d38 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	699a      	ldr	r2, [r3, #24]
 8007d30:	4b06      	ldr	r3, [pc, #24]	; (8007d4c <USB_DevInit+0x2b8>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d44:	b004      	add	sp, #16
 8007d46:	4770      	bx	lr
 8007d48:	803c3800 	.word	0x803c3800
 8007d4c:	40000004 	.word	0x40000004

08007d50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3301      	adds	r3, #1
 8007d62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4a13      	ldr	r2, [pc, #76]	; (8007db4 <USB_FlushTxFifo+0x64>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d901      	bls.n	8007d70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e01b      	b.n	8007da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	daf2      	bge.n	8007d5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	019b      	lsls	r3, r3, #6
 8007d80:	f043 0220 	orr.w	r2, r3, #32
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4a08      	ldr	r2, [pc, #32]	; (8007db4 <USB_FlushTxFifo+0x64>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d901      	bls.n	8007d9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e006      	b.n	8007da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	f003 0320 	and.w	r3, r3, #32
 8007da2:	2b20      	cmp	r3, #32
 8007da4:	d0f0      	beq.n	8007d88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	00030d40 	.word	0x00030d40

08007db8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	4a11      	ldr	r2, [pc, #68]	; (8007e14 <USB_FlushRxFifo+0x5c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d901      	bls.n	8007dd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e018      	b.n	8007e08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	daf2      	bge.n	8007dc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2210      	movs	r2, #16
 8007de6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3301      	adds	r3, #1
 8007dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	4a08      	ldr	r2, [pc, #32]	; (8007e14 <USB_FlushRxFifo+0x5c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d901      	bls.n	8007dfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e006      	b.n	8007e08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	f003 0310 	and.w	r3, r3, #16
 8007e02:	2b10      	cmp	r3, #16
 8007e04:	d0f0      	beq.n	8007de8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	00030d40 	.word	0x00030d40

08007e18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	68f9      	ldr	r1, [r7, #12]
 8007e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e64:	f023 0303 	bic.w	r3, r3, #3
 8007e68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e78:	f043 0302 	orr.w	r3, r3, #2
 8007e7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	f003 0301 	and.w	r3, r3, #1
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	4a13      	ldr	r2, [pc, #76]	; (8007f0c <USB_CoreReset+0x64>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d901      	bls.n	8007ec6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e01b      	b.n	8007efe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	daf2      	bge.n	8007eb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	f043 0201 	orr.w	r2, r3, #1
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	4a09      	ldr	r2, [pc, #36]	; (8007f0c <USB_CoreReset+0x64>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d901      	bls.n	8007ef0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e006      	b.n	8007efe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d0f0      	beq.n	8007ede <USB_CoreReset+0x36>

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	00030d40 	.word	0x00030d40

08007f10 <__errno>:
 8007f10:	4b01      	ldr	r3, [pc, #4]	; (8007f18 <__errno+0x8>)
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	24000010 	.word	0x24000010

08007f1c <__libc_init_array>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	4d0d      	ldr	r5, [pc, #52]	; (8007f54 <__libc_init_array+0x38>)
 8007f20:	4c0d      	ldr	r4, [pc, #52]	; (8007f58 <__libc_init_array+0x3c>)
 8007f22:	1b64      	subs	r4, r4, r5
 8007f24:	10a4      	asrs	r4, r4, #2
 8007f26:	2600      	movs	r6, #0
 8007f28:	42a6      	cmp	r6, r4
 8007f2a:	d109      	bne.n	8007f40 <__libc_init_array+0x24>
 8007f2c:	4d0b      	ldr	r5, [pc, #44]	; (8007f5c <__libc_init_array+0x40>)
 8007f2e:	4c0c      	ldr	r4, [pc, #48]	; (8007f60 <__libc_init_array+0x44>)
 8007f30:	f001 f824 	bl	8008f7c <_init>
 8007f34:	1b64      	subs	r4, r4, r5
 8007f36:	10a4      	asrs	r4, r4, #2
 8007f38:	2600      	movs	r6, #0
 8007f3a:	42a6      	cmp	r6, r4
 8007f3c:	d105      	bne.n	8007f4a <__libc_init_array+0x2e>
 8007f3e:	bd70      	pop	{r4, r5, r6, pc}
 8007f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f44:	4798      	blx	r3
 8007f46:	3601      	adds	r6, #1
 8007f48:	e7ee      	b.n	8007f28 <__libc_init_array+0xc>
 8007f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f4e:	4798      	blx	r3
 8007f50:	3601      	adds	r6, #1
 8007f52:	e7f2      	b.n	8007f3a <__libc_init_array+0x1e>
 8007f54:	08009094 	.word	0x08009094
 8007f58:	08009094 	.word	0x08009094
 8007f5c:	08009094 	.word	0x08009094
 8007f60:	08009098 	.word	0x08009098

08007f64 <memset>:
 8007f64:	4402      	add	r2, r0
 8007f66:	4603      	mov	r3, r0
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d100      	bne.n	8007f6e <memset+0xa>
 8007f6c:	4770      	bx	lr
 8007f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f72:	e7f9      	b.n	8007f68 <memset+0x4>

08007f74 <iprintf>:
 8007f74:	b40f      	push	{r0, r1, r2, r3}
 8007f76:	4b0a      	ldr	r3, [pc, #40]	; (8007fa0 <iprintf+0x2c>)
 8007f78:	b513      	push	{r0, r1, r4, lr}
 8007f7a:	681c      	ldr	r4, [r3, #0]
 8007f7c:	b124      	cbz	r4, 8007f88 <iprintf+0x14>
 8007f7e:	69a3      	ldr	r3, [r4, #24]
 8007f80:	b913      	cbnz	r3, 8007f88 <iprintf+0x14>
 8007f82:	4620      	mov	r0, r4
 8007f84:	f000 fa5e 	bl	8008444 <__sinit>
 8007f88:	ab05      	add	r3, sp, #20
 8007f8a:	9a04      	ldr	r2, [sp, #16]
 8007f8c:	68a1      	ldr	r1, [r4, #8]
 8007f8e:	9301      	str	r3, [sp, #4]
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 fc67 	bl	8008864 <_vfiprintf_r>
 8007f96:	b002      	add	sp, #8
 8007f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f9c:	b004      	add	sp, #16
 8007f9e:	4770      	bx	lr
 8007fa0:	24000010 	.word	0x24000010

08007fa4 <_puts_r>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	460e      	mov	r6, r1
 8007fa8:	4605      	mov	r5, r0
 8007faa:	b118      	cbz	r0, 8007fb4 <_puts_r+0x10>
 8007fac:	6983      	ldr	r3, [r0, #24]
 8007fae:	b90b      	cbnz	r3, 8007fb4 <_puts_r+0x10>
 8007fb0:	f000 fa48 	bl	8008444 <__sinit>
 8007fb4:	69ab      	ldr	r3, [r5, #24]
 8007fb6:	68ac      	ldr	r4, [r5, #8]
 8007fb8:	b913      	cbnz	r3, 8007fc0 <_puts_r+0x1c>
 8007fba:	4628      	mov	r0, r5
 8007fbc:	f000 fa42 	bl	8008444 <__sinit>
 8007fc0:	4b2c      	ldr	r3, [pc, #176]	; (8008074 <_puts_r+0xd0>)
 8007fc2:	429c      	cmp	r4, r3
 8007fc4:	d120      	bne.n	8008008 <_puts_r+0x64>
 8007fc6:	686c      	ldr	r4, [r5, #4]
 8007fc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fca:	07db      	lsls	r3, r3, #31
 8007fcc:	d405      	bmi.n	8007fda <_puts_r+0x36>
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	0598      	lsls	r0, r3, #22
 8007fd2:	d402      	bmi.n	8007fda <_puts_r+0x36>
 8007fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fd6:	f000 fad3 	bl	8008580 <__retarget_lock_acquire_recursive>
 8007fda:	89a3      	ldrh	r3, [r4, #12]
 8007fdc:	0719      	lsls	r1, r3, #28
 8007fde:	d51d      	bpl.n	800801c <_puts_r+0x78>
 8007fe0:	6923      	ldr	r3, [r4, #16]
 8007fe2:	b1db      	cbz	r3, 800801c <_puts_r+0x78>
 8007fe4:	3e01      	subs	r6, #1
 8007fe6:	68a3      	ldr	r3, [r4, #8]
 8007fe8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007fec:	3b01      	subs	r3, #1
 8007fee:	60a3      	str	r3, [r4, #8]
 8007ff0:	bb39      	cbnz	r1, 8008042 <_puts_r+0x9e>
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	da38      	bge.n	8008068 <_puts_r+0xc4>
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	210a      	movs	r1, #10
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f000 f848 	bl	8008090 <__swbuf_r>
 8008000:	3001      	adds	r0, #1
 8008002:	d011      	beq.n	8008028 <_puts_r+0x84>
 8008004:	250a      	movs	r5, #10
 8008006:	e011      	b.n	800802c <_puts_r+0x88>
 8008008:	4b1b      	ldr	r3, [pc, #108]	; (8008078 <_puts_r+0xd4>)
 800800a:	429c      	cmp	r4, r3
 800800c:	d101      	bne.n	8008012 <_puts_r+0x6e>
 800800e:	68ac      	ldr	r4, [r5, #8]
 8008010:	e7da      	b.n	8007fc8 <_puts_r+0x24>
 8008012:	4b1a      	ldr	r3, [pc, #104]	; (800807c <_puts_r+0xd8>)
 8008014:	429c      	cmp	r4, r3
 8008016:	bf08      	it	eq
 8008018:	68ec      	ldreq	r4, [r5, #12]
 800801a:	e7d5      	b.n	8007fc8 <_puts_r+0x24>
 800801c:	4621      	mov	r1, r4
 800801e:	4628      	mov	r0, r5
 8008020:	f000 f888 	bl	8008134 <__swsetup_r>
 8008024:	2800      	cmp	r0, #0
 8008026:	d0dd      	beq.n	8007fe4 <_puts_r+0x40>
 8008028:	f04f 35ff 	mov.w	r5, #4294967295
 800802c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800802e:	07da      	lsls	r2, r3, #31
 8008030:	d405      	bmi.n	800803e <_puts_r+0x9a>
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	059b      	lsls	r3, r3, #22
 8008036:	d402      	bmi.n	800803e <_puts_r+0x9a>
 8008038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800803a:	f000 faa2 	bl	8008582 <__retarget_lock_release_recursive>
 800803e:	4628      	mov	r0, r5
 8008040:	bd70      	pop	{r4, r5, r6, pc}
 8008042:	2b00      	cmp	r3, #0
 8008044:	da04      	bge.n	8008050 <_puts_r+0xac>
 8008046:	69a2      	ldr	r2, [r4, #24]
 8008048:	429a      	cmp	r2, r3
 800804a:	dc06      	bgt.n	800805a <_puts_r+0xb6>
 800804c:	290a      	cmp	r1, #10
 800804e:	d004      	beq.n	800805a <_puts_r+0xb6>
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	1c5a      	adds	r2, r3, #1
 8008054:	6022      	str	r2, [r4, #0]
 8008056:	7019      	strb	r1, [r3, #0]
 8008058:	e7c5      	b.n	8007fe6 <_puts_r+0x42>
 800805a:	4622      	mov	r2, r4
 800805c:	4628      	mov	r0, r5
 800805e:	f000 f817 	bl	8008090 <__swbuf_r>
 8008062:	3001      	adds	r0, #1
 8008064:	d1bf      	bne.n	8007fe6 <_puts_r+0x42>
 8008066:	e7df      	b.n	8008028 <_puts_r+0x84>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	250a      	movs	r5, #10
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	6022      	str	r2, [r4, #0]
 8008070:	701d      	strb	r5, [r3, #0]
 8008072:	e7db      	b.n	800802c <_puts_r+0x88>
 8008074:	08009018 	.word	0x08009018
 8008078:	08009038 	.word	0x08009038
 800807c:	08008ff8 	.word	0x08008ff8

08008080 <puts>:
 8008080:	4b02      	ldr	r3, [pc, #8]	; (800808c <puts+0xc>)
 8008082:	4601      	mov	r1, r0
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	f7ff bf8d 	b.w	8007fa4 <_puts_r>
 800808a:	bf00      	nop
 800808c:	24000010 	.word	0x24000010

08008090 <__swbuf_r>:
 8008090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008092:	460e      	mov	r6, r1
 8008094:	4614      	mov	r4, r2
 8008096:	4605      	mov	r5, r0
 8008098:	b118      	cbz	r0, 80080a2 <__swbuf_r+0x12>
 800809a:	6983      	ldr	r3, [r0, #24]
 800809c:	b90b      	cbnz	r3, 80080a2 <__swbuf_r+0x12>
 800809e:	f000 f9d1 	bl	8008444 <__sinit>
 80080a2:	4b21      	ldr	r3, [pc, #132]	; (8008128 <__swbuf_r+0x98>)
 80080a4:	429c      	cmp	r4, r3
 80080a6:	d12b      	bne.n	8008100 <__swbuf_r+0x70>
 80080a8:	686c      	ldr	r4, [r5, #4]
 80080aa:	69a3      	ldr	r3, [r4, #24]
 80080ac:	60a3      	str	r3, [r4, #8]
 80080ae:	89a3      	ldrh	r3, [r4, #12]
 80080b0:	071a      	lsls	r2, r3, #28
 80080b2:	d52f      	bpl.n	8008114 <__swbuf_r+0x84>
 80080b4:	6923      	ldr	r3, [r4, #16]
 80080b6:	b36b      	cbz	r3, 8008114 <__swbuf_r+0x84>
 80080b8:	6923      	ldr	r3, [r4, #16]
 80080ba:	6820      	ldr	r0, [r4, #0]
 80080bc:	1ac0      	subs	r0, r0, r3
 80080be:	6963      	ldr	r3, [r4, #20]
 80080c0:	b2f6      	uxtb	r6, r6
 80080c2:	4283      	cmp	r3, r0
 80080c4:	4637      	mov	r7, r6
 80080c6:	dc04      	bgt.n	80080d2 <__swbuf_r+0x42>
 80080c8:	4621      	mov	r1, r4
 80080ca:	4628      	mov	r0, r5
 80080cc:	f000 f926 	bl	800831c <_fflush_r>
 80080d0:	bb30      	cbnz	r0, 8008120 <__swbuf_r+0x90>
 80080d2:	68a3      	ldr	r3, [r4, #8]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	60a3      	str	r3, [r4, #8]
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	6022      	str	r2, [r4, #0]
 80080de:	701e      	strb	r6, [r3, #0]
 80080e0:	6963      	ldr	r3, [r4, #20]
 80080e2:	3001      	adds	r0, #1
 80080e4:	4283      	cmp	r3, r0
 80080e6:	d004      	beq.n	80080f2 <__swbuf_r+0x62>
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	07db      	lsls	r3, r3, #31
 80080ec:	d506      	bpl.n	80080fc <__swbuf_r+0x6c>
 80080ee:	2e0a      	cmp	r6, #10
 80080f0:	d104      	bne.n	80080fc <__swbuf_r+0x6c>
 80080f2:	4621      	mov	r1, r4
 80080f4:	4628      	mov	r0, r5
 80080f6:	f000 f911 	bl	800831c <_fflush_r>
 80080fa:	b988      	cbnz	r0, 8008120 <__swbuf_r+0x90>
 80080fc:	4638      	mov	r0, r7
 80080fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008100:	4b0a      	ldr	r3, [pc, #40]	; (800812c <__swbuf_r+0x9c>)
 8008102:	429c      	cmp	r4, r3
 8008104:	d101      	bne.n	800810a <__swbuf_r+0x7a>
 8008106:	68ac      	ldr	r4, [r5, #8]
 8008108:	e7cf      	b.n	80080aa <__swbuf_r+0x1a>
 800810a:	4b09      	ldr	r3, [pc, #36]	; (8008130 <__swbuf_r+0xa0>)
 800810c:	429c      	cmp	r4, r3
 800810e:	bf08      	it	eq
 8008110:	68ec      	ldreq	r4, [r5, #12]
 8008112:	e7ca      	b.n	80080aa <__swbuf_r+0x1a>
 8008114:	4621      	mov	r1, r4
 8008116:	4628      	mov	r0, r5
 8008118:	f000 f80c 	bl	8008134 <__swsetup_r>
 800811c:	2800      	cmp	r0, #0
 800811e:	d0cb      	beq.n	80080b8 <__swbuf_r+0x28>
 8008120:	f04f 37ff 	mov.w	r7, #4294967295
 8008124:	e7ea      	b.n	80080fc <__swbuf_r+0x6c>
 8008126:	bf00      	nop
 8008128:	08009018 	.word	0x08009018
 800812c:	08009038 	.word	0x08009038
 8008130:	08008ff8 	.word	0x08008ff8

08008134 <__swsetup_r>:
 8008134:	4b32      	ldr	r3, [pc, #200]	; (8008200 <__swsetup_r+0xcc>)
 8008136:	b570      	push	{r4, r5, r6, lr}
 8008138:	681d      	ldr	r5, [r3, #0]
 800813a:	4606      	mov	r6, r0
 800813c:	460c      	mov	r4, r1
 800813e:	b125      	cbz	r5, 800814a <__swsetup_r+0x16>
 8008140:	69ab      	ldr	r3, [r5, #24]
 8008142:	b913      	cbnz	r3, 800814a <__swsetup_r+0x16>
 8008144:	4628      	mov	r0, r5
 8008146:	f000 f97d 	bl	8008444 <__sinit>
 800814a:	4b2e      	ldr	r3, [pc, #184]	; (8008204 <__swsetup_r+0xd0>)
 800814c:	429c      	cmp	r4, r3
 800814e:	d10f      	bne.n	8008170 <__swsetup_r+0x3c>
 8008150:	686c      	ldr	r4, [r5, #4]
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008158:	0719      	lsls	r1, r3, #28
 800815a:	d42c      	bmi.n	80081b6 <__swsetup_r+0x82>
 800815c:	06dd      	lsls	r5, r3, #27
 800815e:	d411      	bmi.n	8008184 <__swsetup_r+0x50>
 8008160:	2309      	movs	r3, #9
 8008162:	6033      	str	r3, [r6, #0]
 8008164:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008168:	81a3      	strh	r3, [r4, #12]
 800816a:	f04f 30ff 	mov.w	r0, #4294967295
 800816e:	e03e      	b.n	80081ee <__swsetup_r+0xba>
 8008170:	4b25      	ldr	r3, [pc, #148]	; (8008208 <__swsetup_r+0xd4>)
 8008172:	429c      	cmp	r4, r3
 8008174:	d101      	bne.n	800817a <__swsetup_r+0x46>
 8008176:	68ac      	ldr	r4, [r5, #8]
 8008178:	e7eb      	b.n	8008152 <__swsetup_r+0x1e>
 800817a:	4b24      	ldr	r3, [pc, #144]	; (800820c <__swsetup_r+0xd8>)
 800817c:	429c      	cmp	r4, r3
 800817e:	bf08      	it	eq
 8008180:	68ec      	ldreq	r4, [r5, #12]
 8008182:	e7e6      	b.n	8008152 <__swsetup_r+0x1e>
 8008184:	0758      	lsls	r0, r3, #29
 8008186:	d512      	bpl.n	80081ae <__swsetup_r+0x7a>
 8008188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800818a:	b141      	cbz	r1, 800819e <__swsetup_r+0x6a>
 800818c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008190:	4299      	cmp	r1, r3
 8008192:	d002      	beq.n	800819a <__swsetup_r+0x66>
 8008194:	4630      	mov	r0, r6
 8008196:	f000 fa5b 	bl	8008650 <_free_r>
 800819a:	2300      	movs	r3, #0
 800819c:	6363      	str	r3, [r4, #52]	; 0x34
 800819e:	89a3      	ldrh	r3, [r4, #12]
 80081a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081a4:	81a3      	strh	r3, [r4, #12]
 80081a6:	2300      	movs	r3, #0
 80081a8:	6063      	str	r3, [r4, #4]
 80081aa:	6923      	ldr	r3, [r4, #16]
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	f043 0308 	orr.w	r3, r3, #8
 80081b4:	81a3      	strh	r3, [r4, #12]
 80081b6:	6923      	ldr	r3, [r4, #16]
 80081b8:	b94b      	cbnz	r3, 80081ce <__swsetup_r+0x9a>
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c4:	d003      	beq.n	80081ce <__swsetup_r+0x9a>
 80081c6:	4621      	mov	r1, r4
 80081c8:	4630      	mov	r0, r6
 80081ca:	f000 fa01 	bl	80085d0 <__smakebuf_r>
 80081ce:	89a0      	ldrh	r0, [r4, #12]
 80081d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081d4:	f010 0301 	ands.w	r3, r0, #1
 80081d8:	d00a      	beq.n	80081f0 <__swsetup_r+0xbc>
 80081da:	2300      	movs	r3, #0
 80081dc:	60a3      	str	r3, [r4, #8]
 80081de:	6963      	ldr	r3, [r4, #20]
 80081e0:	425b      	negs	r3, r3
 80081e2:	61a3      	str	r3, [r4, #24]
 80081e4:	6923      	ldr	r3, [r4, #16]
 80081e6:	b943      	cbnz	r3, 80081fa <__swsetup_r+0xc6>
 80081e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081ec:	d1ba      	bne.n	8008164 <__swsetup_r+0x30>
 80081ee:	bd70      	pop	{r4, r5, r6, pc}
 80081f0:	0781      	lsls	r1, r0, #30
 80081f2:	bf58      	it	pl
 80081f4:	6963      	ldrpl	r3, [r4, #20]
 80081f6:	60a3      	str	r3, [r4, #8]
 80081f8:	e7f4      	b.n	80081e4 <__swsetup_r+0xb0>
 80081fa:	2000      	movs	r0, #0
 80081fc:	e7f7      	b.n	80081ee <__swsetup_r+0xba>
 80081fe:	bf00      	nop
 8008200:	24000010 	.word	0x24000010
 8008204:	08009018 	.word	0x08009018
 8008208:	08009038 	.word	0x08009038
 800820c:	08008ff8 	.word	0x08008ff8

08008210 <__sflush_r>:
 8008210:	898a      	ldrh	r2, [r1, #12]
 8008212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008216:	4605      	mov	r5, r0
 8008218:	0710      	lsls	r0, r2, #28
 800821a:	460c      	mov	r4, r1
 800821c:	d458      	bmi.n	80082d0 <__sflush_r+0xc0>
 800821e:	684b      	ldr	r3, [r1, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	dc05      	bgt.n	8008230 <__sflush_r+0x20>
 8008224:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008226:	2b00      	cmp	r3, #0
 8008228:	dc02      	bgt.n	8008230 <__sflush_r+0x20>
 800822a:	2000      	movs	r0, #0
 800822c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008232:	2e00      	cmp	r6, #0
 8008234:	d0f9      	beq.n	800822a <__sflush_r+0x1a>
 8008236:	2300      	movs	r3, #0
 8008238:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800823c:	682f      	ldr	r7, [r5, #0]
 800823e:	602b      	str	r3, [r5, #0]
 8008240:	d032      	beq.n	80082a8 <__sflush_r+0x98>
 8008242:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	075a      	lsls	r2, r3, #29
 8008248:	d505      	bpl.n	8008256 <__sflush_r+0x46>
 800824a:	6863      	ldr	r3, [r4, #4]
 800824c:	1ac0      	subs	r0, r0, r3
 800824e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008250:	b10b      	cbz	r3, 8008256 <__sflush_r+0x46>
 8008252:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008254:	1ac0      	subs	r0, r0, r3
 8008256:	2300      	movs	r3, #0
 8008258:	4602      	mov	r2, r0
 800825a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800825c:	6a21      	ldr	r1, [r4, #32]
 800825e:	4628      	mov	r0, r5
 8008260:	47b0      	blx	r6
 8008262:	1c43      	adds	r3, r0, #1
 8008264:	89a3      	ldrh	r3, [r4, #12]
 8008266:	d106      	bne.n	8008276 <__sflush_r+0x66>
 8008268:	6829      	ldr	r1, [r5, #0]
 800826a:	291d      	cmp	r1, #29
 800826c:	d82c      	bhi.n	80082c8 <__sflush_r+0xb8>
 800826e:	4a2a      	ldr	r2, [pc, #168]	; (8008318 <__sflush_r+0x108>)
 8008270:	40ca      	lsrs	r2, r1
 8008272:	07d6      	lsls	r6, r2, #31
 8008274:	d528      	bpl.n	80082c8 <__sflush_r+0xb8>
 8008276:	2200      	movs	r2, #0
 8008278:	6062      	str	r2, [r4, #4]
 800827a:	04d9      	lsls	r1, r3, #19
 800827c:	6922      	ldr	r2, [r4, #16]
 800827e:	6022      	str	r2, [r4, #0]
 8008280:	d504      	bpl.n	800828c <__sflush_r+0x7c>
 8008282:	1c42      	adds	r2, r0, #1
 8008284:	d101      	bne.n	800828a <__sflush_r+0x7a>
 8008286:	682b      	ldr	r3, [r5, #0]
 8008288:	b903      	cbnz	r3, 800828c <__sflush_r+0x7c>
 800828a:	6560      	str	r0, [r4, #84]	; 0x54
 800828c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800828e:	602f      	str	r7, [r5, #0]
 8008290:	2900      	cmp	r1, #0
 8008292:	d0ca      	beq.n	800822a <__sflush_r+0x1a>
 8008294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008298:	4299      	cmp	r1, r3
 800829a:	d002      	beq.n	80082a2 <__sflush_r+0x92>
 800829c:	4628      	mov	r0, r5
 800829e:	f000 f9d7 	bl	8008650 <_free_r>
 80082a2:	2000      	movs	r0, #0
 80082a4:	6360      	str	r0, [r4, #52]	; 0x34
 80082a6:	e7c1      	b.n	800822c <__sflush_r+0x1c>
 80082a8:	6a21      	ldr	r1, [r4, #32]
 80082aa:	2301      	movs	r3, #1
 80082ac:	4628      	mov	r0, r5
 80082ae:	47b0      	blx	r6
 80082b0:	1c41      	adds	r1, r0, #1
 80082b2:	d1c7      	bne.n	8008244 <__sflush_r+0x34>
 80082b4:	682b      	ldr	r3, [r5, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d0c4      	beq.n	8008244 <__sflush_r+0x34>
 80082ba:	2b1d      	cmp	r3, #29
 80082bc:	d001      	beq.n	80082c2 <__sflush_r+0xb2>
 80082be:	2b16      	cmp	r3, #22
 80082c0:	d101      	bne.n	80082c6 <__sflush_r+0xb6>
 80082c2:	602f      	str	r7, [r5, #0]
 80082c4:	e7b1      	b.n	800822a <__sflush_r+0x1a>
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082cc:	81a3      	strh	r3, [r4, #12]
 80082ce:	e7ad      	b.n	800822c <__sflush_r+0x1c>
 80082d0:	690f      	ldr	r7, [r1, #16]
 80082d2:	2f00      	cmp	r7, #0
 80082d4:	d0a9      	beq.n	800822a <__sflush_r+0x1a>
 80082d6:	0793      	lsls	r3, r2, #30
 80082d8:	680e      	ldr	r6, [r1, #0]
 80082da:	bf08      	it	eq
 80082dc:	694b      	ldreq	r3, [r1, #20]
 80082de:	600f      	str	r7, [r1, #0]
 80082e0:	bf18      	it	ne
 80082e2:	2300      	movne	r3, #0
 80082e4:	eba6 0807 	sub.w	r8, r6, r7
 80082e8:	608b      	str	r3, [r1, #8]
 80082ea:	f1b8 0f00 	cmp.w	r8, #0
 80082ee:	dd9c      	ble.n	800822a <__sflush_r+0x1a>
 80082f0:	6a21      	ldr	r1, [r4, #32]
 80082f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082f4:	4643      	mov	r3, r8
 80082f6:	463a      	mov	r2, r7
 80082f8:	4628      	mov	r0, r5
 80082fa:	47b0      	blx	r6
 80082fc:	2800      	cmp	r0, #0
 80082fe:	dc06      	bgt.n	800830e <__sflush_r+0xfe>
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008306:	81a3      	strh	r3, [r4, #12]
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	e78e      	b.n	800822c <__sflush_r+0x1c>
 800830e:	4407      	add	r7, r0
 8008310:	eba8 0800 	sub.w	r8, r8, r0
 8008314:	e7e9      	b.n	80082ea <__sflush_r+0xda>
 8008316:	bf00      	nop
 8008318:	20400001 	.word	0x20400001

0800831c <_fflush_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	690b      	ldr	r3, [r1, #16]
 8008320:	4605      	mov	r5, r0
 8008322:	460c      	mov	r4, r1
 8008324:	b913      	cbnz	r3, 800832c <_fflush_r+0x10>
 8008326:	2500      	movs	r5, #0
 8008328:	4628      	mov	r0, r5
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	b118      	cbz	r0, 8008336 <_fflush_r+0x1a>
 800832e:	6983      	ldr	r3, [r0, #24]
 8008330:	b90b      	cbnz	r3, 8008336 <_fflush_r+0x1a>
 8008332:	f000 f887 	bl	8008444 <__sinit>
 8008336:	4b14      	ldr	r3, [pc, #80]	; (8008388 <_fflush_r+0x6c>)
 8008338:	429c      	cmp	r4, r3
 800833a:	d11b      	bne.n	8008374 <_fflush_r+0x58>
 800833c:	686c      	ldr	r4, [r5, #4]
 800833e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0ef      	beq.n	8008326 <_fflush_r+0xa>
 8008346:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008348:	07d0      	lsls	r0, r2, #31
 800834a:	d404      	bmi.n	8008356 <_fflush_r+0x3a>
 800834c:	0599      	lsls	r1, r3, #22
 800834e:	d402      	bmi.n	8008356 <_fflush_r+0x3a>
 8008350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008352:	f000 f915 	bl	8008580 <__retarget_lock_acquire_recursive>
 8008356:	4628      	mov	r0, r5
 8008358:	4621      	mov	r1, r4
 800835a:	f7ff ff59 	bl	8008210 <__sflush_r>
 800835e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008360:	07da      	lsls	r2, r3, #31
 8008362:	4605      	mov	r5, r0
 8008364:	d4e0      	bmi.n	8008328 <_fflush_r+0xc>
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	059b      	lsls	r3, r3, #22
 800836a:	d4dd      	bmi.n	8008328 <_fflush_r+0xc>
 800836c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800836e:	f000 f908 	bl	8008582 <__retarget_lock_release_recursive>
 8008372:	e7d9      	b.n	8008328 <_fflush_r+0xc>
 8008374:	4b05      	ldr	r3, [pc, #20]	; (800838c <_fflush_r+0x70>)
 8008376:	429c      	cmp	r4, r3
 8008378:	d101      	bne.n	800837e <_fflush_r+0x62>
 800837a:	68ac      	ldr	r4, [r5, #8]
 800837c:	e7df      	b.n	800833e <_fflush_r+0x22>
 800837e:	4b04      	ldr	r3, [pc, #16]	; (8008390 <_fflush_r+0x74>)
 8008380:	429c      	cmp	r4, r3
 8008382:	bf08      	it	eq
 8008384:	68ec      	ldreq	r4, [r5, #12]
 8008386:	e7da      	b.n	800833e <_fflush_r+0x22>
 8008388:	08009018 	.word	0x08009018
 800838c:	08009038 	.word	0x08009038
 8008390:	08008ff8 	.word	0x08008ff8

08008394 <std>:
 8008394:	2300      	movs	r3, #0
 8008396:	b510      	push	{r4, lr}
 8008398:	4604      	mov	r4, r0
 800839a:	e9c0 3300 	strd	r3, r3, [r0]
 800839e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083a2:	6083      	str	r3, [r0, #8]
 80083a4:	8181      	strh	r1, [r0, #12]
 80083a6:	6643      	str	r3, [r0, #100]	; 0x64
 80083a8:	81c2      	strh	r2, [r0, #14]
 80083aa:	6183      	str	r3, [r0, #24]
 80083ac:	4619      	mov	r1, r3
 80083ae:	2208      	movs	r2, #8
 80083b0:	305c      	adds	r0, #92	; 0x5c
 80083b2:	f7ff fdd7 	bl	8007f64 <memset>
 80083b6:	4b05      	ldr	r3, [pc, #20]	; (80083cc <std+0x38>)
 80083b8:	6263      	str	r3, [r4, #36]	; 0x24
 80083ba:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <std+0x3c>)
 80083bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <std+0x40>)
 80083c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083c2:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <std+0x44>)
 80083c4:	6224      	str	r4, [r4, #32]
 80083c6:	6323      	str	r3, [r4, #48]	; 0x30
 80083c8:	bd10      	pop	{r4, pc}
 80083ca:	bf00      	nop
 80083cc:	08008e0d 	.word	0x08008e0d
 80083d0:	08008e2f 	.word	0x08008e2f
 80083d4:	08008e67 	.word	0x08008e67
 80083d8:	08008e8b 	.word	0x08008e8b

080083dc <_cleanup_r>:
 80083dc:	4901      	ldr	r1, [pc, #4]	; (80083e4 <_cleanup_r+0x8>)
 80083de:	f000 b8af 	b.w	8008540 <_fwalk_reent>
 80083e2:	bf00      	nop
 80083e4:	0800831d 	.word	0x0800831d

080083e8 <__sfmoreglue>:
 80083e8:	b570      	push	{r4, r5, r6, lr}
 80083ea:	2268      	movs	r2, #104	; 0x68
 80083ec:	1e4d      	subs	r5, r1, #1
 80083ee:	4355      	muls	r5, r2
 80083f0:	460e      	mov	r6, r1
 80083f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083f6:	f000 f997 	bl	8008728 <_malloc_r>
 80083fa:	4604      	mov	r4, r0
 80083fc:	b140      	cbz	r0, 8008410 <__sfmoreglue+0x28>
 80083fe:	2100      	movs	r1, #0
 8008400:	e9c0 1600 	strd	r1, r6, [r0]
 8008404:	300c      	adds	r0, #12
 8008406:	60a0      	str	r0, [r4, #8]
 8008408:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800840c:	f7ff fdaa 	bl	8007f64 <memset>
 8008410:	4620      	mov	r0, r4
 8008412:	bd70      	pop	{r4, r5, r6, pc}

08008414 <__sfp_lock_acquire>:
 8008414:	4801      	ldr	r0, [pc, #4]	; (800841c <__sfp_lock_acquire+0x8>)
 8008416:	f000 b8b3 	b.w	8008580 <__retarget_lock_acquire_recursive>
 800841a:	bf00      	nop
 800841c:	24000855 	.word	0x24000855

08008420 <__sfp_lock_release>:
 8008420:	4801      	ldr	r0, [pc, #4]	; (8008428 <__sfp_lock_release+0x8>)
 8008422:	f000 b8ae 	b.w	8008582 <__retarget_lock_release_recursive>
 8008426:	bf00      	nop
 8008428:	24000855 	.word	0x24000855

0800842c <__sinit_lock_acquire>:
 800842c:	4801      	ldr	r0, [pc, #4]	; (8008434 <__sinit_lock_acquire+0x8>)
 800842e:	f000 b8a7 	b.w	8008580 <__retarget_lock_acquire_recursive>
 8008432:	bf00      	nop
 8008434:	24000856 	.word	0x24000856

08008438 <__sinit_lock_release>:
 8008438:	4801      	ldr	r0, [pc, #4]	; (8008440 <__sinit_lock_release+0x8>)
 800843a:	f000 b8a2 	b.w	8008582 <__retarget_lock_release_recursive>
 800843e:	bf00      	nop
 8008440:	24000856 	.word	0x24000856

08008444 <__sinit>:
 8008444:	b510      	push	{r4, lr}
 8008446:	4604      	mov	r4, r0
 8008448:	f7ff fff0 	bl	800842c <__sinit_lock_acquire>
 800844c:	69a3      	ldr	r3, [r4, #24]
 800844e:	b11b      	cbz	r3, 8008458 <__sinit+0x14>
 8008450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008454:	f7ff bff0 	b.w	8008438 <__sinit_lock_release>
 8008458:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800845c:	6523      	str	r3, [r4, #80]	; 0x50
 800845e:	4b13      	ldr	r3, [pc, #76]	; (80084ac <__sinit+0x68>)
 8008460:	4a13      	ldr	r2, [pc, #76]	; (80084b0 <__sinit+0x6c>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	62a2      	str	r2, [r4, #40]	; 0x28
 8008466:	42a3      	cmp	r3, r4
 8008468:	bf04      	itt	eq
 800846a:	2301      	moveq	r3, #1
 800846c:	61a3      	streq	r3, [r4, #24]
 800846e:	4620      	mov	r0, r4
 8008470:	f000 f820 	bl	80084b4 <__sfp>
 8008474:	6060      	str	r0, [r4, #4]
 8008476:	4620      	mov	r0, r4
 8008478:	f000 f81c 	bl	80084b4 <__sfp>
 800847c:	60a0      	str	r0, [r4, #8]
 800847e:	4620      	mov	r0, r4
 8008480:	f000 f818 	bl	80084b4 <__sfp>
 8008484:	2200      	movs	r2, #0
 8008486:	60e0      	str	r0, [r4, #12]
 8008488:	2104      	movs	r1, #4
 800848a:	6860      	ldr	r0, [r4, #4]
 800848c:	f7ff ff82 	bl	8008394 <std>
 8008490:	68a0      	ldr	r0, [r4, #8]
 8008492:	2201      	movs	r2, #1
 8008494:	2109      	movs	r1, #9
 8008496:	f7ff ff7d 	bl	8008394 <std>
 800849a:	68e0      	ldr	r0, [r4, #12]
 800849c:	2202      	movs	r2, #2
 800849e:	2112      	movs	r1, #18
 80084a0:	f7ff ff78 	bl	8008394 <std>
 80084a4:	2301      	movs	r3, #1
 80084a6:	61a3      	str	r3, [r4, #24]
 80084a8:	e7d2      	b.n	8008450 <__sinit+0xc>
 80084aa:	bf00      	nop
 80084ac:	08008ff4 	.word	0x08008ff4
 80084b0:	080083dd 	.word	0x080083dd

080084b4 <__sfp>:
 80084b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b6:	4607      	mov	r7, r0
 80084b8:	f7ff ffac 	bl	8008414 <__sfp_lock_acquire>
 80084bc:	4b1e      	ldr	r3, [pc, #120]	; (8008538 <__sfp+0x84>)
 80084be:	681e      	ldr	r6, [r3, #0]
 80084c0:	69b3      	ldr	r3, [r6, #24]
 80084c2:	b913      	cbnz	r3, 80084ca <__sfp+0x16>
 80084c4:	4630      	mov	r0, r6
 80084c6:	f7ff ffbd 	bl	8008444 <__sinit>
 80084ca:	3648      	adds	r6, #72	; 0x48
 80084cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	d503      	bpl.n	80084dc <__sfp+0x28>
 80084d4:	6833      	ldr	r3, [r6, #0]
 80084d6:	b30b      	cbz	r3, 800851c <__sfp+0x68>
 80084d8:	6836      	ldr	r6, [r6, #0]
 80084da:	e7f7      	b.n	80084cc <__sfp+0x18>
 80084dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084e0:	b9d5      	cbnz	r5, 8008518 <__sfp+0x64>
 80084e2:	4b16      	ldr	r3, [pc, #88]	; (800853c <__sfp+0x88>)
 80084e4:	60e3      	str	r3, [r4, #12]
 80084e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084ea:	6665      	str	r5, [r4, #100]	; 0x64
 80084ec:	f000 f847 	bl	800857e <__retarget_lock_init_recursive>
 80084f0:	f7ff ff96 	bl	8008420 <__sfp_lock_release>
 80084f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084fc:	6025      	str	r5, [r4, #0]
 80084fe:	61a5      	str	r5, [r4, #24]
 8008500:	2208      	movs	r2, #8
 8008502:	4629      	mov	r1, r5
 8008504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008508:	f7ff fd2c 	bl	8007f64 <memset>
 800850c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008514:	4620      	mov	r0, r4
 8008516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008518:	3468      	adds	r4, #104	; 0x68
 800851a:	e7d9      	b.n	80084d0 <__sfp+0x1c>
 800851c:	2104      	movs	r1, #4
 800851e:	4638      	mov	r0, r7
 8008520:	f7ff ff62 	bl	80083e8 <__sfmoreglue>
 8008524:	4604      	mov	r4, r0
 8008526:	6030      	str	r0, [r6, #0]
 8008528:	2800      	cmp	r0, #0
 800852a:	d1d5      	bne.n	80084d8 <__sfp+0x24>
 800852c:	f7ff ff78 	bl	8008420 <__sfp_lock_release>
 8008530:	230c      	movs	r3, #12
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	e7ee      	b.n	8008514 <__sfp+0x60>
 8008536:	bf00      	nop
 8008538:	08008ff4 	.word	0x08008ff4
 800853c:	ffff0001 	.word	0xffff0001

08008540 <_fwalk_reent>:
 8008540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008544:	4606      	mov	r6, r0
 8008546:	4688      	mov	r8, r1
 8008548:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800854c:	2700      	movs	r7, #0
 800854e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008552:	f1b9 0901 	subs.w	r9, r9, #1
 8008556:	d505      	bpl.n	8008564 <_fwalk_reent+0x24>
 8008558:	6824      	ldr	r4, [r4, #0]
 800855a:	2c00      	cmp	r4, #0
 800855c:	d1f7      	bne.n	800854e <_fwalk_reent+0xe>
 800855e:	4638      	mov	r0, r7
 8008560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008564:	89ab      	ldrh	r3, [r5, #12]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d907      	bls.n	800857a <_fwalk_reent+0x3a>
 800856a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800856e:	3301      	adds	r3, #1
 8008570:	d003      	beq.n	800857a <_fwalk_reent+0x3a>
 8008572:	4629      	mov	r1, r5
 8008574:	4630      	mov	r0, r6
 8008576:	47c0      	blx	r8
 8008578:	4307      	orrs	r7, r0
 800857a:	3568      	adds	r5, #104	; 0x68
 800857c:	e7e9      	b.n	8008552 <_fwalk_reent+0x12>

0800857e <__retarget_lock_init_recursive>:
 800857e:	4770      	bx	lr

08008580 <__retarget_lock_acquire_recursive>:
 8008580:	4770      	bx	lr

08008582 <__retarget_lock_release_recursive>:
 8008582:	4770      	bx	lr

08008584 <__swhatbuf_r>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	460e      	mov	r6, r1
 8008588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800858c:	2900      	cmp	r1, #0
 800858e:	b096      	sub	sp, #88	; 0x58
 8008590:	4614      	mov	r4, r2
 8008592:	461d      	mov	r5, r3
 8008594:	da08      	bge.n	80085a8 <__swhatbuf_r+0x24>
 8008596:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	602a      	str	r2, [r5, #0]
 800859e:	061a      	lsls	r2, r3, #24
 80085a0:	d410      	bmi.n	80085c4 <__swhatbuf_r+0x40>
 80085a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085a6:	e00e      	b.n	80085c6 <__swhatbuf_r+0x42>
 80085a8:	466a      	mov	r2, sp
 80085aa:	f000 fc95 	bl	8008ed8 <_fstat_r>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	dbf1      	blt.n	8008596 <__swhatbuf_r+0x12>
 80085b2:	9a01      	ldr	r2, [sp, #4]
 80085b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085bc:	425a      	negs	r2, r3
 80085be:	415a      	adcs	r2, r3
 80085c0:	602a      	str	r2, [r5, #0]
 80085c2:	e7ee      	b.n	80085a2 <__swhatbuf_r+0x1e>
 80085c4:	2340      	movs	r3, #64	; 0x40
 80085c6:	2000      	movs	r0, #0
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	b016      	add	sp, #88	; 0x58
 80085cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080085d0 <__smakebuf_r>:
 80085d0:	898b      	ldrh	r3, [r1, #12]
 80085d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085d4:	079d      	lsls	r5, r3, #30
 80085d6:	4606      	mov	r6, r0
 80085d8:	460c      	mov	r4, r1
 80085da:	d507      	bpl.n	80085ec <__smakebuf_r+0x1c>
 80085dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	6123      	str	r3, [r4, #16]
 80085e4:	2301      	movs	r3, #1
 80085e6:	6163      	str	r3, [r4, #20]
 80085e8:	b002      	add	sp, #8
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	ab01      	add	r3, sp, #4
 80085ee:	466a      	mov	r2, sp
 80085f0:	f7ff ffc8 	bl	8008584 <__swhatbuf_r>
 80085f4:	9900      	ldr	r1, [sp, #0]
 80085f6:	4605      	mov	r5, r0
 80085f8:	4630      	mov	r0, r6
 80085fa:	f000 f895 	bl	8008728 <_malloc_r>
 80085fe:	b948      	cbnz	r0, 8008614 <__smakebuf_r+0x44>
 8008600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008604:	059a      	lsls	r2, r3, #22
 8008606:	d4ef      	bmi.n	80085e8 <__smakebuf_r+0x18>
 8008608:	f023 0303 	bic.w	r3, r3, #3
 800860c:	f043 0302 	orr.w	r3, r3, #2
 8008610:	81a3      	strh	r3, [r4, #12]
 8008612:	e7e3      	b.n	80085dc <__smakebuf_r+0xc>
 8008614:	4b0d      	ldr	r3, [pc, #52]	; (800864c <__smakebuf_r+0x7c>)
 8008616:	62b3      	str	r3, [r6, #40]	; 0x28
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	6020      	str	r0, [r4, #0]
 800861c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008620:	81a3      	strh	r3, [r4, #12]
 8008622:	9b00      	ldr	r3, [sp, #0]
 8008624:	6163      	str	r3, [r4, #20]
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	6120      	str	r0, [r4, #16]
 800862a:	b15b      	cbz	r3, 8008644 <__smakebuf_r+0x74>
 800862c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008630:	4630      	mov	r0, r6
 8008632:	f000 fc63 	bl	8008efc <_isatty_r>
 8008636:	b128      	cbz	r0, 8008644 <__smakebuf_r+0x74>
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	f023 0303 	bic.w	r3, r3, #3
 800863e:	f043 0301 	orr.w	r3, r3, #1
 8008642:	81a3      	strh	r3, [r4, #12]
 8008644:	89a0      	ldrh	r0, [r4, #12]
 8008646:	4305      	orrs	r5, r0
 8008648:	81a5      	strh	r5, [r4, #12]
 800864a:	e7cd      	b.n	80085e8 <__smakebuf_r+0x18>
 800864c:	080083dd 	.word	0x080083dd

08008650 <_free_r>:
 8008650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008652:	2900      	cmp	r1, #0
 8008654:	d044      	beq.n	80086e0 <_free_r+0x90>
 8008656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800865a:	9001      	str	r0, [sp, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	f1a1 0404 	sub.w	r4, r1, #4
 8008662:	bfb8      	it	lt
 8008664:	18e4      	addlt	r4, r4, r3
 8008666:	f000 fc6b 	bl	8008f40 <__malloc_lock>
 800866a:	4a1e      	ldr	r2, [pc, #120]	; (80086e4 <_free_r+0x94>)
 800866c:	9801      	ldr	r0, [sp, #4]
 800866e:	6813      	ldr	r3, [r2, #0]
 8008670:	b933      	cbnz	r3, 8008680 <_free_r+0x30>
 8008672:	6063      	str	r3, [r4, #4]
 8008674:	6014      	str	r4, [r2, #0]
 8008676:	b003      	add	sp, #12
 8008678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800867c:	f000 bc66 	b.w	8008f4c <__malloc_unlock>
 8008680:	42a3      	cmp	r3, r4
 8008682:	d908      	bls.n	8008696 <_free_r+0x46>
 8008684:	6825      	ldr	r5, [r4, #0]
 8008686:	1961      	adds	r1, r4, r5
 8008688:	428b      	cmp	r3, r1
 800868a:	bf01      	itttt	eq
 800868c:	6819      	ldreq	r1, [r3, #0]
 800868e:	685b      	ldreq	r3, [r3, #4]
 8008690:	1949      	addeq	r1, r1, r5
 8008692:	6021      	streq	r1, [r4, #0]
 8008694:	e7ed      	b.n	8008672 <_free_r+0x22>
 8008696:	461a      	mov	r2, r3
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	b10b      	cbz	r3, 80086a0 <_free_r+0x50>
 800869c:	42a3      	cmp	r3, r4
 800869e:	d9fa      	bls.n	8008696 <_free_r+0x46>
 80086a0:	6811      	ldr	r1, [r2, #0]
 80086a2:	1855      	adds	r5, r2, r1
 80086a4:	42a5      	cmp	r5, r4
 80086a6:	d10b      	bne.n	80086c0 <_free_r+0x70>
 80086a8:	6824      	ldr	r4, [r4, #0]
 80086aa:	4421      	add	r1, r4
 80086ac:	1854      	adds	r4, r2, r1
 80086ae:	42a3      	cmp	r3, r4
 80086b0:	6011      	str	r1, [r2, #0]
 80086b2:	d1e0      	bne.n	8008676 <_free_r+0x26>
 80086b4:	681c      	ldr	r4, [r3, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	6053      	str	r3, [r2, #4]
 80086ba:	4421      	add	r1, r4
 80086bc:	6011      	str	r1, [r2, #0]
 80086be:	e7da      	b.n	8008676 <_free_r+0x26>
 80086c0:	d902      	bls.n	80086c8 <_free_r+0x78>
 80086c2:	230c      	movs	r3, #12
 80086c4:	6003      	str	r3, [r0, #0]
 80086c6:	e7d6      	b.n	8008676 <_free_r+0x26>
 80086c8:	6825      	ldr	r5, [r4, #0]
 80086ca:	1961      	adds	r1, r4, r5
 80086cc:	428b      	cmp	r3, r1
 80086ce:	bf04      	itt	eq
 80086d0:	6819      	ldreq	r1, [r3, #0]
 80086d2:	685b      	ldreq	r3, [r3, #4]
 80086d4:	6063      	str	r3, [r4, #4]
 80086d6:	bf04      	itt	eq
 80086d8:	1949      	addeq	r1, r1, r5
 80086da:	6021      	streq	r1, [r4, #0]
 80086dc:	6054      	str	r4, [r2, #4]
 80086de:	e7ca      	b.n	8008676 <_free_r+0x26>
 80086e0:	b003      	add	sp, #12
 80086e2:	bd30      	pop	{r4, r5, pc}
 80086e4:	24000858 	.word	0x24000858

080086e8 <sbrk_aligned>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	4e0e      	ldr	r6, [pc, #56]	; (8008724 <sbrk_aligned+0x3c>)
 80086ec:	460c      	mov	r4, r1
 80086ee:	6831      	ldr	r1, [r6, #0]
 80086f0:	4605      	mov	r5, r0
 80086f2:	b911      	cbnz	r1, 80086fa <sbrk_aligned+0x12>
 80086f4:	f000 fb7a 	bl	8008dec <_sbrk_r>
 80086f8:	6030      	str	r0, [r6, #0]
 80086fa:	4621      	mov	r1, r4
 80086fc:	4628      	mov	r0, r5
 80086fe:	f000 fb75 	bl	8008dec <_sbrk_r>
 8008702:	1c43      	adds	r3, r0, #1
 8008704:	d00a      	beq.n	800871c <sbrk_aligned+0x34>
 8008706:	1cc4      	adds	r4, r0, #3
 8008708:	f024 0403 	bic.w	r4, r4, #3
 800870c:	42a0      	cmp	r0, r4
 800870e:	d007      	beq.n	8008720 <sbrk_aligned+0x38>
 8008710:	1a21      	subs	r1, r4, r0
 8008712:	4628      	mov	r0, r5
 8008714:	f000 fb6a 	bl	8008dec <_sbrk_r>
 8008718:	3001      	adds	r0, #1
 800871a:	d101      	bne.n	8008720 <sbrk_aligned+0x38>
 800871c:	f04f 34ff 	mov.w	r4, #4294967295
 8008720:	4620      	mov	r0, r4
 8008722:	bd70      	pop	{r4, r5, r6, pc}
 8008724:	2400085c 	.word	0x2400085c

08008728 <_malloc_r>:
 8008728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800872c:	1ccd      	adds	r5, r1, #3
 800872e:	f025 0503 	bic.w	r5, r5, #3
 8008732:	3508      	adds	r5, #8
 8008734:	2d0c      	cmp	r5, #12
 8008736:	bf38      	it	cc
 8008738:	250c      	movcc	r5, #12
 800873a:	2d00      	cmp	r5, #0
 800873c:	4607      	mov	r7, r0
 800873e:	db01      	blt.n	8008744 <_malloc_r+0x1c>
 8008740:	42a9      	cmp	r1, r5
 8008742:	d905      	bls.n	8008750 <_malloc_r+0x28>
 8008744:	230c      	movs	r3, #12
 8008746:	603b      	str	r3, [r7, #0]
 8008748:	2600      	movs	r6, #0
 800874a:	4630      	mov	r0, r6
 800874c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008750:	4e2e      	ldr	r6, [pc, #184]	; (800880c <_malloc_r+0xe4>)
 8008752:	f000 fbf5 	bl	8008f40 <__malloc_lock>
 8008756:	6833      	ldr	r3, [r6, #0]
 8008758:	461c      	mov	r4, r3
 800875a:	bb34      	cbnz	r4, 80087aa <_malloc_r+0x82>
 800875c:	4629      	mov	r1, r5
 800875e:	4638      	mov	r0, r7
 8008760:	f7ff ffc2 	bl	80086e8 <sbrk_aligned>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	4604      	mov	r4, r0
 8008768:	d14d      	bne.n	8008806 <_malloc_r+0xde>
 800876a:	6834      	ldr	r4, [r6, #0]
 800876c:	4626      	mov	r6, r4
 800876e:	2e00      	cmp	r6, #0
 8008770:	d140      	bne.n	80087f4 <_malloc_r+0xcc>
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	4631      	mov	r1, r6
 8008776:	4638      	mov	r0, r7
 8008778:	eb04 0803 	add.w	r8, r4, r3
 800877c:	f000 fb36 	bl	8008dec <_sbrk_r>
 8008780:	4580      	cmp	r8, r0
 8008782:	d13a      	bne.n	80087fa <_malloc_r+0xd2>
 8008784:	6821      	ldr	r1, [r4, #0]
 8008786:	3503      	adds	r5, #3
 8008788:	1a6d      	subs	r5, r5, r1
 800878a:	f025 0503 	bic.w	r5, r5, #3
 800878e:	3508      	adds	r5, #8
 8008790:	2d0c      	cmp	r5, #12
 8008792:	bf38      	it	cc
 8008794:	250c      	movcc	r5, #12
 8008796:	4629      	mov	r1, r5
 8008798:	4638      	mov	r0, r7
 800879a:	f7ff ffa5 	bl	80086e8 <sbrk_aligned>
 800879e:	3001      	adds	r0, #1
 80087a0:	d02b      	beq.n	80087fa <_malloc_r+0xd2>
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	442b      	add	r3, r5
 80087a6:	6023      	str	r3, [r4, #0]
 80087a8:	e00e      	b.n	80087c8 <_malloc_r+0xa0>
 80087aa:	6822      	ldr	r2, [r4, #0]
 80087ac:	1b52      	subs	r2, r2, r5
 80087ae:	d41e      	bmi.n	80087ee <_malloc_r+0xc6>
 80087b0:	2a0b      	cmp	r2, #11
 80087b2:	d916      	bls.n	80087e2 <_malloc_r+0xba>
 80087b4:	1961      	adds	r1, r4, r5
 80087b6:	42a3      	cmp	r3, r4
 80087b8:	6025      	str	r5, [r4, #0]
 80087ba:	bf18      	it	ne
 80087bc:	6059      	strne	r1, [r3, #4]
 80087be:	6863      	ldr	r3, [r4, #4]
 80087c0:	bf08      	it	eq
 80087c2:	6031      	streq	r1, [r6, #0]
 80087c4:	5162      	str	r2, [r4, r5]
 80087c6:	604b      	str	r3, [r1, #4]
 80087c8:	4638      	mov	r0, r7
 80087ca:	f104 060b 	add.w	r6, r4, #11
 80087ce:	f000 fbbd 	bl	8008f4c <__malloc_unlock>
 80087d2:	f026 0607 	bic.w	r6, r6, #7
 80087d6:	1d23      	adds	r3, r4, #4
 80087d8:	1af2      	subs	r2, r6, r3
 80087da:	d0b6      	beq.n	800874a <_malloc_r+0x22>
 80087dc:	1b9b      	subs	r3, r3, r6
 80087de:	50a3      	str	r3, [r4, r2]
 80087e0:	e7b3      	b.n	800874a <_malloc_r+0x22>
 80087e2:	6862      	ldr	r2, [r4, #4]
 80087e4:	42a3      	cmp	r3, r4
 80087e6:	bf0c      	ite	eq
 80087e8:	6032      	streq	r2, [r6, #0]
 80087ea:	605a      	strne	r2, [r3, #4]
 80087ec:	e7ec      	b.n	80087c8 <_malloc_r+0xa0>
 80087ee:	4623      	mov	r3, r4
 80087f0:	6864      	ldr	r4, [r4, #4]
 80087f2:	e7b2      	b.n	800875a <_malloc_r+0x32>
 80087f4:	4634      	mov	r4, r6
 80087f6:	6876      	ldr	r6, [r6, #4]
 80087f8:	e7b9      	b.n	800876e <_malloc_r+0x46>
 80087fa:	230c      	movs	r3, #12
 80087fc:	603b      	str	r3, [r7, #0]
 80087fe:	4638      	mov	r0, r7
 8008800:	f000 fba4 	bl	8008f4c <__malloc_unlock>
 8008804:	e7a1      	b.n	800874a <_malloc_r+0x22>
 8008806:	6025      	str	r5, [r4, #0]
 8008808:	e7de      	b.n	80087c8 <_malloc_r+0xa0>
 800880a:	bf00      	nop
 800880c:	24000858 	.word	0x24000858

08008810 <__sfputc_r>:
 8008810:	6893      	ldr	r3, [r2, #8]
 8008812:	3b01      	subs	r3, #1
 8008814:	2b00      	cmp	r3, #0
 8008816:	b410      	push	{r4}
 8008818:	6093      	str	r3, [r2, #8]
 800881a:	da08      	bge.n	800882e <__sfputc_r+0x1e>
 800881c:	6994      	ldr	r4, [r2, #24]
 800881e:	42a3      	cmp	r3, r4
 8008820:	db01      	blt.n	8008826 <__sfputc_r+0x16>
 8008822:	290a      	cmp	r1, #10
 8008824:	d103      	bne.n	800882e <__sfputc_r+0x1e>
 8008826:	f85d 4b04 	ldr.w	r4, [sp], #4
 800882a:	f7ff bc31 	b.w	8008090 <__swbuf_r>
 800882e:	6813      	ldr	r3, [r2, #0]
 8008830:	1c58      	adds	r0, r3, #1
 8008832:	6010      	str	r0, [r2, #0]
 8008834:	7019      	strb	r1, [r3, #0]
 8008836:	4608      	mov	r0, r1
 8008838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800883c:	4770      	bx	lr

0800883e <__sfputs_r>:
 800883e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008840:	4606      	mov	r6, r0
 8008842:	460f      	mov	r7, r1
 8008844:	4614      	mov	r4, r2
 8008846:	18d5      	adds	r5, r2, r3
 8008848:	42ac      	cmp	r4, r5
 800884a:	d101      	bne.n	8008850 <__sfputs_r+0x12>
 800884c:	2000      	movs	r0, #0
 800884e:	e007      	b.n	8008860 <__sfputs_r+0x22>
 8008850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008854:	463a      	mov	r2, r7
 8008856:	4630      	mov	r0, r6
 8008858:	f7ff ffda 	bl	8008810 <__sfputc_r>
 800885c:	1c43      	adds	r3, r0, #1
 800885e:	d1f3      	bne.n	8008848 <__sfputs_r+0xa>
 8008860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008864 <_vfiprintf_r>:
 8008864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	460d      	mov	r5, r1
 800886a:	b09d      	sub	sp, #116	; 0x74
 800886c:	4614      	mov	r4, r2
 800886e:	4698      	mov	r8, r3
 8008870:	4606      	mov	r6, r0
 8008872:	b118      	cbz	r0, 800887c <_vfiprintf_r+0x18>
 8008874:	6983      	ldr	r3, [r0, #24]
 8008876:	b90b      	cbnz	r3, 800887c <_vfiprintf_r+0x18>
 8008878:	f7ff fde4 	bl	8008444 <__sinit>
 800887c:	4b89      	ldr	r3, [pc, #548]	; (8008aa4 <_vfiprintf_r+0x240>)
 800887e:	429d      	cmp	r5, r3
 8008880:	d11b      	bne.n	80088ba <_vfiprintf_r+0x56>
 8008882:	6875      	ldr	r5, [r6, #4]
 8008884:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008886:	07d9      	lsls	r1, r3, #31
 8008888:	d405      	bmi.n	8008896 <_vfiprintf_r+0x32>
 800888a:	89ab      	ldrh	r3, [r5, #12]
 800888c:	059a      	lsls	r2, r3, #22
 800888e:	d402      	bmi.n	8008896 <_vfiprintf_r+0x32>
 8008890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008892:	f7ff fe75 	bl	8008580 <__retarget_lock_acquire_recursive>
 8008896:	89ab      	ldrh	r3, [r5, #12]
 8008898:	071b      	lsls	r3, r3, #28
 800889a:	d501      	bpl.n	80088a0 <_vfiprintf_r+0x3c>
 800889c:	692b      	ldr	r3, [r5, #16]
 800889e:	b9eb      	cbnz	r3, 80088dc <_vfiprintf_r+0x78>
 80088a0:	4629      	mov	r1, r5
 80088a2:	4630      	mov	r0, r6
 80088a4:	f7ff fc46 	bl	8008134 <__swsetup_r>
 80088a8:	b1c0      	cbz	r0, 80088dc <_vfiprintf_r+0x78>
 80088aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088ac:	07dc      	lsls	r4, r3, #31
 80088ae:	d50e      	bpl.n	80088ce <_vfiprintf_r+0x6a>
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295
 80088b4:	b01d      	add	sp, #116	; 0x74
 80088b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ba:	4b7b      	ldr	r3, [pc, #492]	; (8008aa8 <_vfiprintf_r+0x244>)
 80088bc:	429d      	cmp	r5, r3
 80088be:	d101      	bne.n	80088c4 <_vfiprintf_r+0x60>
 80088c0:	68b5      	ldr	r5, [r6, #8]
 80088c2:	e7df      	b.n	8008884 <_vfiprintf_r+0x20>
 80088c4:	4b79      	ldr	r3, [pc, #484]	; (8008aac <_vfiprintf_r+0x248>)
 80088c6:	429d      	cmp	r5, r3
 80088c8:	bf08      	it	eq
 80088ca:	68f5      	ldreq	r5, [r6, #12]
 80088cc:	e7da      	b.n	8008884 <_vfiprintf_r+0x20>
 80088ce:	89ab      	ldrh	r3, [r5, #12]
 80088d0:	0598      	lsls	r0, r3, #22
 80088d2:	d4ed      	bmi.n	80088b0 <_vfiprintf_r+0x4c>
 80088d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088d6:	f7ff fe54 	bl	8008582 <__retarget_lock_release_recursive>
 80088da:	e7e9      	b.n	80088b0 <_vfiprintf_r+0x4c>
 80088dc:	2300      	movs	r3, #0
 80088de:	9309      	str	r3, [sp, #36]	; 0x24
 80088e0:	2320      	movs	r3, #32
 80088e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80088ea:	2330      	movs	r3, #48	; 0x30
 80088ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ab0 <_vfiprintf_r+0x24c>
 80088f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088f4:	f04f 0901 	mov.w	r9, #1
 80088f8:	4623      	mov	r3, r4
 80088fa:	469a      	mov	sl, r3
 80088fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008900:	b10a      	cbz	r2, 8008906 <_vfiprintf_r+0xa2>
 8008902:	2a25      	cmp	r2, #37	; 0x25
 8008904:	d1f9      	bne.n	80088fa <_vfiprintf_r+0x96>
 8008906:	ebba 0b04 	subs.w	fp, sl, r4
 800890a:	d00b      	beq.n	8008924 <_vfiprintf_r+0xc0>
 800890c:	465b      	mov	r3, fp
 800890e:	4622      	mov	r2, r4
 8008910:	4629      	mov	r1, r5
 8008912:	4630      	mov	r0, r6
 8008914:	f7ff ff93 	bl	800883e <__sfputs_r>
 8008918:	3001      	adds	r0, #1
 800891a:	f000 80aa 	beq.w	8008a72 <_vfiprintf_r+0x20e>
 800891e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008920:	445a      	add	r2, fp
 8008922:	9209      	str	r2, [sp, #36]	; 0x24
 8008924:	f89a 3000 	ldrb.w	r3, [sl]
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 80a2 	beq.w	8008a72 <_vfiprintf_r+0x20e>
 800892e:	2300      	movs	r3, #0
 8008930:	f04f 32ff 	mov.w	r2, #4294967295
 8008934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008938:	f10a 0a01 	add.w	sl, sl, #1
 800893c:	9304      	str	r3, [sp, #16]
 800893e:	9307      	str	r3, [sp, #28]
 8008940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008944:	931a      	str	r3, [sp, #104]	; 0x68
 8008946:	4654      	mov	r4, sl
 8008948:	2205      	movs	r2, #5
 800894a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800894e:	4858      	ldr	r0, [pc, #352]	; (8008ab0 <_vfiprintf_r+0x24c>)
 8008950:	f7f7 fcc6 	bl	80002e0 <memchr>
 8008954:	9a04      	ldr	r2, [sp, #16]
 8008956:	b9d8      	cbnz	r0, 8008990 <_vfiprintf_r+0x12c>
 8008958:	06d1      	lsls	r1, r2, #27
 800895a:	bf44      	itt	mi
 800895c:	2320      	movmi	r3, #32
 800895e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008962:	0713      	lsls	r3, r2, #28
 8008964:	bf44      	itt	mi
 8008966:	232b      	movmi	r3, #43	; 0x2b
 8008968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800896c:	f89a 3000 	ldrb.w	r3, [sl]
 8008970:	2b2a      	cmp	r3, #42	; 0x2a
 8008972:	d015      	beq.n	80089a0 <_vfiprintf_r+0x13c>
 8008974:	9a07      	ldr	r2, [sp, #28]
 8008976:	4654      	mov	r4, sl
 8008978:	2000      	movs	r0, #0
 800897a:	f04f 0c0a 	mov.w	ip, #10
 800897e:	4621      	mov	r1, r4
 8008980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008984:	3b30      	subs	r3, #48	; 0x30
 8008986:	2b09      	cmp	r3, #9
 8008988:	d94e      	bls.n	8008a28 <_vfiprintf_r+0x1c4>
 800898a:	b1b0      	cbz	r0, 80089ba <_vfiprintf_r+0x156>
 800898c:	9207      	str	r2, [sp, #28]
 800898e:	e014      	b.n	80089ba <_vfiprintf_r+0x156>
 8008990:	eba0 0308 	sub.w	r3, r0, r8
 8008994:	fa09 f303 	lsl.w	r3, r9, r3
 8008998:	4313      	orrs	r3, r2
 800899a:	9304      	str	r3, [sp, #16]
 800899c:	46a2      	mov	sl, r4
 800899e:	e7d2      	b.n	8008946 <_vfiprintf_r+0xe2>
 80089a0:	9b03      	ldr	r3, [sp, #12]
 80089a2:	1d19      	adds	r1, r3, #4
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	9103      	str	r1, [sp, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	bfbb      	ittet	lt
 80089ac:	425b      	neglt	r3, r3
 80089ae:	f042 0202 	orrlt.w	r2, r2, #2
 80089b2:	9307      	strge	r3, [sp, #28]
 80089b4:	9307      	strlt	r3, [sp, #28]
 80089b6:	bfb8      	it	lt
 80089b8:	9204      	strlt	r2, [sp, #16]
 80089ba:	7823      	ldrb	r3, [r4, #0]
 80089bc:	2b2e      	cmp	r3, #46	; 0x2e
 80089be:	d10c      	bne.n	80089da <_vfiprintf_r+0x176>
 80089c0:	7863      	ldrb	r3, [r4, #1]
 80089c2:	2b2a      	cmp	r3, #42	; 0x2a
 80089c4:	d135      	bne.n	8008a32 <_vfiprintf_r+0x1ce>
 80089c6:	9b03      	ldr	r3, [sp, #12]
 80089c8:	1d1a      	adds	r2, r3, #4
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	9203      	str	r2, [sp, #12]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	bfb8      	it	lt
 80089d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80089d6:	3402      	adds	r4, #2
 80089d8:	9305      	str	r3, [sp, #20]
 80089da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ac0 <_vfiprintf_r+0x25c>
 80089de:	7821      	ldrb	r1, [r4, #0]
 80089e0:	2203      	movs	r2, #3
 80089e2:	4650      	mov	r0, sl
 80089e4:	f7f7 fc7c 	bl	80002e0 <memchr>
 80089e8:	b140      	cbz	r0, 80089fc <_vfiprintf_r+0x198>
 80089ea:	2340      	movs	r3, #64	; 0x40
 80089ec:	eba0 000a 	sub.w	r0, r0, sl
 80089f0:	fa03 f000 	lsl.w	r0, r3, r0
 80089f4:	9b04      	ldr	r3, [sp, #16]
 80089f6:	4303      	orrs	r3, r0
 80089f8:	3401      	adds	r4, #1
 80089fa:	9304      	str	r3, [sp, #16]
 80089fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a00:	482c      	ldr	r0, [pc, #176]	; (8008ab4 <_vfiprintf_r+0x250>)
 8008a02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a06:	2206      	movs	r2, #6
 8008a08:	f7f7 fc6a 	bl	80002e0 <memchr>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d03f      	beq.n	8008a90 <_vfiprintf_r+0x22c>
 8008a10:	4b29      	ldr	r3, [pc, #164]	; (8008ab8 <_vfiprintf_r+0x254>)
 8008a12:	bb1b      	cbnz	r3, 8008a5c <_vfiprintf_r+0x1f8>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	3307      	adds	r3, #7
 8008a18:	f023 0307 	bic.w	r3, r3, #7
 8008a1c:	3308      	adds	r3, #8
 8008a1e:	9303      	str	r3, [sp, #12]
 8008a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a22:	443b      	add	r3, r7
 8008a24:	9309      	str	r3, [sp, #36]	; 0x24
 8008a26:	e767      	b.n	80088f8 <_vfiprintf_r+0x94>
 8008a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	2001      	movs	r0, #1
 8008a30:	e7a5      	b.n	800897e <_vfiprintf_r+0x11a>
 8008a32:	2300      	movs	r3, #0
 8008a34:	3401      	adds	r4, #1
 8008a36:	9305      	str	r3, [sp, #20]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	f04f 0c0a 	mov.w	ip, #10
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a44:	3a30      	subs	r2, #48	; 0x30
 8008a46:	2a09      	cmp	r2, #9
 8008a48:	d903      	bls.n	8008a52 <_vfiprintf_r+0x1ee>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d0c5      	beq.n	80089da <_vfiprintf_r+0x176>
 8008a4e:	9105      	str	r1, [sp, #20]
 8008a50:	e7c3      	b.n	80089da <_vfiprintf_r+0x176>
 8008a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a56:	4604      	mov	r4, r0
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e7f0      	b.n	8008a3e <_vfiprintf_r+0x1da>
 8008a5c:	ab03      	add	r3, sp, #12
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	462a      	mov	r2, r5
 8008a62:	4b16      	ldr	r3, [pc, #88]	; (8008abc <_vfiprintf_r+0x258>)
 8008a64:	a904      	add	r1, sp, #16
 8008a66:	4630      	mov	r0, r6
 8008a68:	f3af 8000 	nop.w
 8008a6c:	4607      	mov	r7, r0
 8008a6e:	1c78      	adds	r0, r7, #1
 8008a70:	d1d6      	bne.n	8008a20 <_vfiprintf_r+0x1bc>
 8008a72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a74:	07d9      	lsls	r1, r3, #31
 8008a76:	d405      	bmi.n	8008a84 <_vfiprintf_r+0x220>
 8008a78:	89ab      	ldrh	r3, [r5, #12]
 8008a7a:	059a      	lsls	r2, r3, #22
 8008a7c:	d402      	bmi.n	8008a84 <_vfiprintf_r+0x220>
 8008a7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a80:	f7ff fd7f 	bl	8008582 <__retarget_lock_release_recursive>
 8008a84:	89ab      	ldrh	r3, [r5, #12]
 8008a86:	065b      	lsls	r3, r3, #25
 8008a88:	f53f af12 	bmi.w	80088b0 <_vfiprintf_r+0x4c>
 8008a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a8e:	e711      	b.n	80088b4 <_vfiprintf_r+0x50>
 8008a90:	ab03      	add	r3, sp, #12
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	462a      	mov	r2, r5
 8008a96:	4b09      	ldr	r3, [pc, #36]	; (8008abc <_vfiprintf_r+0x258>)
 8008a98:	a904      	add	r1, sp, #16
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f000 f880 	bl	8008ba0 <_printf_i>
 8008aa0:	e7e4      	b.n	8008a6c <_vfiprintf_r+0x208>
 8008aa2:	bf00      	nop
 8008aa4:	08009018 	.word	0x08009018
 8008aa8:	08009038 	.word	0x08009038
 8008aac:	08008ff8 	.word	0x08008ff8
 8008ab0:	08009058 	.word	0x08009058
 8008ab4:	08009062 	.word	0x08009062
 8008ab8:	00000000 	.word	0x00000000
 8008abc:	0800883f 	.word	0x0800883f
 8008ac0:	0800905e 	.word	0x0800905e

08008ac4 <_printf_common>:
 8008ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac8:	4616      	mov	r6, r2
 8008aca:	4699      	mov	r9, r3
 8008acc:	688a      	ldr	r2, [r1, #8]
 8008ace:	690b      	ldr	r3, [r1, #16]
 8008ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	bfb8      	it	lt
 8008ad8:	4613      	movlt	r3, r2
 8008ada:	6033      	str	r3, [r6, #0]
 8008adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	b10a      	cbz	r2, 8008aea <_printf_common+0x26>
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	6033      	str	r3, [r6, #0]
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	0699      	lsls	r1, r3, #26
 8008aee:	bf42      	ittt	mi
 8008af0:	6833      	ldrmi	r3, [r6, #0]
 8008af2:	3302      	addmi	r3, #2
 8008af4:	6033      	strmi	r3, [r6, #0]
 8008af6:	6825      	ldr	r5, [r4, #0]
 8008af8:	f015 0506 	ands.w	r5, r5, #6
 8008afc:	d106      	bne.n	8008b0c <_printf_common+0x48>
 8008afe:	f104 0a19 	add.w	sl, r4, #25
 8008b02:	68e3      	ldr	r3, [r4, #12]
 8008b04:	6832      	ldr	r2, [r6, #0]
 8008b06:	1a9b      	subs	r3, r3, r2
 8008b08:	42ab      	cmp	r3, r5
 8008b0a:	dc26      	bgt.n	8008b5a <_printf_common+0x96>
 8008b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b10:	1e13      	subs	r3, r2, #0
 8008b12:	6822      	ldr	r2, [r4, #0]
 8008b14:	bf18      	it	ne
 8008b16:	2301      	movne	r3, #1
 8008b18:	0692      	lsls	r2, r2, #26
 8008b1a:	d42b      	bmi.n	8008b74 <_printf_common+0xb0>
 8008b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b20:	4649      	mov	r1, r9
 8008b22:	4638      	mov	r0, r7
 8008b24:	47c0      	blx	r8
 8008b26:	3001      	adds	r0, #1
 8008b28:	d01e      	beq.n	8008b68 <_printf_common+0xa4>
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	68e5      	ldr	r5, [r4, #12]
 8008b2e:	6832      	ldr	r2, [r6, #0]
 8008b30:	f003 0306 	and.w	r3, r3, #6
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	bf08      	it	eq
 8008b38:	1aad      	subeq	r5, r5, r2
 8008b3a:	68a3      	ldr	r3, [r4, #8]
 8008b3c:	6922      	ldr	r2, [r4, #16]
 8008b3e:	bf0c      	ite	eq
 8008b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b44:	2500      	movne	r5, #0
 8008b46:	4293      	cmp	r3, r2
 8008b48:	bfc4      	itt	gt
 8008b4a:	1a9b      	subgt	r3, r3, r2
 8008b4c:	18ed      	addgt	r5, r5, r3
 8008b4e:	2600      	movs	r6, #0
 8008b50:	341a      	adds	r4, #26
 8008b52:	42b5      	cmp	r5, r6
 8008b54:	d11a      	bne.n	8008b8c <_printf_common+0xc8>
 8008b56:	2000      	movs	r0, #0
 8008b58:	e008      	b.n	8008b6c <_printf_common+0xa8>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	4652      	mov	r2, sl
 8008b5e:	4649      	mov	r1, r9
 8008b60:	4638      	mov	r0, r7
 8008b62:	47c0      	blx	r8
 8008b64:	3001      	adds	r0, #1
 8008b66:	d103      	bne.n	8008b70 <_printf_common+0xac>
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b70:	3501      	adds	r5, #1
 8008b72:	e7c6      	b.n	8008b02 <_printf_common+0x3e>
 8008b74:	18e1      	adds	r1, r4, r3
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	2030      	movs	r0, #48	; 0x30
 8008b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b7e:	4422      	add	r2, r4
 8008b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b88:	3302      	adds	r3, #2
 8008b8a:	e7c7      	b.n	8008b1c <_printf_common+0x58>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	4622      	mov	r2, r4
 8008b90:	4649      	mov	r1, r9
 8008b92:	4638      	mov	r0, r7
 8008b94:	47c0      	blx	r8
 8008b96:	3001      	adds	r0, #1
 8008b98:	d0e6      	beq.n	8008b68 <_printf_common+0xa4>
 8008b9a:	3601      	adds	r6, #1
 8008b9c:	e7d9      	b.n	8008b52 <_printf_common+0x8e>
	...

08008ba0 <_printf_i>:
 8008ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba4:	7e0f      	ldrb	r7, [r1, #24]
 8008ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ba8:	2f78      	cmp	r7, #120	; 0x78
 8008baa:	4691      	mov	r9, r2
 8008bac:	4680      	mov	r8, r0
 8008bae:	460c      	mov	r4, r1
 8008bb0:	469a      	mov	sl, r3
 8008bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bb6:	d807      	bhi.n	8008bc8 <_printf_i+0x28>
 8008bb8:	2f62      	cmp	r7, #98	; 0x62
 8008bba:	d80a      	bhi.n	8008bd2 <_printf_i+0x32>
 8008bbc:	2f00      	cmp	r7, #0
 8008bbe:	f000 80d8 	beq.w	8008d72 <_printf_i+0x1d2>
 8008bc2:	2f58      	cmp	r7, #88	; 0x58
 8008bc4:	f000 80a3 	beq.w	8008d0e <_printf_i+0x16e>
 8008bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bd0:	e03a      	b.n	8008c48 <_printf_i+0xa8>
 8008bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bd6:	2b15      	cmp	r3, #21
 8008bd8:	d8f6      	bhi.n	8008bc8 <_printf_i+0x28>
 8008bda:	a101      	add	r1, pc, #4	; (adr r1, 8008be0 <_printf_i+0x40>)
 8008bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008be0:	08008c39 	.word	0x08008c39
 8008be4:	08008c4d 	.word	0x08008c4d
 8008be8:	08008bc9 	.word	0x08008bc9
 8008bec:	08008bc9 	.word	0x08008bc9
 8008bf0:	08008bc9 	.word	0x08008bc9
 8008bf4:	08008bc9 	.word	0x08008bc9
 8008bf8:	08008c4d 	.word	0x08008c4d
 8008bfc:	08008bc9 	.word	0x08008bc9
 8008c00:	08008bc9 	.word	0x08008bc9
 8008c04:	08008bc9 	.word	0x08008bc9
 8008c08:	08008bc9 	.word	0x08008bc9
 8008c0c:	08008d59 	.word	0x08008d59
 8008c10:	08008c7d 	.word	0x08008c7d
 8008c14:	08008d3b 	.word	0x08008d3b
 8008c18:	08008bc9 	.word	0x08008bc9
 8008c1c:	08008bc9 	.word	0x08008bc9
 8008c20:	08008d7b 	.word	0x08008d7b
 8008c24:	08008bc9 	.word	0x08008bc9
 8008c28:	08008c7d 	.word	0x08008c7d
 8008c2c:	08008bc9 	.word	0x08008bc9
 8008c30:	08008bc9 	.word	0x08008bc9
 8008c34:	08008d43 	.word	0x08008d43
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	1d1a      	adds	r2, r3, #4
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	602a      	str	r2, [r5, #0]
 8008c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e0a3      	b.n	8008d94 <_printf_i+0x1f4>
 8008c4c:	6820      	ldr	r0, [r4, #0]
 8008c4e:	6829      	ldr	r1, [r5, #0]
 8008c50:	0606      	lsls	r6, r0, #24
 8008c52:	f101 0304 	add.w	r3, r1, #4
 8008c56:	d50a      	bpl.n	8008c6e <_printf_i+0xce>
 8008c58:	680e      	ldr	r6, [r1, #0]
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	2e00      	cmp	r6, #0
 8008c5e:	da03      	bge.n	8008c68 <_printf_i+0xc8>
 8008c60:	232d      	movs	r3, #45	; 0x2d
 8008c62:	4276      	negs	r6, r6
 8008c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c68:	485e      	ldr	r0, [pc, #376]	; (8008de4 <_printf_i+0x244>)
 8008c6a:	230a      	movs	r3, #10
 8008c6c:	e019      	b.n	8008ca2 <_printf_i+0x102>
 8008c6e:	680e      	ldr	r6, [r1, #0]
 8008c70:	602b      	str	r3, [r5, #0]
 8008c72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c76:	bf18      	it	ne
 8008c78:	b236      	sxthne	r6, r6
 8008c7a:	e7ef      	b.n	8008c5c <_printf_i+0xbc>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	6820      	ldr	r0, [r4, #0]
 8008c80:	1d19      	adds	r1, r3, #4
 8008c82:	6029      	str	r1, [r5, #0]
 8008c84:	0601      	lsls	r1, r0, #24
 8008c86:	d501      	bpl.n	8008c8c <_printf_i+0xec>
 8008c88:	681e      	ldr	r6, [r3, #0]
 8008c8a:	e002      	b.n	8008c92 <_printf_i+0xf2>
 8008c8c:	0646      	lsls	r6, r0, #25
 8008c8e:	d5fb      	bpl.n	8008c88 <_printf_i+0xe8>
 8008c90:	881e      	ldrh	r6, [r3, #0]
 8008c92:	4854      	ldr	r0, [pc, #336]	; (8008de4 <_printf_i+0x244>)
 8008c94:	2f6f      	cmp	r7, #111	; 0x6f
 8008c96:	bf0c      	ite	eq
 8008c98:	2308      	moveq	r3, #8
 8008c9a:	230a      	movne	r3, #10
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ca2:	6865      	ldr	r5, [r4, #4]
 8008ca4:	60a5      	str	r5, [r4, #8]
 8008ca6:	2d00      	cmp	r5, #0
 8008ca8:	bfa2      	ittt	ge
 8008caa:	6821      	ldrge	r1, [r4, #0]
 8008cac:	f021 0104 	bicge.w	r1, r1, #4
 8008cb0:	6021      	strge	r1, [r4, #0]
 8008cb2:	b90e      	cbnz	r6, 8008cb8 <_printf_i+0x118>
 8008cb4:	2d00      	cmp	r5, #0
 8008cb6:	d04d      	beq.n	8008d54 <_printf_i+0x1b4>
 8008cb8:	4615      	mov	r5, r2
 8008cba:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cbe:	fb03 6711 	mls	r7, r3, r1, r6
 8008cc2:	5dc7      	ldrb	r7, [r0, r7]
 8008cc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cc8:	4637      	mov	r7, r6
 8008cca:	42bb      	cmp	r3, r7
 8008ccc:	460e      	mov	r6, r1
 8008cce:	d9f4      	bls.n	8008cba <_printf_i+0x11a>
 8008cd0:	2b08      	cmp	r3, #8
 8008cd2:	d10b      	bne.n	8008cec <_printf_i+0x14c>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	07de      	lsls	r6, r3, #31
 8008cd8:	d508      	bpl.n	8008cec <_printf_i+0x14c>
 8008cda:	6923      	ldr	r3, [r4, #16]
 8008cdc:	6861      	ldr	r1, [r4, #4]
 8008cde:	4299      	cmp	r1, r3
 8008ce0:	bfde      	ittt	le
 8008ce2:	2330      	movle	r3, #48	; 0x30
 8008ce4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ce8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cec:	1b52      	subs	r2, r2, r5
 8008cee:	6122      	str	r2, [r4, #16]
 8008cf0:	f8cd a000 	str.w	sl, [sp]
 8008cf4:	464b      	mov	r3, r9
 8008cf6:	aa03      	add	r2, sp, #12
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	4640      	mov	r0, r8
 8008cfc:	f7ff fee2 	bl	8008ac4 <_printf_common>
 8008d00:	3001      	adds	r0, #1
 8008d02:	d14c      	bne.n	8008d9e <_printf_i+0x1fe>
 8008d04:	f04f 30ff 	mov.w	r0, #4294967295
 8008d08:	b004      	add	sp, #16
 8008d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0e:	4835      	ldr	r0, [pc, #212]	; (8008de4 <_printf_i+0x244>)
 8008d10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d14:	6829      	ldr	r1, [r5, #0]
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d1c:	6029      	str	r1, [r5, #0]
 8008d1e:	061d      	lsls	r5, r3, #24
 8008d20:	d514      	bpl.n	8008d4c <_printf_i+0x1ac>
 8008d22:	07df      	lsls	r7, r3, #31
 8008d24:	bf44      	itt	mi
 8008d26:	f043 0320 	orrmi.w	r3, r3, #32
 8008d2a:	6023      	strmi	r3, [r4, #0]
 8008d2c:	b91e      	cbnz	r6, 8008d36 <_printf_i+0x196>
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	f023 0320 	bic.w	r3, r3, #32
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	2310      	movs	r3, #16
 8008d38:	e7b0      	b.n	8008c9c <_printf_i+0xfc>
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	f043 0320 	orr.w	r3, r3, #32
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	2378      	movs	r3, #120	; 0x78
 8008d44:	4828      	ldr	r0, [pc, #160]	; (8008de8 <_printf_i+0x248>)
 8008d46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d4a:	e7e3      	b.n	8008d14 <_printf_i+0x174>
 8008d4c:	0659      	lsls	r1, r3, #25
 8008d4e:	bf48      	it	mi
 8008d50:	b2b6      	uxthmi	r6, r6
 8008d52:	e7e6      	b.n	8008d22 <_printf_i+0x182>
 8008d54:	4615      	mov	r5, r2
 8008d56:	e7bb      	b.n	8008cd0 <_printf_i+0x130>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	6826      	ldr	r6, [r4, #0]
 8008d5c:	6961      	ldr	r1, [r4, #20]
 8008d5e:	1d18      	adds	r0, r3, #4
 8008d60:	6028      	str	r0, [r5, #0]
 8008d62:	0635      	lsls	r5, r6, #24
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	d501      	bpl.n	8008d6c <_printf_i+0x1cc>
 8008d68:	6019      	str	r1, [r3, #0]
 8008d6a:	e002      	b.n	8008d72 <_printf_i+0x1d2>
 8008d6c:	0670      	lsls	r0, r6, #25
 8008d6e:	d5fb      	bpl.n	8008d68 <_printf_i+0x1c8>
 8008d70:	8019      	strh	r1, [r3, #0]
 8008d72:	2300      	movs	r3, #0
 8008d74:	6123      	str	r3, [r4, #16]
 8008d76:	4615      	mov	r5, r2
 8008d78:	e7ba      	b.n	8008cf0 <_printf_i+0x150>
 8008d7a:	682b      	ldr	r3, [r5, #0]
 8008d7c:	1d1a      	adds	r2, r3, #4
 8008d7e:	602a      	str	r2, [r5, #0]
 8008d80:	681d      	ldr	r5, [r3, #0]
 8008d82:	6862      	ldr	r2, [r4, #4]
 8008d84:	2100      	movs	r1, #0
 8008d86:	4628      	mov	r0, r5
 8008d88:	f7f7 faaa 	bl	80002e0 <memchr>
 8008d8c:	b108      	cbz	r0, 8008d92 <_printf_i+0x1f2>
 8008d8e:	1b40      	subs	r0, r0, r5
 8008d90:	6060      	str	r0, [r4, #4]
 8008d92:	6863      	ldr	r3, [r4, #4]
 8008d94:	6123      	str	r3, [r4, #16]
 8008d96:	2300      	movs	r3, #0
 8008d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d9c:	e7a8      	b.n	8008cf0 <_printf_i+0x150>
 8008d9e:	6923      	ldr	r3, [r4, #16]
 8008da0:	462a      	mov	r2, r5
 8008da2:	4649      	mov	r1, r9
 8008da4:	4640      	mov	r0, r8
 8008da6:	47d0      	blx	sl
 8008da8:	3001      	adds	r0, #1
 8008daa:	d0ab      	beq.n	8008d04 <_printf_i+0x164>
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	079b      	lsls	r3, r3, #30
 8008db0:	d413      	bmi.n	8008dda <_printf_i+0x23a>
 8008db2:	68e0      	ldr	r0, [r4, #12]
 8008db4:	9b03      	ldr	r3, [sp, #12]
 8008db6:	4298      	cmp	r0, r3
 8008db8:	bfb8      	it	lt
 8008dba:	4618      	movlt	r0, r3
 8008dbc:	e7a4      	b.n	8008d08 <_printf_i+0x168>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	4632      	mov	r2, r6
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	47d0      	blx	sl
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d09b      	beq.n	8008d04 <_printf_i+0x164>
 8008dcc:	3501      	adds	r5, #1
 8008dce:	68e3      	ldr	r3, [r4, #12]
 8008dd0:	9903      	ldr	r1, [sp, #12]
 8008dd2:	1a5b      	subs	r3, r3, r1
 8008dd4:	42ab      	cmp	r3, r5
 8008dd6:	dcf2      	bgt.n	8008dbe <_printf_i+0x21e>
 8008dd8:	e7eb      	b.n	8008db2 <_printf_i+0x212>
 8008dda:	2500      	movs	r5, #0
 8008ddc:	f104 0619 	add.w	r6, r4, #25
 8008de0:	e7f5      	b.n	8008dce <_printf_i+0x22e>
 8008de2:	bf00      	nop
 8008de4:	08009069 	.word	0x08009069
 8008de8:	0800907a 	.word	0x0800907a

08008dec <_sbrk_r>:
 8008dec:	b538      	push	{r3, r4, r5, lr}
 8008dee:	4d06      	ldr	r5, [pc, #24]	; (8008e08 <_sbrk_r+0x1c>)
 8008df0:	2300      	movs	r3, #0
 8008df2:	4604      	mov	r4, r0
 8008df4:	4608      	mov	r0, r1
 8008df6:	602b      	str	r3, [r5, #0]
 8008df8:	f7f8 fe8e 	bl	8001b18 <_sbrk>
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	d102      	bne.n	8008e06 <_sbrk_r+0x1a>
 8008e00:	682b      	ldr	r3, [r5, #0]
 8008e02:	b103      	cbz	r3, 8008e06 <_sbrk_r+0x1a>
 8008e04:	6023      	str	r3, [r4, #0]
 8008e06:	bd38      	pop	{r3, r4, r5, pc}
 8008e08:	24000860 	.word	0x24000860

08008e0c <__sread>:
 8008e0c:	b510      	push	{r4, lr}
 8008e0e:	460c      	mov	r4, r1
 8008e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e14:	f000 f8a0 	bl	8008f58 <_read_r>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	bfab      	itete	ge
 8008e1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8008e20:	181b      	addge	r3, r3, r0
 8008e22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e26:	bfac      	ite	ge
 8008e28:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e2a:	81a3      	strhlt	r3, [r4, #12]
 8008e2c:	bd10      	pop	{r4, pc}

08008e2e <__swrite>:
 8008e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e32:	461f      	mov	r7, r3
 8008e34:	898b      	ldrh	r3, [r1, #12]
 8008e36:	05db      	lsls	r3, r3, #23
 8008e38:	4605      	mov	r5, r0
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	4616      	mov	r6, r2
 8008e3e:	d505      	bpl.n	8008e4c <__swrite+0x1e>
 8008e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e44:	2302      	movs	r3, #2
 8008e46:	2200      	movs	r2, #0
 8008e48:	f000 f868 	bl	8008f1c <_lseek_r>
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e56:	81a3      	strh	r3, [r4, #12]
 8008e58:	4632      	mov	r2, r6
 8008e5a:	463b      	mov	r3, r7
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e62:	f000 b817 	b.w	8008e94 <_write_r>

08008e66 <__sseek>:
 8008e66:	b510      	push	{r4, lr}
 8008e68:	460c      	mov	r4, r1
 8008e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e6e:	f000 f855 	bl	8008f1c <_lseek_r>
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	bf15      	itete	ne
 8008e78:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e82:	81a3      	strheq	r3, [r4, #12]
 8008e84:	bf18      	it	ne
 8008e86:	81a3      	strhne	r3, [r4, #12]
 8008e88:	bd10      	pop	{r4, pc}

08008e8a <__sclose>:
 8008e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e8e:	f000 b813 	b.w	8008eb8 <_close_r>
	...

08008e94 <_write_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4d07      	ldr	r5, [pc, #28]	; (8008eb4 <_write_r+0x20>)
 8008e98:	4604      	mov	r4, r0
 8008e9a:	4608      	mov	r0, r1
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	602a      	str	r2, [r5, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f7f8 fde7 	bl	8001a76 <_write>
 8008ea8:	1c43      	adds	r3, r0, #1
 8008eaa:	d102      	bne.n	8008eb2 <_write_r+0x1e>
 8008eac:	682b      	ldr	r3, [r5, #0]
 8008eae:	b103      	cbz	r3, 8008eb2 <_write_r+0x1e>
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	bd38      	pop	{r3, r4, r5, pc}
 8008eb4:	24000860 	.word	0x24000860

08008eb8 <_close_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4d06      	ldr	r5, [pc, #24]	; (8008ed4 <_close_r+0x1c>)
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	4608      	mov	r0, r1
 8008ec2:	602b      	str	r3, [r5, #0]
 8008ec4:	f7f8 fdf3 	bl	8001aae <_close>
 8008ec8:	1c43      	adds	r3, r0, #1
 8008eca:	d102      	bne.n	8008ed2 <_close_r+0x1a>
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	b103      	cbz	r3, 8008ed2 <_close_r+0x1a>
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	24000860 	.word	0x24000860

08008ed8 <_fstat_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d07      	ldr	r5, [pc, #28]	; (8008ef8 <_fstat_r+0x20>)
 8008edc:	2300      	movs	r3, #0
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	602b      	str	r3, [r5, #0]
 8008ee6:	f7f8 fdee 	bl	8001ac6 <_fstat>
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	d102      	bne.n	8008ef4 <_fstat_r+0x1c>
 8008eee:	682b      	ldr	r3, [r5, #0]
 8008ef0:	b103      	cbz	r3, 8008ef4 <_fstat_r+0x1c>
 8008ef2:	6023      	str	r3, [r4, #0]
 8008ef4:	bd38      	pop	{r3, r4, r5, pc}
 8008ef6:	bf00      	nop
 8008ef8:	24000860 	.word	0x24000860

08008efc <_isatty_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4d06      	ldr	r5, [pc, #24]	; (8008f18 <_isatty_r+0x1c>)
 8008f00:	2300      	movs	r3, #0
 8008f02:	4604      	mov	r4, r0
 8008f04:	4608      	mov	r0, r1
 8008f06:	602b      	str	r3, [r5, #0]
 8008f08:	f7f8 fded 	bl	8001ae6 <_isatty>
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d102      	bne.n	8008f16 <_isatty_r+0x1a>
 8008f10:	682b      	ldr	r3, [r5, #0]
 8008f12:	b103      	cbz	r3, 8008f16 <_isatty_r+0x1a>
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	bd38      	pop	{r3, r4, r5, pc}
 8008f18:	24000860 	.word	0x24000860

08008f1c <_lseek_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4d07      	ldr	r5, [pc, #28]	; (8008f3c <_lseek_r+0x20>)
 8008f20:	4604      	mov	r4, r0
 8008f22:	4608      	mov	r0, r1
 8008f24:	4611      	mov	r1, r2
 8008f26:	2200      	movs	r2, #0
 8008f28:	602a      	str	r2, [r5, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	f7f8 fde6 	bl	8001afc <_lseek>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	d102      	bne.n	8008f3a <_lseek_r+0x1e>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	b103      	cbz	r3, 8008f3a <_lseek_r+0x1e>
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	24000860 	.word	0x24000860

08008f40 <__malloc_lock>:
 8008f40:	4801      	ldr	r0, [pc, #4]	; (8008f48 <__malloc_lock+0x8>)
 8008f42:	f7ff bb1d 	b.w	8008580 <__retarget_lock_acquire_recursive>
 8008f46:	bf00      	nop
 8008f48:	24000854 	.word	0x24000854

08008f4c <__malloc_unlock>:
 8008f4c:	4801      	ldr	r0, [pc, #4]	; (8008f54 <__malloc_unlock+0x8>)
 8008f4e:	f7ff bb18 	b.w	8008582 <__retarget_lock_release_recursive>
 8008f52:	bf00      	nop
 8008f54:	24000854 	.word	0x24000854

08008f58 <_read_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	4d07      	ldr	r5, [pc, #28]	; (8008f78 <_read_r+0x20>)
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	4608      	mov	r0, r1
 8008f60:	4611      	mov	r1, r2
 8008f62:	2200      	movs	r2, #0
 8008f64:	602a      	str	r2, [r5, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	f7f8 fd68 	bl	8001a3c <_read>
 8008f6c:	1c43      	adds	r3, r0, #1
 8008f6e:	d102      	bne.n	8008f76 <_read_r+0x1e>
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	b103      	cbz	r3, 8008f76 <_read_r+0x1e>
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	bd38      	pop	{r3, r4, r5, pc}
 8008f78:	24000860 	.word	0x24000860

08008f7c <_init>:
 8008f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7e:	bf00      	nop
 8008f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f82:	bc08      	pop	{r3}
 8008f84:	469e      	mov	lr, r3
 8008f86:	4770      	bx	lr

08008f88 <_fini>:
 8008f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8a:	bf00      	nop
 8008f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8e:	bc08      	pop	{r3}
 8008f90:	469e      	mov	lr, r3
 8008f92:	4770      	bx	lr
