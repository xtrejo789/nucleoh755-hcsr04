
Nav_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000871c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080089bc  080089bc  000189bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ab4  08008ab4  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  08008ab4  08008ab4  00018ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008abc  08008abc  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008abc  08008abc  00018abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ac0  08008ac0  00018ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08008ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000074  08008b38  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d4  08008b98  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000730  24000134  08008bf8  00020134  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000864  08008bf8  00020864  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020ab4  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000345d  00000000  00000000  00040c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016f0  00000000  00000000  00044078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000015a8  00000000  00000000  00045768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d6f3  00000000  00000000  00046d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ca85  00000000  00000000  00084403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00191835  00000000  00000000  000a0e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002326bd  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006a34  00000000  00000000  00232710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080089a4 	.word	0x080089a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	080089a4 	.word	0x080089a4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <sr04_init>:
#include "hcsr04.h"
#define DISTANCE_LIMIT 5000

void sr04_init(sr04_t *sr04_struct){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  // Enable trigger pin
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6818      	ldr	r0, [r3, #0]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	889b      	ldrh	r3, [r3, #4]
 80007c0:	2200      	movs	r2, #0
 80007c2:	4619      	mov	r1, r3
 80007c4:	f001 fed6 	bl	8002574 <HAL_GPIO_WritePin>
  // Set input capture edge to rising
  __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d10a      	bne.n	80007e6 <sr04_init+0x36>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6a1a      	ldr	r2, [r3, #32]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f022 020a 	bic.w	r2, r2, #10
 80007e2:	621a      	str	r2, [r3, #32]
 80007e4:	e027      	b.n	8000836 <sr04_init+0x86>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	899b      	ldrh	r3, [r3, #12]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d10a      	bne.n	8000804 <sr04_init+0x54>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6a1b      	ldr	r3, [r3, #32]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	6892      	ldr	r2, [r2, #8]
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000800:	6213      	str	r3, [r2, #32]
 8000802:	e018      	b.n	8000836 <sr04_init+0x86>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	899b      	ldrh	r3, [r3, #12]
 8000808:	2b08      	cmp	r3, #8
 800080a:	d10a      	bne.n	8000822 <sr04_init+0x72>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	6a1b      	ldr	r3, [r3, #32]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	6892      	ldr	r2, [r2, #8]
 8000818:	6812      	ldr	r2, [r2, #0]
 800081a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800081e:	6213      	str	r3, [r2, #32]
 8000820:	e009      	b.n	8000836 <sr04_init+0x86>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	6a1b      	ldr	r3, [r3, #32]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	6892      	ldr	r2, [r2, #8]
 800082e:	6812      	ldr	r2, [r2, #0]
 8000830:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8000834:	6213      	str	r3, [r2, #32]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	899b      	ldrh	r3, [r3, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d108      	bne.n	8000850 <sr04_init+0xa0>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	6a12      	ldr	r2, [r2, #32]
 800084c:	621a      	str	r2, [r3, #32]
 800084e:	e021      	b.n	8000894 <sr04_init+0xe4>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	899b      	ldrh	r3, [r3, #12]
 8000854:	2b04      	cmp	r3, #4
 8000856:	d108      	bne.n	800086a <sr04_init+0xba>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	6892      	ldr	r2, [r2, #8]
 8000862:	6812      	ldr	r2, [r2, #0]
 8000864:	6a1b      	ldr	r3, [r3, #32]
 8000866:	6213      	str	r3, [r2, #32]
 8000868:	e014      	b.n	8000894 <sr04_init+0xe4>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	899b      	ldrh	r3, [r3, #12]
 800086e:	2b08      	cmp	r3, #8
 8000870:	d108      	bne.n	8000884 <sr04_init+0xd4>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	6892      	ldr	r2, [r2, #8]
 800087c:	6812      	ldr	r2, [r2, #0]
 800087e:	6a1b      	ldr	r3, [r3, #32]
 8000880:	6213      	str	r3, [r2, #32]
 8000882:	e007      	b.n	8000894 <sr04_init+0xe4>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	6892      	ldr	r2, [r2, #8]
 800088e:	6812      	ldr	r2, [r2, #0]
 8000890:	6a1b      	ldr	r3, [r3, #32]
 8000892:	6213      	str	r3, [r2, #32]
  // Set capture flag to 0
  sr04_struct->capture_flag = 0;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	739a      	strb	r2, [r3, #14]
  // Enable echo pin
  HAL_TIM_IC_Start_IT(sr04_struct->echo_htim, sr04_struct->echo_channel);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	899b      	ldrh	r3, [r3, #12]
 80008a2:	4619      	mov	r1, r3
 80008a4:	4610      	mov	r0, r2
 80008a6:	f004 fccd 	bl	8005244 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(sr04_struct->echo_htim);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f004 fbee 	bl	8005090 <HAL_TIM_Base_Start_IT>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <sr04_trigger>:

void sr04_trigger(sr04_t *sr04_struct){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  // Send pulse to trigger pin
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_SET);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6818      	ldr	r0, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	889b      	ldrh	r3, [r3, #4]
 80008cc:	2201      	movs	r2, #1
 80008ce:	4619      	mov	r1, r3
 80008d0:	f001 fe50 	bl	8002574 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f000 ff25 	bl	8001724 <HAL_Delay>
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	889b      	ldrh	r3, [r3, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	4619      	mov	r1, r3
 80008e6:	f001 fe45 	bl	8002574 <HAL_GPIO_WritePin>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008fe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000900:	bf00      	nop
 8000902:	4b37      	ldr	r3, [pc, #220]	; (80009e0 <main+0xec>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800090a:	2b00      	cmp	r3, #0
 800090c:	d004      	beq.n	8000918 <main+0x24>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	1e5a      	subs	r2, r3, #1
 8000912:	607a      	str	r2, [r7, #4]
 8000914:	2b00      	cmp	r3, #0
 8000916:	dcf4      	bgt.n	8000902 <main+0xe>
  if ( timeout < 0 )
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	da01      	bge.n	8000922 <main+0x2e>
  {
  Error_Handler();
 800091e:	f000 fb05 	bl	8000f2c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000922:	f000 fe6d 	bl	8001600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000926:	f000 f867 	bl	80009f8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <main+0xec>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	4a2b      	ldr	r2, [pc, #172]	; (80009e0 <main+0xec>)
 8000932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <main+0xec>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fe47 	bl	80025dc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800094e:	2100      	movs	r1, #0
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fe5d 	bl	8002610 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800095a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800095c:	bf00      	nop
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <main+0xec>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000966:	2b00      	cmp	r3, #0
 8000968:	d104      	bne.n	8000974 <main+0x80>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	1e5a      	subs	r2, r3, #1
 800096e:	607a      	str	r2, [r7, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	dcf4      	bgt.n	800095e <main+0x6a>
if ( timeout < 0 )
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	da01      	bge.n	800097e <main+0x8a>
{
Error_Handler();
 800097a:	f000 fad7 	bl	8000f2c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097e:	f000 f9f7 	bl	8000d70 <MX_GPIO_Init>
  MX_ETH_Init();
 8000982:	f000 f8b5 	bl	8000af0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000986:	f000 f975 	bl	8000c74 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800098a:	f000 f9bf 	bl	8000d0c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800098e:	f000 f8fb 	bl	8000b88 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  printf("Initializing...\r\n");
 8000992:	4814      	ldr	r0, [pc, #80]	; (80009e4 <main+0xf0>)
 8000994:	f007 f888 	bl	8007aa8 <puts>
  sr04.trig_port = GPIOB;
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <main+0xf4>)
 800099a:	4a14      	ldr	r2, [pc, #80]	; (80009ec <main+0xf8>)
 800099c:	601a      	str	r2, [r3, #0]
  sr04.trig_pin = GPIO_PIN_7;
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <main+0xf4>)
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	809a      	strh	r2, [r3, #4]
  sr04.echo_htim = &htim1;
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <main+0xf4>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <main+0xfc>)
 80009a8:	609a      	str	r2, [r3, #8]
  sr04.echo_channel = TIM_CHANNEL_1;
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <main+0xf4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	819a      	strh	r2, [r3, #12]
  sr04_init(&sr04);
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <main+0xf4>)
 80009b2:	f7ff fefd 	bl	80007b0 <sr04_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	sr04_trigger(&sr04);
 80009b6:	480c      	ldr	r0, [pc, #48]	; (80009e8 <main+0xf4>)
 80009b8:	f7ff ff80 	bl	80008bc <sr04_trigger>
	HAL_Delay(100);
 80009bc:	2064      	movs	r0, #100	; 0x64
 80009be:	f000 feb1 	bl	8001724 <HAL_Delay>
	printf("Distance: %lu mm\r\n", sr04.distance);
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <main+0xf4>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	4619      	mov	r1, r3
 80009c8:	480a      	ldr	r0, [pc, #40]	; (80009f4 <main+0x100>)
 80009ca:	f006 ffe7 	bl	800799c <iprintf>
	// Alternar el estado de un LED para indicar la recepción
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80009ce:	2101      	movs	r1, #1
 80009d0:	4806      	ldr	r0, [pc, #24]	; (80009ec <main+0xf8>)
 80009d2:	f001 fde8 	bl	80025a6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80009d6:	2064      	movs	r0, #100	; 0x64
 80009d8:	f000 fea4 	bl	8001724 <HAL_Delay>
	sr04_trigger(&sr04);
 80009dc:	e7eb      	b.n	80009b6 <main+0xc2>
 80009de:	bf00      	nop
 80009e0:	58024400 	.word	0x58024400
 80009e4:	080089bc 	.word	0x080089bc
 80009e8:	24000820 	.word	0x24000820
 80009ec:	58020400 	.word	0x58020400
 80009f0:	24000238 	.word	0x24000238
 80009f4:	080089d0 	.word	0x080089d0

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b09c      	sub	sp, #112	; 0x70
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	224c      	movs	r2, #76	; 0x4c
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f006 ffc0 	bl	800798c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2220      	movs	r2, #32
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f006 ffba 	bl	800798c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a18:	2004      	movs	r0, #4
 8000a1a:	f001 ff55 	bl	80028c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <SystemClock_Config+0xf0>)
 8000a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a26:	4a30      	ldr	r2, [pc, #192]	; (8000ae8 <SystemClock_Config+0xf0>)
 8000a28:	f023 0301 	bic.w	r3, r3, #1
 8000a2c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <SystemClock_Config+0xf0>)
 8000a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	4b2c      	ldr	r3, [pc, #176]	; (8000aec <SystemClock_Config+0xf4>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a40:	4a2a      	ldr	r2, [pc, #168]	; (8000aec <SystemClock_Config+0xf4>)
 8000a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <SystemClock_Config+0xf4>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a54:	bf00      	nop
 8000a56:	4b25      	ldr	r3, [pc, #148]	; (8000aec <SystemClock_Config+0xf4>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a62:	d1f8      	bne.n	8000a56 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a64:	2301      	movs	r3, #1
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a68:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	2302      	movs	r3, #2
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000a7a:	2314      	movs	r3, #20
 8000a7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a82:	2304      	movs	r3, #4
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 ff7e 	bl	800299c <HAL_RCC_OscConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000aa6:	f000 fa41 	bl	8000f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	233f      	movs	r3, #63	; 0x3f
 8000aac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000abe:	2340      	movs	r3, #64	; 0x40
 8000ac0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2101      	movs	r1, #1
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 fb92 	bl	80031f8 <HAL_RCC_ClockConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000ada:	f000 fa27 	bl	8000f2c <Error_Handler>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	3770      	adds	r7, #112	; 0x70
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	58000400 	.word	0x58000400
 8000aec:	58024800 	.word	0x58024800

08000af0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <MX_ETH_Init+0x80>)
 8000af6:	4a1f      	ldr	r2, [pc, #124]	; (8000b74 <MX_ETH_Init+0x84>)
 8000af8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <MX_ETH_Init+0x88>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_ETH_Init+0x88>)
 8000b02:	2280      	movs	r2, #128	; 0x80
 8000b04:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <MX_ETH_Init+0x88>)
 8000b08:	22e1      	movs	r2, #225	; 0xe1
 8000b0a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_ETH_Init+0x88>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <MX_ETH_Init+0x88>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_ETH_Init+0x88>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_ETH_Init+0x80>)
 8000b20:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <MX_ETH_Init+0x88>)
 8000b22:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_ETH_Init+0x80>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_ETH_Init+0x80>)
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <MX_ETH_Init+0x8c>)
 8000b2e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_ETH_Init+0x80>)
 8000b32:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <MX_ETH_Init+0x90>)
 8000b34:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_ETH_Init+0x80>)
 8000b38:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b3c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b3e:	480c      	ldr	r0, [pc, #48]	; (8000b70 <MX_ETH_Init+0x80>)
 8000b40:	f000 ff44 	bl	80019cc <HAL_ETH_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b4a:	f000 f9ef 	bl	8000f2c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b4e:	2238      	movs	r2, #56	; 0x38
 8000b50:	2100      	movs	r1, #0
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MX_ETH_Init+0x94>)
 8000b54:	f006 ff1a 	bl	800798c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <MX_ETH_Init+0x94>)
 8000b5a:	2221      	movs	r2, #33	; 0x21
 8000b5c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_ETH_Init+0x94>)
 8000b60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b64:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <MX_ETH_Init+0x94>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	24000188 	.word	0x24000188
 8000b74:	40028000 	.word	0x40028000
 8000b78:	24000844 	.word	0x24000844
 8000b7c:	240000d4 	.word	0x240000d4
 8000b80:	24000074 	.word	0x24000074
 8000b84:	24000150 	.word	0x24000150

08000b88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	; 0x30
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0320 	add.w	r3, r7, #32
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <MX_TIM1_Init+0xe4>)
 8000bb6:	4a2e      	ldr	r2, [pc, #184]	; (8000c70 <MX_TIM1_Init+0xe8>)
 8000bb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8000bba:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <MX_TIM1_Init+0xe4>)
 8000bbc:	2248      	movs	r2, #72	; 0x48
 8000bbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <MX_TIM1_Init+0xe4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bc6:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <MX_TIM1_Init+0xe4>)
 8000bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bcc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <MX_TIM1_Init+0xe4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <MX_TIM1_Init+0xe4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <MX_TIM1_Init+0xe4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000be0:	4822      	ldr	r0, [pc, #136]	; (8000c6c <MX_TIM1_Init+0xe4>)
 8000be2:	f004 f9fd 	bl	8004fe0 <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000bec:	f000 f99e 	bl	8000f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bf6:	f107 0320 	add.w	r3, r7, #32
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481b      	ldr	r0, [pc, #108]	; (8000c6c <MX_TIM1_Init+0xe4>)
 8000bfe:	f004 fe2d 	bl	800585c <HAL_TIM_ConfigClockSource>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000c08:	f000 f990 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000c0c:	4817      	ldr	r0, [pc, #92]	; (8000c6c <MX_TIM1_Init+0xe4>)
 8000c0e:	f004 fab7 	bl	8005180 <HAL_TIM_IC_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000c18:	f000 f988 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480f      	ldr	r0, [pc, #60]	; (8000c6c <MX_TIM1_Init+0xe4>)
 8000c30:	f005 f9c6 	bl	8005fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000c3a:	f000 f977 	bl	8000f2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c42:	2301      	movs	r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2200      	movs	r2, #0
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_TIM1_Init+0xe4>)
 8000c56:	f004 fd64 	bl	8005722 <HAL_TIM_IC_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000c60:	f000 f964 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	3730      	adds	r7, #48	; 0x30
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	24000238 	.word	0x24000238
 8000c70:	40010000 	.word	0x40010000

08000c74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c7a:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <MX_USART3_UART_Init+0x94>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cbc:	4811      	ldr	r0, [pc, #68]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cbe:	f005 fa2b 	bl	8006118 <HAL_UART_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cc8:	f000 f930 	bl	8000f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ccc:	2100      	movs	r1, #0
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cd0:	f006 fa5e 	bl	8007190 <HAL_UARTEx_SetTxFifoThreshold>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cda:	f000 f927 	bl	8000f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4808      	ldr	r0, [pc, #32]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000ce2:	f006 fa93 	bl	800720c <HAL_UARTEx_SetRxFifoThreshold>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cec:	f000 f91e 	bl	8000f2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cf2:	f006 fa14 	bl	800711e <HAL_UARTEx_DisableFifoMode>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cfc:	f000 f916 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	24000284 	.word	0x24000284
 8000d08:	40004800 	.word	0x40004800

08000d0c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d12:	4a16      	ldr	r2, [pc, #88]	; (8000d6c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000d14:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d18:	2209      	movs	r2, #9
 8000d1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d1e:	2202      	movs	r2, #2
 8000d20:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d54:	f001 fc70 	bl	8002638 <HAL_PCD_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d5e:	f000 f8e5 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	24000314 	.word	0x24000314
 8000d6c:	40080000 	.word	0x40080000

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b63      	ldr	r3, [pc, #396]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a61      	ldr	r2, [pc, #388]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b5f      	ldr	r3, [pc, #380]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
 8000da2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da4:	4b5b      	ldr	r3, [pc, #364]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a5a      	ldr	r2, [pc, #360]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b57      	ldr	r3, [pc, #348]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b54      	ldr	r3, [pc, #336]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	4a52      	ldr	r2, [pc, #328]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd2:	4b50      	ldr	r3, [pc, #320]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de0:	4b4c      	ldr	r3, [pc, #304]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	4a4b      	ldr	r2, [pc, #300]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df0:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dfe:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	4a43      	ldr	r2, [pc, #268]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0e:	4b41      	ldr	r3, [pc, #260]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	f003 0310 	and.w	r3, r3, #16
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1c:	4b3d      	ldr	r3, [pc, #244]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	4a3c      	ldr	r2, [pc, #240]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2c:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e3a:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	4a34      	ldr	r2, [pc, #208]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4a:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e5e:	482e      	ldr	r0, [pc, #184]	; (8000f18 <MX_GPIO_Init+0x1a8>)
 8000e60:	f001 fb88 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f640 0102 	movw	r1, #2050	; 0x802
 8000e6a:	482c      	ldr	r0, [pc, #176]	; (8000f1c <MX_GPIO_Init+0x1ac>)
 8000e6c:	f001 fb82 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e76:	482a      	ldr	r0, [pc, #168]	; (8000f20 <MX_GPIO_Init+0x1b0>)
 8000e78:	f001 fb7c 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4824      	ldr	r0, [pc, #144]	; (8000f24 <MX_GPIO_Init+0x1b4>)
 8000e92:	f001 f9bf 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e96:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	481a      	ldr	r0, [pc, #104]	; (8000f18 <MX_GPIO_Init+0x1a8>)
 8000eb0:	f001 f9b0 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin LD2_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|LD2_Pin;
 8000eb4:	f640 0302 	movw	r3, #2050	; 0x802
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4813      	ldr	r0, [pc, #76]	; (8000f1c <MX_GPIO_Init+0x1ac>)
 8000ece:	f001 f9a1 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <MX_GPIO_Init+0x1b0>)
 8000eec:	f001 f992 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	4808      	ldr	r0, [pc, #32]	; (8000f28 <MX_GPIO_Init+0x1b8>)
 8000f06:	f001 f985 	bl	8002214 <HAL_GPIO_Init>

}
 8000f0a:	bf00      	nop
 8000f0c:	3730      	adds	r7, #48	; 0x30
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	58024400 	.word	0x58024400
 8000f18:	58020400 	.word	0x58020400
 8000f1c:	58021000 	.word	0x58021000
 8000f20:	58020c00 	.word	0x58020c00
 8000f24:	58020800 	.word	0x58020800
 8000f28:	58021800 	.word	0x58021800

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <Error_Handler+0x8>
	...

08000f38 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f40:	1d39      	adds	r1, r7, #4
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	2201      	movs	r2, #1
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <__io_putchar+0x20>)
 8000f4a:	f005 f935 	bl	80061b8 <HAL_UART_Transmit>
  return ch;
 8000f4e:	687b      	ldr	r3, [r7, #4]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	24000284 	.word	0x24000284

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_MspInit+0x30>)
 8000f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f68:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_MspInit+0x30>)
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_MspInit+0x30>)
 8000f74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	58024400 	.word	0x58024400

08000f90 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08e      	sub	sp, #56	; 0x38
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a59      	ldr	r2, [pc, #356]	; (8001114 <HAL_ETH_MspInit+0x184>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	f040 80ab 	bne.w	800110a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000fb4:	4b58      	ldr	r3, [pc, #352]	; (8001118 <HAL_ETH_MspInit+0x188>)
 8000fb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fba:	4a57      	ldr	r2, [pc, #348]	; (8001118 <HAL_ETH_MspInit+0x188>)
 8000fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fc0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fc4:	4b54      	ldr	r3, [pc, #336]	; (8001118 <HAL_ETH_MspInit+0x188>)
 8000fc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fce:	623b      	str	r3, [r7, #32]
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000fd2:	4b51      	ldr	r3, [pc, #324]	; (8001118 <HAL_ETH_MspInit+0x188>)
 8000fd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fd8:	4a4f      	ldr	r2, [pc, #316]	; (8001118 <HAL_ETH_MspInit+0x188>)
 8000fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fe2:	4b4d      	ldr	r3, [pc, #308]	; (8001118 <HAL_ETH_MspInit+0x188>)
 8000fe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ff0:	4b49      	ldr	r3, [pc, #292]	; (8001118 <HAL_ETH_MspInit+0x188>)
 8000ff2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ff6:	4a48      	ldr	r2, [pc, #288]	; (8001118 <HAL_ETH_MspInit+0x188>)
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001000:	4b45      	ldr	r3, [pc, #276]	; (8001118 <HAL_ETH_MspInit+0x188>)
 8001002:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	61bb      	str	r3, [r7, #24]
 800100c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b42      	ldr	r3, [pc, #264]	; (8001118 <HAL_ETH_MspInit+0x188>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	4a40      	ldr	r2, [pc, #256]	; (8001118 <HAL_ETH_MspInit+0x188>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101e:	4b3e      	ldr	r3, [pc, #248]	; (8001118 <HAL_ETH_MspInit+0x188>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <HAL_ETH_MspInit+0x188>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	4a39      	ldr	r2, [pc, #228]	; (8001118 <HAL_ETH_MspInit+0x188>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <HAL_ETH_MspInit+0x188>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b33      	ldr	r3, [pc, #204]	; (8001118 <HAL_ETH_MspInit+0x188>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	4a31      	ldr	r2, [pc, #196]	; (8001118 <HAL_ETH_MspInit+0x188>)
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105a:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <HAL_ETH_MspInit+0x188>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <HAL_ETH_MspInit+0x188>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	4a2a      	ldr	r2, [pc, #168]	; (8001118 <HAL_ETH_MspInit+0x188>)
 8001070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <HAL_ETH_MspInit+0x188>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001086:	2332      	movs	r3, #50	; 0x32
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001096:	230b      	movs	r3, #11
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	481e      	ldr	r0, [pc, #120]	; (800111c <HAL_ETH_MspInit+0x18c>)
 80010a2:	f001 f8b7 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80010a6:	2386      	movs	r3, #134	; 0x86
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b6:	230b      	movs	r3, #11
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	4619      	mov	r1, r3
 80010c0:	4817      	ldr	r0, [pc, #92]	; (8001120 <HAL_ETH_MspInit+0x190>)
 80010c2:	f001 f8a7 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d8:	230b      	movs	r3, #11
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	4810      	ldr	r0, [pc, #64]	; (8001124 <HAL_ETH_MspInit+0x194>)
 80010e4:	f001 f896 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010fa:	230b      	movs	r3, #11
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	4619      	mov	r1, r3
 8001104:	4808      	ldr	r0, [pc, #32]	; (8001128 <HAL_ETH_MspInit+0x198>)
 8001106:	f001 f885 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	3738      	adds	r7, #56	; 0x38
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40028000 	.word	0x40028000
 8001118:	58024400 	.word	0x58024400
 800111c:	58020800 	.word	0x58020800
 8001120:	58020000 	.word	0x58020000
 8001124:	58020400 	.word	0x58020400
 8001128:	58021800 	.word	0x58021800

0800112c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a2a      	ldr	r2, [pc, #168]	; (80011f4 <HAL_TIM_Base_MspInit+0xc8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d14e      	bne.n	80011ec <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <HAL_TIM_Base_MspInit+0xcc>)
 8001150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001154:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <HAL_TIM_Base_MspInit+0xcc>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <HAL_TIM_Base_MspInit+0xcc>)
 8001160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <HAL_TIM_Base_MspInit+0xcc>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001172:	4a21      	ldr	r2, [pc, #132]	; (80011f8 <HAL_TIM_Base_MspInit+0xcc>)
 8001174:	f043 0310 	orr.w	r3, r3, #16
 8001178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <HAL_TIM_Base_MspInit+0xcc>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 800118a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800118e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800119c:	2301      	movs	r3, #1
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4815      	ldr	r0, [pc, #84]	; (80011fc <HAL_TIM_Base_MspInit+0xd0>)
 80011a8:	f001 f834 	bl	8002214 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2018      	movs	r0, #24
 80011b2:	f000 fbd6 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80011b6:	2018      	movs	r0, #24
 80011b8:	f000 fbed 	bl	8001996 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2019      	movs	r0, #25
 80011c2:	f000 fbce 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011c6:	2019      	movs	r0, #25
 80011c8:	f000 fbe5 	bl	8001996 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	201a      	movs	r0, #26
 80011d2:	f000 fbc6 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80011d6:	201a      	movs	r0, #26
 80011d8:	f000 fbdd 	bl	8001996 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	201b      	movs	r0, #27
 80011e2:	f000 fbbe 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80011e6:	201b      	movs	r0, #27
 80011e8:	f000 fbd5 	bl	8001996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40010000 	.word	0x40010000
 80011f8:	58024400 	.word	0x58024400
 80011fc:	58021000 	.word	0x58021000

08001200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0b8      	sub	sp, #224	; 0xe0
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	22bc      	movs	r2, #188	; 0xbc
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f006 fbb3 	bl	800798c <memset>
  if(huart->Instance==USART3)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a25      	ldr	r2, [pc, #148]	; (80012c0 <HAL_UART_MspInit+0xc0>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d142      	bne.n	80012b6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001230:	2302      	movs	r3, #2
 8001232:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	4618      	mov	r0, r3
 8001240:	f002 fb66 	bl	8003910 <HAL_RCCEx_PeriphCLKConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800124a:	f7ff fe6f 	bl	8000f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_UART_MspInit+0xc4>)
 8001250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001254:	4a1b      	ldr	r2, [pc, #108]	; (80012c4 <HAL_UART_MspInit+0xc4>)
 8001256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_UART_MspInit+0xc4>)
 8001260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_UART_MspInit+0xc4>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <HAL_UART_MspInit+0xc4>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <HAL_UART_MspInit+0xc4>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800128a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800128e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012a4:	2307      	movs	r3, #7
 80012a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <HAL_UART_MspInit+0xc8>)
 80012b2:	f000 ffaf 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012b6:	bf00      	nop
 80012b8:	37e0      	adds	r7, #224	; 0xe0
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40004800 	.word	0x40004800
 80012c4:	58024400 	.word	0x58024400
 80012c8:	58020c00 	.word	0x58020c00

080012cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0b8      	sub	sp, #224	; 0xe0
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	22bc      	movs	r2, #188	; 0xbc
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f006 fb4d 	bl	800798c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <HAL_PCD_MspInit+0xe8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d156      	bne.n	80013aa <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001300:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001302:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001306:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	4618      	mov	r0, r3
 8001310:	f002 fafe 	bl	8003910 <HAL_RCCEx_PeriphCLKConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800131a:	f7ff fe07 	bl	8000f2c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800131e:	f001 fb2d 	bl	800297c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <HAL_PCD_MspInit+0xec>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	4a23      	ldr	r2, [pc, #140]	; (80013b8 <HAL_PCD_MspInit+0xec>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001332:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <HAL_PCD_MspInit+0xec>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001340:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001344:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800135a:	230a      	movs	r3, #10
 800135c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001364:	4619      	mov	r1, r3
 8001366:	4815      	ldr	r0, [pc, #84]	; (80013bc <HAL_PCD_MspInit+0xf0>)
 8001368:	f000 ff54 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800136c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001370:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001384:	4619      	mov	r1, r3
 8001386:	480d      	ldr	r0, [pc, #52]	; (80013bc <HAL_PCD_MspInit+0xf0>)
 8001388:	f000 ff44 	bl	8002214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_PCD_MspInit+0xec>)
 800138e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <HAL_PCD_MspInit+0xec>)
 8001394:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001398:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_PCD_MspInit+0xec>)
 800139e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	37e0      	adds	r7, #224	; 0xe0
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40080000 	.word	0x40080000
 80013b8:	58024400 	.word	0x58024400
 80013bc:	58020000 	.word	0x58020000

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <NMI_Handler+0x4>

080013c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <MemManage_Handler+0x4>

080013d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler+0x4>

080013de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140c:	f000 f96a 	bl	80016e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <TIM1_BRK_IRQHandler+0x10>)
 800141a:	f004 f863 	bl	80054e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	24000238 	.word	0x24000238

08001428 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <TIM1_UP_IRQHandler+0x10>)
 800142e:	f004 f859 	bl	80054e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	24000238 	.word	0x24000238

0800143c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <TIM1_TRG_COM_IRQHandler+0x10>)
 8001442:	f004 f84f 	bl	80054e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	24000238 	.word	0x24000238

08001450 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <TIM1_CC_IRQHandler+0x10>)
 8001456:	f004 f845 	bl	80054e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	24000238 	.word	0x24000238

08001464 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e00a      	b.n	800148c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001476:	f3af 8000 	nop.w
 800147a:	4601      	mov	r1, r0
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	60ba      	str	r2, [r7, #8]
 8001482:	b2ca      	uxtb	r2, r1
 8001484:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3301      	adds	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	dbf0      	blt.n	8001476 <_read+0x12>
	}

return len;
 8001494:	687b      	ldr	r3, [r7, #4]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e009      	b.n	80014c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fd3d 	bl	8000f38 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3301      	adds	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbf1      	blt.n	80014b0 <_write+0x12>
	}
	return len;
 80014cc:	687b      	ldr	r3, [r7, #4]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <_close>:

int _close(int file)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
	return -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <_isatty>:

int _isatty(int file)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	return 1;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
	return 0;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001548:	4a14      	ldr	r2, [pc, #80]	; (800159c <_sbrk+0x5c>)
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <_sbrk+0x60>)
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <_sbrk+0x64>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <_sbrk+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	429a      	cmp	r2, r3
 800156e:	d207      	bcs.n	8001580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001570:	f006 f9e2 	bl	8007938 <__errno>
 8001574:	4603      	mov	r3, r0
 8001576:	220c      	movs	r2, #12
 8001578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	e009      	b.n	8001594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <_sbrk+0x64>)
 8001590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001592:	68fb      	ldr	r3, [r7, #12]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	24080000 	.word	0x24080000
 80015a0:	00000400 	.word	0x00000400
 80015a4:	2400084c 	.word	0x2400084c
 80015a8:	24000868 	.word	0x24000868

080015ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015b0:	f7ff f868 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015b6:	490d      	ldr	r1, [pc, #52]	; (80015ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015cc:	4c0a      	ldr	r4, [pc, #40]	; (80015f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015da:	f006 f9b3 	bl	8007944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015de:	f7ff f989 	bl	80008f4 <main>
  bx  lr
 80015e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015ec:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80015f0:	08008ac4 	.word	0x08008ac4
  ldr r2, =_sbss
 80015f4:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 80015f8:	24000864 	.word	0x24000864

080015fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC3_IRQHandler>
	...

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001606:	2003      	movs	r0, #3
 8001608:	f000 f9a0 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800160c:	f001 ffaa 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8001610:	4602      	mov	r2, r0
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_Init+0x68>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	f003 030f 	and.w	r3, r3, #15
 800161c:	4913      	ldr	r1, [pc, #76]	; (800166c <HAL_Init+0x6c>)
 800161e:	5ccb      	ldrb	r3, [r1, r3]
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
 8001628:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_Init+0x68>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_Init+0x6c>)
 8001634:	5cd3      	ldrb	r3, [r2, r3]
 8001636:	f003 031f 	and.w	r3, r3, #31
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <HAL_Init+0x70>)
 8001642:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001644:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <HAL_Init+0x74>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f814 	bl	8001678 <HAL_InitTick>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e002      	b.n	8001660 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800165a:	f7ff fc7f 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	58024400 	.word	0x58024400
 800166c:	080089e4 	.word	0x080089e4
 8001670:	24000004 	.word	0x24000004
 8001674:	24000000 	.word	0x24000000

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_InitTick+0x60>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e021      	b.n	80016d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_InitTick+0x64>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_InitTick+0x60>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169a:	fbb3 f3f1 	udiv	r3, r3, r1
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f985 	bl	80019b2 <HAL_SYSTICK_Config>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00e      	b.n	80016d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d80a      	bhi.n	80016ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b8:	2200      	movs	r2, #0
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f000 f94f 	bl	8001962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c4:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <HAL_InitTick+0x68>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e000      	b.n	80016d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	2400000c 	.word	0x2400000c
 80016dc:	24000000 	.word	0x24000000
 80016e0:	24000008 	.word	0x24000008

080016e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x20>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x24>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_IncTick+0x24>)
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	2400000c 	.word	0x2400000c
 8001708:	24000850 	.word	0x24000850

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetTick+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	24000850 	.word	0x24000850

08001724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff ffee 	bl	800170c <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800174a:	bf00      	nop
 800174c:	f7ff ffde 	bl	800170c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2400000c 	.word	0x2400000c

0800176c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_GetREVID+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0c1b      	lsrs	r3, r3, #16
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	5c001000 	.word	0x5c001000

08001784 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001794:	4904      	ldr	r1, [pc, #16]	; (80017a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	58000400 	.word	0x58000400

080017ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <__NVIC_SetPriorityGrouping+0x40>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x40>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00
 80017f0:	05fa0000 	.word	0x05fa0000

080017f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800181a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <__NVIC_EnableIRQ+0x38>)
 800182a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff29 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001970:	f7ff ff40 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 8001974:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	6978      	ldr	r0, [r7, #20]
 800197c:	f7ff ff90 	bl	80018a0 <NVIC_EncodePriority>
 8001980:	4602      	mov	r2, r0
 8001982:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff5f 	bl	800184c <__NVIC_SetPriority>
}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff33 	bl	8001810 <__NVIC_EnableIRQ>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffa4 	bl	8001908 <SysTick_Config>
 80019c0:	4603      	mov	r3, r0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0cf      	b.n	8001b7e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d106      	bne.n	80019f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2223      	movs	r2, #35	; 0x23
 80019ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff facd 	bl	8000f90 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	4b64      	ldr	r3, [pc, #400]	; (8001b88 <HAL_ETH_Init+0x1bc>)
 80019f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019fc:	4a62      	ldr	r2, [pc, #392]	; (8001b88 <HAL_ETH_Init+0x1bc>)
 80019fe:	f043 0302 	orr.w	r3, r3, #2
 8001a02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a06:	4b60      	ldr	r3, [pc, #384]	; (8001b88 <HAL_ETH_Init+0x1bc>)
 8001a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7a1b      	ldrb	r3, [r3, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d103      	bne.n	8001a24 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff feb1 	bl	8001784 <HAL_SYSCFG_ETHInterfaceSelect>
 8001a22:	e003      	b.n	8001a2c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a24:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a28:	f7ff feac 	bl	8001784 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001a2c:	4b57      	ldr	r3, [pc, #348]	; (8001b8c <HAL_ETH_Init+0x1c0>)
 8001a2e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a48:	f7ff fe60 	bl	800170c <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a4e:	e011      	b.n	8001a74 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a50:	f7ff fe5c 	bl	800170c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a5e:	d909      	bls.n	8001a74 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2204      	movs	r2, #4
 8001a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	22e0      	movs	r2, #224	; 0xe0
 8001a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e084      	b.n	8001b7e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1e4      	bne.n	8001a50 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f886 	bl	8001b98 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a8c:	f001 fee4 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4a3f      	ldr	r2, [pc, #252]	; (8001b90 <HAL_ETH_Init+0x1c4>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	0c9a      	lsrs	r2, r3, #18
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3a01      	subs	r2, #1
 8001aa0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 fa71 	bl	8001f8c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001ab6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ac2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ac6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d009      	beq.n	8001aea <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	22e0      	movs	r2, #224	; 0xe0
 8001ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e049      	b.n	8001b7e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001af6:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_ETH_Init+0x1c8>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6952      	ldr	r2, [r2, #20]
 8001afe:	0051      	lsls	r1, r2, #1
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b0a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fad9 	bl	80020c6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fb1f 	bl	8002158 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	3305      	adds	r3, #5
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	021a      	lsls	r2, r3, #8
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	3303      	adds	r3, #3
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	061a      	lsls	r2, r3, #24
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	3302      	adds	r3, #2
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	041b      	lsls	r3, r3, #16
 8001b4c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	3301      	adds	r3, #1
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b58:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b66:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b68:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2210      	movs	r2, #16
 8001b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	58024400 	.word	0x58024400
 8001b8c:	58000400 	.word	0x58000400
 8001b90:	431bde83 	.word	0x431bde83
 8001b94:	ffff8001 	.word	0xffff8001

08001b98 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001bb2:	f001 fe51 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 8001bb6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4a1e      	ldr	r2, [pc, #120]	; (8001c34 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d908      	bls.n	8001bd2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d804      	bhi.n	8001bd2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e027      	b.n	8001c22 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	4a18      	ldr	r2, [pc, #96]	; (8001c38 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d908      	bls.n	8001bec <HAL_ETH_SetMDIOClockRange+0x54>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	4a17      	ldr	r2, [pc, #92]	; (8001c3c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d204      	bcs.n	8001bec <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	e01a      	b.n	8001c22 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d303      	bcc.n	8001bfc <HAL_ETH_SetMDIOClockRange+0x64>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d911      	bls.n	8001c20 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	4a10      	ldr	r2, [pc, #64]	; (8001c40 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d908      	bls.n	8001c16 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4a0f      	ldr	r2, [pc, #60]	; (8001c44 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d804      	bhi.n	8001c16 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	e005      	b.n	8001c22 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	e000      	b.n	8001c22 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001c20:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	01312cff 	.word	0x01312cff
 8001c38:	02160ebf 	.word	0x02160ebf
 8001c3c:	03938700 	.word	0x03938700
 8001c40:	05f5e0ff 	.word	0x05f5e0ff
 8001c44:	08f0d17f 	.word	0x08f0d17f

08001c48 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001c5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	791b      	ldrb	r3, [r3, #4]
 8001c60:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001c62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	7b1b      	ldrb	r3, [r3, #12]
 8001c68:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001c6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	7b5b      	ldrb	r3, [r3, #13]
 8001c70:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	7b9b      	ldrb	r3, [r3, #14]
 8001c78:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	7bdb      	ldrb	r3, [r3, #15]
 8001c80:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c82:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	7c12      	ldrb	r2, [r2, #16]
 8001c88:	2a00      	cmp	r2, #0
 8001c8a:	d102      	bne.n	8001c92 <ETH_SetMACConfig+0x4a>
 8001c8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c90:	e000      	b.n	8001c94 <ETH_SetMACConfig+0x4c>
 8001c92:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c94:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	7c52      	ldrb	r2, [r2, #17]
 8001c9a:	2a00      	cmp	r2, #0
 8001c9c:	d102      	bne.n	8001ca4 <ETH_SetMACConfig+0x5c>
 8001c9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ca2:	e000      	b.n	8001ca6 <ETH_SetMACConfig+0x5e>
 8001ca4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ca6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	7c9b      	ldrb	r3, [r3, #18]
 8001cac:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001cae:	431a      	orrs	r2, r3
               macconf->Speed |
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001cb4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001cba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	7f1b      	ldrb	r3, [r3, #28]
 8001cc0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001cc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	7f5b      	ldrb	r3, [r3, #29]
 8001cc8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001cca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	7f92      	ldrb	r2, [r2, #30]
 8001cd0:	2a00      	cmp	r2, #0
 8001cd2:	d102      	bne.n	8001cda <ETH_SetMACConfig+0x92>
 8001cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd8:	e000      	b.n	8001cdc <ETH_SetMACConfig+0x94>
 8001cda:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001cdc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	7fdb      	ldrb	r3, [r3, #31]
 8001ce2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001ce4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001cec:	2a00      	cmp	r2, #0
 8001cee:	d102      	bne.n	8001cf6 <ETH_SetMACConfig+0xae>
 8001cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cf4:	e000      	b.n	8001cf8 <ETH_SetMACConfig+0xb0>
 8001cf6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001cf8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001cfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d06:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001d08:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b56      	ldr	r3, [pc, #344]	; (8001e74 <ETH_SetMACConfig+0x22c>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	68f9      	ldr	r1, [r7, #12]
 8001d22:	430b      	orrs	r3, r1
 8001d24:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d32:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d34:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d3c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d46:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d48:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001d50:	2a00      	cmp	r2, #0
 8001d52:	d102      	bne.n	8001d5a <ETH_SetMACConfig+0x112>
 8001d54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d58:	e000      	b.n	8001d5c <ETH_SetMACConfig+0x114>
 8001d5a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d5c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4b42      	ldr	r3, [pc, #264]	; (8001e78 <ETH_SetMACConfig+0x230>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	68f9      	ldr	r1, [r7, #12]
 8001d76:	430b      	orrs	r3, r1
 8001d78:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d80:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <ETH_SetMACConfig+0x234>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001da4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001daa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001db2:	2a00      	cmp	r2, #0
 8001db4:	d101      	bne.n	8001dba <ETH_SetMACConfig+0x172>
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	e000      	b.n	8001dbc <ETH_SetMACConfig+0x174>
 8001dba:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001dbc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dce:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	68f9      	ldr	r1, [r7, #12]
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001de4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001dec:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	f023 0103 	bic.w	r1, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001e12:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001e2e:	2a00      	cmp	r2, #0
 8001e30:	d101      	bne.n	8001e36 <ETH_SetMACConfig+0x1ee>
 8001e32:	2240      	movs	r2, #64	; 0x40
 8001e34:	e000      	b.n	8001e38 <ETH_SetMACConfig+0x1f0>
 8001e36:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001e38:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001e40:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001e4a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001e58:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	00048083 	.word	0x00048083
 8001e78:	c0f88000 	.word	0xc0f88000
 8001e7c:	fffffef0 	.word	0xfffffef0

08001e80 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b38      	ldr	r3, [pc, #224]	; (8001f78 <ETH_SetDMAConfig+0xf8>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	6811      	ldr	r1, [r2, #0]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ea6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	791b      	ldrb	r3, [r3, #4]
 8001eac:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001eb2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	7b1b      	ldrb	r3, [r3, #12]
 8001eb8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <ETH_SetDMAConfig+0xfc>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	68f9      	ldr	r1, [r7, #12]
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ed8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	7b5b      	ldrb	r3, [r3, #13]
 8001ede:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001ef4:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <ETH_SetDMAConfig+0x100>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	68f9      	ldr	r1, [r7, #12]
 8001efe:	430b      	orrs	r3, r1
 8001f00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f04:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	7d1b      	ldrb	r3, [r3, #20]
 8001f10:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f12:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	7f5b      	ldrb	r3, [r3, #29]
 8001f18:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f26:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <ETH_SetDMAConfig+0x104>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	68f9      	ldr	r1, [r7, #12]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f3a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	7f1b      	ldrb	r3, [r3, #28]
 8001f42:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f54:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <ETH_SetDMAConfig+0x108>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	68f9      	ldr	r1, [r7, #12]
 8001f62:	430b      	orrs	r3, r1
 8001f64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f68:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	ffff87fd 	.word	0xffff87fd
 8001f7c:	ffff2ffe 	.word	0xffff2ffe
 8001f80:	fffec000 	.word	0xfffec000
 8001f84:	ffc0efef 	.word	0xffc0efef
 8001f88:	7fc0ffff 	.word	0x7fc0ffff

08001f8c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b0a4      	sub	sp, #144	; 0x90
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001f94:	2301      	movs	r3, #1
 8001f96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001faa:	2301      	movs	r3, #1
 8001fac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fcc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001fe4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001fe8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002006:	2300      	movs	r3, #0
 8002008:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800200a:	2300      	movs	r3, #0
 800200c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800200e:	2300      	movs	r3, #0
 8002010:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800201e:	2301      	movs	r3, #1
 8002020:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002024:	2320      	movs	r3, #32
 8002026:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800202a:	2301      	movs	r3, #1
 800202c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002036:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800203c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002040:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002048:	2302      	movs	r3, #2
 800204a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002060:	2301      	movs	r3, #1
 8002062:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002066:	2300      	movs	r3, #0
 8002068:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800206a:	2301      	movs	r3, #1
 800206c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002074:	4619      	mov	r1, r3
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fde6 	bl	8001c48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800207c:	2301      	movs	r3, #1
 800207e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002080:	2301      	movs	r3, #1
 8002082:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002096:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800209a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80020ac:	f44f 7306 	mov.w	r3, #536	; 0x218
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80020b2:	f107 0308 	add.w	r3, r7, #8
 80020b6:	4619      	mov	r1, r3
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff fee1 	bl	8001e80 <ETH_SetDMAConfig>
}
 80020be:	bf00      	nop
 80020c0:	3790      	adds	r7, #144	; 0x90
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b085      	sub	sp, #20
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	e01d      	b.n	8002110 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68d9      	ldr	r1, [r3, #12]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2200      	movs	r2, #0
 80020f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020fe:	68b9      	ldr	r1, [r7, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	3206      	adds	r2, #6
 8002106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3301      	adds	r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b03      	cmp	r3, #3
 8002114:	d9de      	bls.n	80020d4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002124:	461a      	mov	r2, r3
 8002126:	2303      	movs	r3, #3
 8002128:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002138:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002148:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e023      	b.n	80021ae <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6919      	ldr	r1, [r3, #16]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2200      	movs	r2, #0
 8002182:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2200      	movs	r2, #0
 800218e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2200      	movs	r2, #0
 800219a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	3212      	adds	r2, #18
 80021a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3301      	adds	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d9d8      	bls.n	8002166 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021da:	461a      	mov	r2, r3
 80021dc:	2303      	movs	r3, #3
 80021de:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ee:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002202:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002222:	4b89      	ldr	r3, [pc, #548]	; (8002448 <HAL_GPIO_Init+0x234>)
 8002224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002226:	e194      	b.n	8002552 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8186 	beq.w	800254c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d005      	beq.n	8002258 <HAL_GPIO_Init+0x44>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d130      	bne.n	80022ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800228e:	2201      	movs	r2, #1
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	f003 0201 	and.w	r2, r3, #1
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d017      	beq.n	80022f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d123      	bne.n	800234a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3208      	adds	r2, #8
 800230a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	220f      	movs	r2, #15
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	69b9      	ldr	r1, [r7, #24]
 8002346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0203 	and.w	r2, r3, #3
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80e0 	beq.w	800254c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238c:	4b2f      	ldr	r3, [pc, #188]	; (800244c <HAL_GPIO_Init+0x238>)
 800238e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002392:	4a2e      	ldr	r2, [pc, #184]	; (800244c <HAL_GPIO_Init+0x238>)
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800239c:	4b2b      	ldr	r3, [pc, #172]	; (800244c <HAL_GPIO_Init+0x238>)
 800239e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023aa:	4a29      	ldr	r2, [pc, #164]	; (8002450 <HAL_GPIO_Init+0x23c>)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a20      	ldr	r2, [pc, #128]	; (8002454 <HAL_GPIO_Init+0x240>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d052      	beq.n	800247c <HAL_GPIO_Init+0x268>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <HAL_GPIO_Init+0x244>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d031      	beq.n	8002442 <HAL_GPIO_Init+0x22e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1e      	ldr	r2, [pc, #120]	; (800245c <HAL_GPIO_Init+0x248>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d02b      	beq.n	800243e <HAL_GPIO_Init+0x22a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <HAL_GPIO_Init+0x24c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d025      	beq.n	800243a <HAL_GPIO_Init+0x226>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <HAL_GPIO_Init+0x250>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01f      	beq.n	8002436 <HAL_GPIO_Init+0x222>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a1b      	ldr	r2, [pc, #108]	; (8002468 <HAL_GPIO_Init+0x254>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d019      	beq.n	8002432 <HAL_GPIO_Init+0x21e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a1a      	ldr	r2, [pc, #104]	; (800246c <HAL_GPIO_Init+0x258>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_GPIO_Init+0x21a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a19      	ldr	r2, [pc, #100]	; (8002470 <HAL_GPIO_Init+0x25c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00d      	beq.n	800242a <HAL_GPIO_Init+0x216>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a18      	ldr	r2, [pc, #96]	; (8002474 <HAL_GPIO_Init+0x260>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <HAL_GPIO_Init+0x212>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a17      	ldr	r2, [pc, #92]	; (8002478 <HAL_GPIO_Init+0x264>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <HAL_GPIO_Init+0x20e>
 800241e:	2309      	movs	r3, #9
 8002420:	e02d      	b.n	800247e <HAL_GPIO_Init+0x26a>
 8002422:	230a      	movs	r3, #10
 8002424:	e02b      	b.n	800247e <HAL_GPIO_Init+0x26a>
 8002426:	2308      	movs	r3, #8
 8002428:	e029      	b.n	800247e <HAL_GPIO_Init+0x26a>
 800242a:	2307      	movs	r3, #7
 800242c:	e027      	b.n	800247e <HAL_GPIO_Init+0x26a>
 800242e:	2306      	movs	r3, #6
 8002430:	e025      	b.n	800247e <HAL_GPIO_Init+0x26a>
 8002432:	2305      	movs	r3, #5
 8002434:	e023      	b.n	800247e <HAL_GPIO_Init+0x26a>
 8002436:	2304      	movs	r3, #4
 8002438:	e021      	b.n	800247e <HAL_GPIO_Init+0x26a>
 800243a:	2303      	movs	r3, #3
 800243c:	e01f      	b.n	800247e <HAL_GPIO_Init+0x26a>
 800243e:	2302      	movs	r3, #2
 8002440:	e01d      	b.n	800247e <HAL_GPIO_Init+0x26a>
 8002442:	2301      	movs	r3, #1
 8002444:	e01b      	b.n	800247e <HAL_GPIO_Init+0x26a>
 8002446:	bf00      	nop
 8002448:	58000080 	.word	0x58000080
 800244c:	58024400 	.word	0x58024400
 8002450:	58000400 	.word	0x58000400
 8002454:	58020000 	.word	0x58020000
 8002458:	58020400 	.word	0x58020400
 800245c:	58020800 	.word	0x58020800
 8002460:	58020c00 	.word	0x58020c00
 8002464:	58021000 	.word	0x58021000
 8002468:	58021400 	.word	0x58021400
 800246c:	58021800 	.word	0x58021800
 8002470:	58021c00 	.word	0x58021c00
 8002474:	58022000 	.word	0x58022000
 8002478:	58022400 	.word	0x58022400
 800247c:	2300      	movs	r3, #0
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	f002 0203 	and.w	r2, r2, #3
 8002484:	0092      	lsls	r2, r2, #2
 8002486:	4093      	lsls	r3, r2
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800248e:	4938      	ldr	r1, [pc, #224]	; (8002570 <HAL_GPIO_Init+0x35c>)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	089b      	lsrs	r3, r3, #2
 8002494:	3302      	adds	r3, #2
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	3301      	adds	r3, #1
 8002550:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	f47f ae63 	bne.w	8002228 <HAL_GPIO_Init+0x14>
  }
}
 8002562:	bf00      	nop
 8002564:	bf00      	nop
 8002566:	3724      	adds	r7, #36	; 0x24
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	58000400 	.word	0x58000400

08002574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
 8002580:	4613      	mov	r3, r2
 8002582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002584:	787b      	ldrb	r3, [r7, #1]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258a:	887a      	ldrh	r2, [r7, #2]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002590:	e003      	b.n	800259a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	041a      	lsls	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	619a      	str	r2, [r3, #24]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025b8:	887a      	ldrh	r2, [r7, #2]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4013      	ands	r3, r2
 80025be:	041a      	lsls	r2, r3, #16
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43d9      	mvns	r1, r3
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	400b      	ands	r3, r1
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	619a      	str	r2, [r3, #24]
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80025e4:	4a08      	ldr	r2, [pc, #32]	; (8002608 <HAL_HSEM_FastTake+0x2c>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3320      	adds	r3, #32
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	4a07      	ldr	r2, [pc, #28]	; (800260c <HAL_HSEM_FastTake+0x30>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d101      	bne.n	80025f8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e000      	b.n	80025fa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	58026400 	.word	0x58026400
 800260c:	80000300 	.word	0x80000300

08002610 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800261a:	4906      	ldr	r1, [pc, #24]	; (8002634 <HAL_HSEM_Release+0x24>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	58026400 	.word	0x58026400

08002638 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263a:	b08f      	sub	sp, #60	; 0x3c
 800263c:	af0a      	add	r7, sp, #40	; 0x28
 800263e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e116      	b.n	8002878 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d106      	bne.n	800266a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7fe fe31 	bl	80012cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2203      	movs	r2, #3
 800266e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d102      	bne.n	8002684 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f004 feb9 	bl	8007400 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	687e      	ldr	r6, [r7, #4]
 8002696:	466d      	mov	r5, sp
 8002698:	f106 0410 	add.w	r4, r6, #16
 800269c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800269e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80026ac:	1d33      	adds	r3, r6, #4
 80026ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b0:	6838      	ldr	r0, [r7, #0]
 80026b2:	f004 fe37 	bl	8007324 <USB_CoreInit>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0d7      	b.n	8002878 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f004 fea7 	bl	8007422 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d4:	2300      	movs	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e04a      	b.n	8002770 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	333d      	adds	r3, #61	; 0x3d
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	333c      	adds	r3, #60	; 0x3c
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	b298      	uxth	r0, r3
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	3344      	adds	r3, #68	; 0x44
 8002716:	4602      	mov	r2, r0
 8002718:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	3340      	adds	r3, #64	; 0x40
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	3348      	adds	r3, #72	; 0x48
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	334c      	adds	r3, #76	; 0x4c
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	3354      	adds	r3, #84	; 0x54
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	3301      	adds	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	429a      	cmp	r2, r3
 8002778:	d3af      	bcc.n	80026da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	e044      	b.n	800280a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027ac:	7bfa      	ldrb	r2, [r7, #15]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027d8:	7bfa      	ldrb	r2, [r7, #15]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	3301      	adds	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	429a      	cmp	r2, r3
 8002812:	d3b5      	bcc.n	8002780 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	687e      	ldr	r6, [r7, #4]
 800281c:	466d      	mov	r5, sp
 800281e:	f106 0410 	add.w	r4, r6, #16
 8002822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800282a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800282e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002832:	1d33      	adds	r3, r6, #4
 8002834:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002836:	6838      	ldr	r0, [r7, #0]
 8002838:	f004 fe40 	bl	80074bc <USB_DevInit>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d005      	beq.n	800284e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2202      	movs	r2, #2
 8002846:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e014      	b.n	8002878 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	2b01      	cmp	r3, #1
 8002864:	d102      	bne.n	800286c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f80a 	bl	8002880 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f004 fffe 	bl	8007872 <USB_DevDisconnect>

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002880 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	10000003 	.word	0x10000003

080028c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80028d0:	4b29      	ldr	r3, [pc, #164]	; (8002978 <HAL_PWREx_ConfigSupply+0xb0>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	2b06      	cmp	r3, #6
 80028da:	d00a      	beq.n	80028f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028dc:	4b26      	ldr	r3, [pc, #152]	; (8002978 <HAL_PWREx_ConfigSupply+0xb0>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d001      	beq.n	80028ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e040      	b.n	8002970 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e03e      	b.n	8002970 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028f2:	4b21      	ldr	r3, [pc, #132]	; (8002978 <HAL_PWREx_ConfigSupply+0xb0>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80028fa:	491f      	ldr	r1, [pc, #124]	; (8002978 <HAL_PWREx_ConfigSupply+0xb0>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002902:	f7fe ff03 	bl	800170c <HAL_GetTick>
 8002906:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002908:	e009      	b.n	800291e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800290a:	f7fe feff 	bl	800170c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002918:	d901      	bls.n	800291e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e028      	b.n	8002970 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <HAL_PWREx_ConfigSupply+0xb0>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800292a:	d1ee      	bne.n	800290a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b1e      	cmp	r3, #30
 8002930:	d008      	beq.n	8002944 <HAL_PWREx_ConfigSupply+0x7c>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b2e      	cmp	r3, #46	; 0x2e
 8002936:	d005      	beq.n	8002944 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b1d      	cmp	r3, #29
 800293c:	d002      	beq.n	8002944 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b2d      	cmp	r3, #45	; 0x2d
 8002942:	d114      	bne.n	800296e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002944:	f7fe fee2 	bl	800170c <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800294a:	e009      	b.n	8002960 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800294c:	f7fe fede 	bl	800170c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800295a:	d901      	bls.n	8002960 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e007      	b.n	8002970 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_PWREx_ConfigSupply+0xb0>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d1ee      	bne.n	800294c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	58024800 	.word	0x58024800

0800297c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a04      	ldr	r2, [pc, #16]	; (8002998 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800298a:	60d3      	str	r3, [r2, #12]
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	58024800 	.word	0x58024800

0800299c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	; 0x30
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f000 bc1d 	b.w	80031ea <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8087 	beq.w	8002acc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029be:	4b99      	ldr	r3, [pc, #612]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029c8:	4b96      	ldr	r3, [pc, #600]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d007      	beq.n	80029e4 <HAL_RCC_OscConfig+0x48>
 80029d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d6:	2b18      	cmp	r3, #24
 80029d8:	d110      	bne.n	80029fc <HAL_RCC_OscConfig+0x60>
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d10b      	bne.n	80029fc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	4b8f      	ldr	r3, [pc, #572]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d06c      	beq.n	8002aca <HAL_RCC_OscConfig+0x12e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d168      	bne.n	8002aca <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e3f6      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a04:	d106      	bne.n	8002a14 <HAL_RCC_OscConfig+0x78>
 8002a06:	4b87      	ldr	r3, [pc, #540]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a86      	ldr	r2, [pc, #536]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e02e      	b.n	8002a72 <HAL_RCC_OscConfig+0xd6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10c      	bne.n	8002a36 <HAL_RCC_OscConfig+0x9a>
 8002a1c:	4b81      	ldr	r3, [pc, #516]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a80      	ldr	r2, [pc, #512]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b7e      	ldr	r3, [pc, #504]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a7d      	ldr	r2, [pc, #500]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	e01d      	b.n	8002a72 <HAL_RCC_OscConfig+0xd6>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a3e:	d10c      	bne.n	8002a5a <HAL_RCC_OscConfig+0xbe>
 8002a40:	4b78      	ldr	r3, [pc, #480]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a77      	ldr	r2, [pc, #476]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b75      	ldr	r3, [pc, #468]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a74      	ldr	r2, [pc, #464]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	e00b      	b.n	8002a72 <HAL_RCC_OscConfig+0xd6>
 8002a5a:	4b72      	ldr	r3, [pc, #456]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a71      	ldr	r2, [pc, #452]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	4b6f      	ldr	r3, [pc, #444]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a6e      	ldr	r2, [pc, #440]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d013      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fe47 	bl	800170c <HAL_GetTick>
 8002a7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a82:	f7fe fe43 	bl	800170c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b64      	cmp	r3, #100	; 0x64
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e3aa      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a94:	4b63      	ldr	r3, [pc, #396]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0xe6>
 8002aa0:	e014      	b.n	8002acc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7fe fe33 	bl	800170c <HAL_GetTick>
 8002aa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aaa:	f7fe fe2f 	bl	800170c <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b64      	cmp	r3, #100	; 0x64
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e396      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002abc:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f0      	bne.n	8002aaa <HAL_RCC_OscConfig+0x10e>
 8002ac8:	e000      	b.n	8002acc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80cb 	beq.w	8002c70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ada:	4b52      	ldr	r3, [pc, #328]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ae2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ae4:	4b4f      	ldr	r3, [pc, #316]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d007      	beq.n	8002b00 <HAL_RCC_OscConfig+0x164>
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	2b18      	cmp	r3, #24
 8002af4:	d156      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x208>
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d151      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b00:	4b48      	ldr	r3, [pc, #288]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_OscConfig+0x17c>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e368      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b18:	4b42      	ldr	r3, [pc, #264]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 0219 	bic.w	r2, r3, #25
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	493f      	ldr	r1, [pc, #252]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b2a:	f7fe fdef 	bl	800170c <HAL_GetTick>
 8002b2e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b32:	f7fe fdeb 	bl	800170c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e352      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b44:	4b37      	ldr	r3, [pc, #220]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	f7fe fe0c 	bl	800176c <HAL_GetREVID>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d817      	bhi.n	8002b8e <HAL_RCC_OscConfig+0x1f2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b40      	cmp	r3, #64	; 0x40
 8002b64:	d108      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1dc>
 8002b66:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b6e:	4a2d      	ldr	r2, [pc, #180]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b74:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b76:	e07b      	b.n	8002c70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	031b      	lsls	r3, r3, #12
 8002b86:	4927      	ldr	r1, [pc, #156]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b8c:	e070      	b.n	8002c70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8e:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	061b      	lsls	r3, r3, #24
 8002b9c:	4921      	ldr	r1, [pc, #132]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba2:	e065      	b.n	8002c70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d048      	beq.n	8002c3e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f023 0219 	bic.w	r2, r3, #25
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	491a      	ldr	r1, [pc, #104]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fda5 	bl	800170c <HAL_GetTick>
 8002bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7fe fda1 	bl	800170c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e308      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bd8:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	f7fe fdc2 	bl	800176c <HAL_GetREVID>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d81a      	bhi.n	8002c28 <HAL_RCC_OscConfig+0x28c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b40      	cmp	r3, #64	; 0x40
 8002bf8:	d108      	bne.n	8002c0c <HAL_RCC_OscConfig+0x270>
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c02:	4a08      	ldr	r2, [pc, #32]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c08:	6053      	str	r3, [r2, #4]
 8002c0a:	e031      	b.n	8002c70 <HAL_RCC_OscConfig+0x2d4>
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	031b      	lsls	r3, r3, #12
 8002c1a:	4902      	ldr	r1, [pc, #8]	; (8002c24 <HAL_RCC_OscConfig+0x288>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
 8002c20:	e026      	b.n	8002c70 <HAL_RCC_OscConfig+0x2d4>
 8002c22:	bf00      	nop
 8002c24:	58024400 	.word	0x58024400
 8002c28:	4b9a      	ldr	r3, [pc, #616]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	061b      	lsls	r3, r3, #24
 8002c36:	4997      	ldr	r1, [pc, #604]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
 8002c3c:	e018      	b.n	8002c70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3e:	4b95      	ldr	r3, [pc, #596]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a94      	ldr	r2, [pc, #592]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7fe fd5f 	bl	800170c <HAL_GetTick>
 8002c4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c52:	f7fe fd5b 	bl	800170c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e2c2      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c64:	4b8b      	ldr	r3, [pc, #556]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f0      	bne.n	8002c52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a9 	beq.w	8002dd0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7e:	4b85      	ldr	r3, [pc, #532]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c88:	4b82      	ldr	r3, [pc, #520]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d007      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x308>
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b18      	cmp	r3, #24
 8002c98:	d13a      	bne.n	8002d10 <HAL_RCC_OscConfig+0x374>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d135      	bne.n	8002d10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ca4:	4b7b      	ldr	r3, [pc, #492]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_OscConfig+0x320>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	2b80      	cmp	r3, #128	; 0x80
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e296      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cbc:	f7fe fd56 	bl	800176c <HAL_GetREVID>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d817      	bhi.n	8002cfa <HAL_RCC_OscConfig+0x35e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d108      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x348>
 8002cd2:	4b70      	ldr	r3, [pc, #448]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cda:	4a6e      	ldr	r2, [pc, #440]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ce0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ce2:	e075      	b.n	8002dd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ce4:	4b6b      	ldr	r3, [pc, #428]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	069b      	lsls	r3, r3, #26
 8002cf2:	4968      	ldr	r1, [pc, #416]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cf8:	e06a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cfa:	4b66      	ldr	r3, [pc, #408]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	061b      	lsls	r3, r3, #24
 8002d08:	4962      	ldr	r1, [pc, #392]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d0e:	e05f      	b.n	8002dd0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d042      	beq.n	8002d9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d18:	4b5e      	ldr	r3, [pc, #376]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a5d      	ldr	r2, [pc, #372]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe fcf2 	bl	800170c <HAL_GetTick>
 8002d28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d2c:	f7fe fcee 	bl	800170c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e255      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d3e:	4b55      	ldr	r3, [pc, #340]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d4a:	f7fe fd0f 	bl	800176c <HAL_GetREVID>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d817      	bhi.n	8002d88 <HAL_RCC_OscConfig+0x3ec>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d108      	bne.n	8002d72 <HAL_RCC_OscConfig+0x3d6>
 8002d60:	4b4c      	ldr	r3, [pc, #304]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d68:	4a4a      	ldr	r2, [pc, #296]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002d6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d6e:	6053      	str	r3, [r2, #4]
 8002d70:	e02e      	b.n	8002dd0 <HAL_RCC_OscConfig+0x434>
 8002d72:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	069b      	lsls	r3, r3, #26
 8002d80:	4944      	ldr	r1, [pc, #272]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
 8002d86:	e023      	b.n	8002dd0 <HAL_RCC_OscConfig+0x434>
 8002d88:	4b42      	ldr	r3, [pc, #264]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	493f      	ldr	r1, [pc, #252]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60cb      	str	r3, [r1, #12]
 8002d9c:	e018      	b.n	8002dd0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d9e:	4b3d      	ldr	r3, [pc, #244]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a3c      	ldr	r2, [pc, #240]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe fcaf 	bl	800170c <HAL_GetTick>
 8002dae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002db2:	f7fe fcab 	bl	800170c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e212      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dc4:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d036      	beq.n	8002e4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d019      	beq.n	8002e18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de4:	4b2b      	ldr	r3, [pc, #172]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de8:	4a2a      	ldr	r2, [pc, #168]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7fe fc8c 	bl	800170c <HAL_GetTick>
 8002df4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df8:	f7fe fc88 	bl	800170c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1ef      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e0a:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x45c>
 8002e16:	e018      	b.n	8002e4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e18:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1c:	4a1d      	ldr	r2, [pc, #116]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002e1e:	f023 0301 	bic.w	r3, r3, #1
 8002e22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fc72 	bl	800170c <HAL_GetTick>
 8002e28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fc6e 	bl	800170c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1d5      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d039      	beq.n	8002eca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d01c      	beq.n	8002e98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a0c      	ldr	r2, [pc, #48]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e6a:	f7fe fc4f 	bl	800170c <HAL_GetTick>
 8002e6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e72:	f7fe fc4b 	bl	800170c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e1b2      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <HAL_RCC_OscConfig+0x4f8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x4d6>
 8002e90:	e01b      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
 8002e92:	bf00      	nop
 8002e94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e98:	4b9b      	ldr	r3, [pc, #620]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a9a      	ldr	r2, [pc, #616]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ea2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fc32 	bl	800170c <HAL_GetTick>
 8002ea8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002eac:	f7fe fc2e 	bl	800170c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e195      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ebe:	4b92      	ldr	r3, [pc, #584]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8081 	beq.w	8002fda <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ed8:	4b8c      	ldr	r3, [pc, #560]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a8b      	ldr	r2, [pc, #556]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ee4:	f7fe fc12 	bl	800170c <HAL_GetTick>
 8002ee8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002eec:	f7fe fc0e 	bl	800170c <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	; 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e175      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002efe:	4b83      	ldr	r3, [pc, #524]	; (800310c <HAL_RCC_OscConfig+0x770>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d106      	bne.n	8002f20 <HAL_RCC_OscConfig+0x584>
 8002f12:	4b7d      	ldr	r3, [pc, #500]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a7c      	ldr	r2, [pc, #496]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1e:	e02d      	b.n	8002f7c <HAL_RCC_OscConfig+0x5e0>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x5a6>
 8002f28:	4b77      	ldr	r3, [pc, #476]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	4a76      	ldr	r2, [pc, #472]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	6713      	str	r3, [r2, #112]	; 0x70
 8002f34:	4b74      	ldr	r3, [pc, #464]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	4a73      	ldr	r2, [pc, #460]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002f3a:	f023 0304 	bic.w	r3, r3, #4
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f40:	e01c      	b.n	8002f7c <HAL_RCC_OscConfig+0x5e0>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b05      	cmp	r3, #5
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x5c8>
 8002f4a:	4b6f      	ldr	r3, [pc, #444]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	4a6e      	ldr	r2, [pc, #440]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002f50:	f043 0304 	orr.w	r3, r3, #4
 8002f54:	6713      	str	r3, [r2, #112]	; 0x70
 8002f56:	4b6c      	ldr	r3, [pc, #432]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	4a6b      	ldr	r2, [pc, #428]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6713      	str	r3, [r2, #112]	; 0x70
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0x5e0>
 8002f64:	4b68      	ldr	r3, [pc, #416]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a67      	ldr	r2, [pc, #412]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	4b65      	ldr	r3, [pc, #404]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	4a64      	ldr	r2, [pc, #400]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002f76:	f023 0304 	bic.w	r3, r3, #4
 8002f7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d015      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f84:	f7fe fbc2 	bl	800170c <HAL_GetTick>
 8002f88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fbbe 	bl	800170c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e123      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fa2:	4b59      	ldr	r3, [pc, #356]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0ee      	beq.n	8002f8c <HAL_RCC_OscConfig+0x5f0>
 8002fae:	e014      	b.n	8002fda <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb0:	f7fe fbac 	bl	800170c <HAL_GetTick>
 8002fb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb8:	f7fe fba8 	bl	800170c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e10d      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fce:	4b4e      	ldr	r3, [pc, #312]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1ee      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8102 	beq.w	80031e8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002fe4:	4b48      	ldr	r3, [pc, #288]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fec:	2b18      	cmp	r3, #24
 8002fee:	f000 80bd 	beq.w	800316c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	f040 809e 	bne.w	8003138 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffc:	4b42      	ldr	r3, [pc, #264]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a41      	ldr	r2, [pc, #260]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8003002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fb80 	bl	800170c <HAL_GetTick>
 800300c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003010:	f7fe fb7c 	bl	800170c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e0e3      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003022:	4b39      	ldr	r3, [pc, #228]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800302e:	4b36      	ldr	r3, [pc, #216]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8003030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003032:	4b37      	ldr	r3, [pc, #220]	; (8003110 <HAL_RCC_OscConfig+0x774>)
 8003034:	4013      	ands	r3, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800303e:	0112      	lsls	r2, r2, #4
 8003040:	430a      	orrs	r2, r1
 8003042:	4931      	ldr	r1, [pc, #196]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8003044:	4313      	orrs	r3, r2
 8003046:	628b      	str	r3, [r1, #40]	; 0x28
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	3b01      	subs	r3, #1
 800304e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003056:	3b01      	subs	r3, #1
 8003058:	025b      	lsls	r3, r3, #9
 800305a:	b29b      	uxth	r3, r3
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	3b01      	subs	r3, #1
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003070:	3b01      	subs	r3, #1
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003078:	4923      	ldr	r1, [pc, #140]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 800307a:	4313      	orrs	r3, r2
 800307c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800307e:	4b22      	ldr	r3, [pc, #136]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	4a21      	ldr	r2, [pc, #132]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800308a:	4b1f      	ldr	r3, [pc, #124]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 800308c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800308e:	4b21      	ldr	r3, [pc, #132]	; (8003114 <HAL_RCC_OscConfig+0x778>)
 8003090:	4013      	ands	r3, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003096:	00d2      	lsls	r2, r2, #3
 8003098:	491b      	ldr	r1, [pc, #108]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 800309a:	4313      	orrs	r3, r2
 800309c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800309e:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	f023 020c 	bic.w	r2, r3, #12
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	4917      	ldr	r1, [pc, #92]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030b0:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	f023 0202 	bic.w	r2, r3, #2
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030bc:	4912      	ldr	r1, [pc, #72]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	4a10      	ldr	r2, [pc, #64]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 80030d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 80030e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	4a07      	ldr	r2, [pc, #28]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a04      	ldr	r2, [pc, #16]	; (8003108 <HAL_RCC_OscConfig+0x76c>)
 80030f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fe:	f7fe fb05 	bl	800170c <HAL_GetTick>
 8003102:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003104:	e011      	b.n	800312a <HAL_RCC_OscConfig+0x78e>
 8003106:	bf00      	nop
 8003108:	58024400 	.word	0x58024400
 800310c:	58024800 	.word	0x58024800
 8003110:	fffffc0c 	.word	0xfffffc0c
 8003114:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe faf8 	bl	800170c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e05f      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800312a:	4b32      	ldr	r3, [pc, #200]	; (80031f4 <HAL_RCC_OscConfig+0x858>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x77c>
 8003136:	e057      	b.n	80031e8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003138:	4b2e      	ldr	r3, [pc, #184]	; (80031f4 <HAL_RCC_OscConfig+0x858>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a2d      	ldr	r2, [pc, #180]	; (80031f4 <HAL_RCC_OscConfig+0x858>)
 800313e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe fae2 	bl	800170c <HAL_GetTick>
 8003148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe fade 	bl	800170c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e045      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800315e:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <HAL_RCC_OscConfig+0x858>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x7b0>
 800316a:	e03d      	b.n	80031e8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800316c:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <HAL_RCC_OscConfig+0x858>)
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <HAL_RCC_OscConfig+0x858>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	2b01      	cmp	r3, #1
 800317e:	d031      	beq.n	80031e4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f003 0203 	and.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d12a      	bne.n	80031e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d122      	bne.n	80031e4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d11a      	bne.n	80031e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	0a5b      	lsrs	r3, r3, #9
 80031b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d111      	bne.n	80031e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	0c1b      	lsrs	r3, r3, #16
 80031c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d108      	bne.n	80031e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	0e1b      	lsrs	r3, r3, #24
 80031d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3730      	adds	r7, #48	; 0x30
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	58024400 	.word	0x58024400

080031f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e19c      	b.n	8003546 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b8a      	ldr	r3, [pc, #552]	; (8003438 <HAL_RCC_ClockConfig+0x240>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d910      	bls.n	800323c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b87      	ldr	r3, [pc, #540]	; (8003438 <HAL_RCC_ClockConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 020f 	bic.w	r2, r3, #15
 8003222:	4985      	ldr	r1, [pc, #532]	; (8003438 <HAL_RCC_ClockConfig+0x240>)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b83      	ldr	r3, [pc, #524]	; (8003438 <HAL_RCC_ClockConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e184      	b.n	8003546 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d010      	beq.n	800326a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	4b7b      	ldr	r3, [pc, #492]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003254:	429a      	cmp	r2, r3
 8003256:	d908      	bls.n	800326a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003258:	4b78      	ldr	r3, [pc, #480]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	4975      	ldr	r1, [pc, #468]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 8003266:	4313      	orrs	r3, r2
 8003268:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d010      	beq.n	8003298 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	4b70      	ldr	r3, [pc, #448]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003282:	429a      	cmp	r2, r3
 8003284:	d908      	bls.n	8003298 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003286:	4b6d      	ldr	r3, [pc, #436]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	496a      	ldr	r1, [pc, #424]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 8003294:	4313      	orrs	r3, r2
 8003296:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d010      	beq.n	80032c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699a      	ldr	r2, [r3, #24]
 80032a8:	4b64      	ldr	r3, [pc, #400]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d908      	bls.n	80032c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032b4:	4b61      	ldr	r3, [pc, #388]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	495e      	ldr	r1, [pc, #376]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d010      	beq.n	80032f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69da      	ldr	r2, [r3, #28]
 80032d6:	4b59      	ldr	r3, [pc, #356]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032de:	429a      	cmp	r2, r3
 80032e0:	d908      	bls.n	80032f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032e2:	4b56      	ldr	r3, [pc, #344]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	4953      	ldr	r1, [pc, #332]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d010      	beq.n	8003322 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	4b4d      	ldr	r3, [pc, #308]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	429a      	cmp	r2, r3
 800330e:	d908      	bls.n	8003322 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003310:	4b4a      	ldr	r3, [pc, #296]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f023 020f 	bic.w	r2, r3, #15
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4947      	ldr	r1, [pc, #284]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 800331e:	4313      	orrs	r3, r2
 8003320:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d055      	beq.n	80033da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800332e:	4b43      	ldr	r3, [pc, #268]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	4940      	ldr	r1, [pc, #256]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 800333c:	4313      	orrs	r3, r2
 800333e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d107      	bne.n	8003358 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003348:	4b3c      	ldr	r3, [pc, #240]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d121      	bne.n	8003398 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0f6      	b.n	8003546 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d107      	bne.n	8003370 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003360:	4b36      	ldr	r3, [pc, #216]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d115      	bne.n	8003398 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0ea      	b.n	8003546 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d107      	bne.n	8003388 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003378:	4b30      	ldr	r3, [pc, #192]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d109      	bne.n	8003398 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0de      	b.n	8003546 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003388:	4b2c      	ldr	r3, [pc, #176]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0d6      	b.n	8003546 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003398:	4b28      	ldr	r3, [pc, #160]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	f023 0207 	bic.w	r2, r3, #7
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4925      	ldr	r1, [pc, #148]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033aa:	f7fe f9af 	bl	800170c <HAL_GetTick>
 80033ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b0:	e00a      	b.n	80033c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b2:	f7fe f9ab 	bl	800170c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e0be      	b.n	8003546 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c8:	4b1c      	ldr	r3, [pc, #112]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d1eb      	bne.n	80033b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d010      	beq.n	8003408 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d208      	bcs.n	8003408 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f023 020f 	bic.w	r2, r3, #15
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	490e      	ldr	r1, [pc, #56]	; (800343c <HAL_RCC_ClockConfig+0x244>)
 8003404:	4313      	orrs	r3, r2
 8003406:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_RCC_ClockConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d214      	bcs.n	8003440 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_RCC_ClockConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 020f 	bic.w	r2, r3, #15
 800341e:	4906      	ldr	r1, [pc, #24]	; (8003438 <HAL_RCC_ClockConfig+0x240>)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	4b04      	ldr	r3, [pc, #16]	; (8003438 <HAL_RCC_ClockConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d005      	beq.n	8003440 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e086      	b.n	8003546 <HAL_RCC_ClockConfig+0x34e>
 8003438:	52002000 	.word	0x52002000
 800343c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d010      	beq.n	800346e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	4b3f      	ldr	r3, [pc, #252]	; (8003550 <HAL_RCC_ClockConfig+0x358>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003458:	429a      	cmp	r2, r3
 800345a:	d208      	bcs.n	800346e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800345c:	4b3c      	ldr	r3, [pc, #240]	; (8003550 <HAL_RCC_ClockConfig+0x358>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	4939      	ldr	r1, [pc, #228]	; (8003550 <HAL_RCC_ClockConfig+0x358>)
 800346a:	4313      	orrs	r3, r2
 800346c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d010      	beq.n	800349c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	4b34      	ldr	r3, [pc, #208]	; (8003550 <HAL_RCC_ClockConfig+0x358>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003486:	429a      	cmp	r2, r3
 8003488:	d208      	bcs.n	800349c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800348a:	4b31      	ldr	r3, [pc, #196]	; (8003550 <HAL_RCC_ClockConfig+0x358>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	492e      	ldr	r1, [pc, #184]	; (8003550 <HAL_RCC_ClockConfig+0x358>)
 8003498:	4313      	orrs	r3, r2
 800349a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d010      	beq.n	80034ca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699a      	ldr	r2, [r3, #24]
 80034ac:	4b28      	ldr	r3, [pc, #160]	; (8003550 <HAL_RCC_ClockConfig+0x358>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d208      	bcs.n	80034ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034b8:	4b25      	ldr	r3, [pc, #148]	; (8003550 <HAL_RCC_ClockConfig+0x358>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	4922      	ldr	r1, [pc, #136]	; (8003550 <HAL_RCC_ClockConfig+0x358>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d010      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69da      	ldr	r2, [r3, #28]
 80034da:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_RCC_ClockConfig+0x358>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d208      	bcs.n	80034f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80034e6:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <HAL_RCC_ClockConfig+0x358>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	4917      	ldr	r1, [pc, #92]	; (8003550 <HAL_RCC_ClockConfig+0x358>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034f8:	f000 f834 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b14      	ldr	r3, [pc, #80]	; (8003550 <HAL_RCC_ClockConfig+0x358>)
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	0a1b      	lsrs	r3, r3, #8
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	4912      	ldr	r1, [pc, #72]	; (8003554 <HAL_RCC_ClockConfig+0x35c>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
 8003514:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003516:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <HAL_RCC_ClockConfig+0x358>)
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <HAL_RCC_ClockConfig+0x35c>)
 8003520:	5cd3      	ldrb	r3, [r2, r3]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
 800352c:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <HAL_RCC_ClockConfig+0x360>)
 800352e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003530:	4a0a      	ldr	r2, [pc, #40]	; (800355c <HAL_RCC_ClockConfig+0x364>)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <HAL_RCC_ClockConfig+0x368>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe f89c 	bl	8001678 <HAL_InitTick>
 8003540:	4603      	mov	r3, r0
 8003542:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003544:	7bfb      	ldrb	r3, [r7, #15]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	58024400 	.word	0x58024400
 8003554:	080089e4 	.word	0x080089e4
 8003558:	24000004 	.word	0x24000004
 800355c:	24000000 	.word	0x24000000
 8003560:	24000008 	.word	0x24000008

08003564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800356a:	4bb3      	ldr	r3, [pc, #716]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003572:	2b18      	cmp	r3, #24
 8003574:	f200 8155 	bhi.w	8003822 <HAL_RCC_GetSysClockFreq+0x2be>
 8003578:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <HAL_RCC_GetSysClockFreq+0x1c>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	080035e5 	.word	0x080035e5
 8003584:	08003823 	.word	0x08003823
 8003588:	08003823 	.word	0x08003823
 800358c:	08003823 	.word	0x08003823
 8003590:	08003823 	.word	0x08003823
 8003594:	08003823 	.word	0x08003823
 8003598:	08003823 	.word	0x08003823
 800359c:	08003823 	.word	0x08003823
 80035a0:	0800360b 	.word	0x0800360b
 80035a4:	08003823 	.word	0x08003823
 80035a8:	08003823 	.word	0x08003823
 80035ac:	08003823 	.word	0x08003823
 80035b0:	08003823 	.word	0x08003823
 80035b4:	08003823 	.word	0x08003823
 80035b8:	08003823 	.word	0x08003823
 80035bc:	08003823 	.word	0x08003823
 80035c0:	08003611 	.word	0x08003611
 80035c4:	08003823 	.word	0x08003823
 80035c8:	08003823 	.word	0x08003823
 80035cc:	08003823 	.word	0x08003823
 80035d0:	08003823 	.word	0x08003823
 80035d4:	08003823 	.word	0x08003823
 80035d8:	08003823 	.word	0x08003823
 80035dc:	08003823 	.word	0x08003823
 80035e0:	08003617 	.word	0x08003617
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035e4:	4b94      	ldr	r3, [pc, #592]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035f0:	4b91      	ldr	r3, [pc, #580]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	08db      	lsrs	r3, r3, #3
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	4a90      	ldr	r2, [pc, #576]	; (800383c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003600:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003602:	e111      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003604:	4b8d      	ldr	r3, [pc, #564]	; (800383c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003606:	61bb      	str	r3, [r7, #24]
    break;
 8003608:	e10e      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800360a:	4b8d      	ldr	r3, [pc, #564]	; (8003840 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800360c:	61bb      	str	r3, [r7, #24]
    break;
 800360e:	e10b      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003610:	4b8c      	ldr	r3, [pc, #560]	; (8003844 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003612:	61bb      	str	r3, [r7, #24]
    break;
 8003614:	e108      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003616:	4b88      	ldr	r3, [pc, #544]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003620:	4b85      	ldr	r3, [pc, #532]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800362a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800362c:	4b82      	ldr	r3, [pc, #520]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003636:	4b80      	ldr	r3, [pc, #512]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363a:	08db      	lsrs	r3, r3, #3
 800363c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80e1 	beq.w	800381c <HAL_RCC_GetSysClockFreq+0x2b8>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b02      	cmp	r3, #2
 800365e:	f000 8083 	beq.w	8003768 <HAL_RCC_GetSysClockFreq+0x204>
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b02      	cmp	r3, #2
 8003666:	f200 80a1 	bhi.w	80037ac <HAL_RCC_GetSysClockFreq+0x248>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0x114>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d056      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003676:	e099      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003678:	4b6f      	ldr	r3, [pc, #444]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d02d      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003684:	4b6c      	ldr	r3, [pc, #432]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	08db      	lsrs	r3, r3, #3
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	4a6b      	ldr	r2, [pc, #428]	; (800383c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
 8003694:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	ee07 3a90 	vmov	s15, r3
 800369c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ae:	4b62      	ldr	r3, [pc, #392]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036be:	ed97 6a02 	vldr	s12, [r7, #8]
 80036c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003848 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80036de:	e087      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800384c <HAL_RCC_GetSysClockFreq+0x2e8>
 80036ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036f2:	4b51      	ldr	r3, [pc, #324]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003702:	ed97 6a02 	vldr	s12, [r7, #8]
 8003706:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800370a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800370e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800371a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003722:	e065      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003850 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003736:	4b40      	ldr	r3, [pc, #256]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003746:	ed97 6a02 	vldr	s12, [r7, #8]
 800374a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800374e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800375a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800375e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003766:	e043      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003772:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003854 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800377a:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800378a:	ed97 6a02 	vldr	s12, [r7, #8]
 800378e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003848 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800379a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800379e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037aa:	e021      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003850 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037be:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80037d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003848 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037ee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	0a5b      	lsrs	r3, r3, #9
 80037f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037fa:	3301      	adds	r3, #1
 80037fc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003808:	edd7 6a07 	vldr	s13, [r7, #28]
 800380c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003814:	ee17 3a90 	vmov	r3, s15
 8003818:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800381a:	e005      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	61bb      	str	r3, [r7, #24]
    break;
 8003820:	e002      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003822:	4b07      	ldr	r3, [pc, #28]	; (8003840 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003824:	61bb      	str	r3, [r7, #24]
    break;
 8003826:	bf00      	nop
  }

  return sysclockfreq;
 8003828:	69bb      	ldr	r3, [r7, #24]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3724      	adds	r7, #36	; 0x24
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	58024400 	.word	0x58024400
 800383c:	03d09000 	.word	0x03d09000
 8003840:	003d0900 	.word	0x003d0900
 8003844:	007a1200 	.word	0x007a1200
 8003848:	46000000 	.word	0x46000000
 800384c:	4c742400 	.word	0x4c742400
 8003850:	4a742400 	.word	0x4a742400
 8003854:	4af42400 	.word	0x4af42400

08003858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800385e:	f7ff fe81 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8003862:	4602      	mov	r2, r0
 8003864:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	490f      	ldr	r1, [pc, #60]	; (80038ac <HAL_RCC_GetHCLKFreq+0x54>)
 8003870:	5ccb      	ldrb	r3, [r1, r3]
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	fa22 f303 	lsr.w	r3, r2, r3
 800387a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	4a09      	ldr	r2, [pc, #36]	; (80038ac <HAL_RCC_GetHCLKFreq+0x54>)
 8003886:	5cd3      	ldrb	r3, [r2, r3]
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	fa22 f303 	lsr.w	r3, r2, r3
 8003892:	4a07      	ldr	r2, [pc, #28]	; (80038b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003894:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003896:	4a07      	ldr	r2, [pc, #28]	; (80038b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	58024400 	.word	0x58024400
 80038ac:	080089e4 	.word	0x080089e4
 80038b0:	24000004 	.word	0x24000004
 80038b4:	24000000 	.word	0x24000000

080038b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80038bc:	f7ff ffcc 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	4904      	ldr	r1, [pc, #16]	; (80038e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	f003 031f 	and.w	r3, r3, #31
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80038d8:	4618      	mov	r0, r3
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	58024400 	.word	0x58024400
 80038e0:	080089e4 	.word	0x080089e4

080038e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80038e8:	f7ff ffb6 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	4904      	ldr	r1, [pc, #16]	; (800390c <HAL_RCC_GetPCLK2Freq+0x28>)
 80038fa:	5ccb      	ldrb	r3, [r1, r3]
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	58024400 	.word	0x58024400
 800390c:	080089e4 	.word	0x080089e4

08003910 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003918:	2300      	movs	r3, #0
 800391a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800391c:	2300      	movs	r3, #0
 800391e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d03f      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003930:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003934:	d02a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003936:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800393a:	d824      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800393c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003940:	d018      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003946:	d81e      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800394c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003950:	d007      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003952:	e018      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003954:	4ba3      	ldr	r3, [pc, #652]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4aa2      	ldr	r2, [pc, #648]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800395a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003960:	e015      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3304      	adds	r3, #4
 8003966:	2102      	movs	r1, #2
 8003968:	4618      	mov	r0, r3
 800396a:	f001 f9d5 	bl	8004d18 <RCCEx_PLL2_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003972:	e00c      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3324      	adds	r3, #36	; 0x24
 8003978:	2102      	movs	r1, #2
 800397a:	4618      	mov	r0, r3
 800397c:	f001 fa7e 	bl	8004e7c <RCCEx_PLL3_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003984:	e003      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
      break;
 800398a:	e000      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800398c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003994:	4b93      	ldr	r3, [pc, #588]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003998:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039a0:	4990      	ldr	r1, [pc, #576]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	650b      	str	r3, [r1, #80]	; 0x50
 80039a6:	e001      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
 80039aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d03d      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d826      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039dd 	.word	0x080039dd
 80039cc:	080039eb 	.word	0x080039eb
 80039d0:	080039fd 	.word	0x080039fd
 80039d4:	08003a15 	.word	0x08003a15
 80039d8:	08003a15 	.word	0x08003a15
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039dc:	4b81      	ldr	r3, [pc, #516]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	4a80      	ldr	r2, [pc, #512]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039e8:	e015      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3304      	adds	r3, #4
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 f991 	bl	8004d18 <RCCEx_PLL2_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039fa:	e00c      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3324      	adds	r3, #36	; 0x24
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 fa3a 	bl	8004e7c <RCCEx_PLL3_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a0c:	e003      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
      break;
 8003a12:	e000      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003a14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d109      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a1c:	4b71      	ldr	r3, [pc, #452]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a20:	f023 0207 	bic.w	r2, r3, #7
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	496e      	ldr	r1, [pc, #440]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	650b      	str	r3, [r1, #80]	; 0x50
 8003a2e:	e001      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d042      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a48:	d02b      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4e:	d825      	bhi.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a50:	2bc0      	cmp	r3, #192	; 0xc0
 8003a52:	d028      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a54:	2bc0      	cmp	r3, #192	; 0xc0
 8003a56:	d821      	bhi.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a58:	2b80      	cmp	r3, #128	; 0x80
 8003a5a:	d016      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003a5c:	2b80      	cmp	r3, #128	; 0x80
 8003a5e:	d81d      	bhi.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d007      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003a68:	e018      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a6a:	4b5e      	ldr	r3, [pc, #376]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	4a5d      	ldr	r2, [pc, #372]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a76:	e017      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 f94a 	bl	8004d18 <RCCEx_PLL2_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a88:	e00e      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3324      	adds	r3, #36	; 0x24
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f001 f9f3 	bl	8004e7c <RCCEx_PLL3_Config>
 8003a96:	4603      	mov	r3, r0
 8003a98:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a9a:	e005      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa0:	e002      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003aae:	4b4d      	ldr	r3, [pc, #308]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	494a      	ldr	r1, [pc, #296]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	650b      	str	r3, [r1, #80]	; 0x50
 8003ac0:	e001      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
 8003ac4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d049      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ad8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003adc:	d030      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003ade:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ae2:	d82a      	bhi.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ae4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ae8:	d02c      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003aea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003aee:	d824      	bhi.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af4:	d018      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afa:	d81e      	bhi.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003b00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b04:	d007      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003b06:	e018      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b08:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	4a35      	ldr	r2, [pc, #212]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b14:	e017      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f001 f8fb 	bl	8004d18 <RCCEx_PLL2_Config>
 8003b22:	4603      	mov	r3, r0
 8003b24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b26:	e00e      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3324      	adds	r3, #36	; 0x24
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 f9a4 	bl	8004e7c <RCCEx_PLL3_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b38:	e005      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b3e:	e002      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003b40:	bf00      	nop
 8003b42:	e000      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10a      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b4c:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b50:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b5a:	4922      	ldr	r1, [pc, #136]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	658b      	str	r3, [r1, #88]	; 0x58
 8003b60:	e001      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
 8003b64:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d04b      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b7c:	d030      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003b7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b82:	d82a      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b88:	d02e      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003b8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b8e:	d824      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b94:	d018      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003b96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b9a:	d81e      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ba4:	d007      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003ba6:	e018      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba8:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	4a0d      	ldr	r2, [pc, #52]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bb4:	e019      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 f8ab 	bl	8004d18 <RCCEx_PLL2_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003bc6:	e010      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3324      	adds	r3, #36	; 0x24
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f001 f954 	bl	8004e7c <RCCEx_PLL3_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bd8:	e007      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8003bde:	e004      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003be0:	bf00      	nop
 8003be2:	e002      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003be4:	58024400 	.word	0x58024400
      break;
 8003be8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003bf0:	4b99      	ldr	r3, [pc, #612]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bfe:	4996      	ldr	r1, [pc, #600]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	658b      	str	r3, [r1, #88]	; 0x58
 8003c04:	e001      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c06:	7dfb      	ldrb	r3, [r7, #23]
 8003c08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d032      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1a:	2b30      	cmp	r3, #48	; 0x30
 8003c1c:	d01c      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003c1e:	2b30      	cmp	r3, #48	; 0x30
 8003c20:	d817      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d00c      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d813      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d016      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003c2e:	2b10      	cmp	r3, #16
 8003c30:	d10f      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c32:	4b89      	ldr	r3, [pc, #548]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	4a88      	ldr	r2, [pc, #544]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003c3e:	e00e      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	2102      	movs	r1, #2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 f866 	bl	8004d18 <RCCEx_PLL2_Config>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003c50:	e005      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	75fb      	strb	r3, [r7, #23]
      break;
 8003c56:	e002      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003c58:	bf00      	nop
 8003c5a:	e000      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c64:	4b7c      	ldr	r3, [pc, #496]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c70:	4979      	ldr	r1, [pc, #484]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c76:	e001      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
 8003c7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d047      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c90:	d030      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003c92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c96:	d82a      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003c98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c9c:	d02c      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003c9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ca2:	d824      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca8:	d018      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cae:	d81e      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb8:	d007      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003cba:	e018      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cbc:	4b66      	ldr	r3, [pc, #408]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	4a65      	ldr	r2, [pc, #404]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cc8:	e017      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 f821 	bl	8004d18 <RCCEx_PLL2_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cda:	e00e      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3324      	adds	r3, #36	; 0x24
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f001 f8ca 	bl	8004e7c <RCCEx_PLL3_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cec:	e005      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf2:	e002      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003cf4:	bf00      	nop
 8003cf6:	e000      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d109      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d00:	4b55      	ldr	r3, [pc, #340]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d04:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0c:	4952      	ldr	r1, [pc, #328]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	650b      	str	r3, [r1, #80]	; 0x50
 8003d12:	e001      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d049      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d2c:	d02e      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d32:	d828      	bhi.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003d34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d38:	d02a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003d3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d3e:	d822      	bhi.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003d40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d44:	d026      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003d46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d4a:	d81c      	bhi.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003d4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d50:	d010      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003d52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d56:	d816      	bhi.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01d      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d60:	d111      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3304      	adds	r3, #4
 8003d66:	2101      	movs	r1, #1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 ffd5 	bl	8004d18 <RCCEx_PLL2_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d72:	e012      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3324      	adds	r3, #36	; 0x24
 8003d78:	2101      	movs	r1, #1
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 f87e 	bl	8004e7c <RCCEx_PLL3_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d84:	e009      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	75fb      	strb	r3, [r7, #23]
      break;
 8003d8a:	e006      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003d8c:	bf00      	nop
 8003d8e:	e004      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003d90:	bf00      	nop
 8003d92:	e002      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003d94:	bf00      	nop
 8003d96:	e000      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d109      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003da0:	4b2d      	ldr	r3, [pc, #180]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dac:	492a      	ldr	r1, [pc, #168]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	650b      	str	r3, [r1, #80]	; 0x50
 8003db2:	e001      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
 8003db6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d04d      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dce:	d02e      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dd4:	d828      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dda:	d02a      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de0:	d822      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003de2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003de6:	d026      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003de8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dec:	d81c      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df2:	d010      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df8:	d816      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d01d      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e02:	d111      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	2101      	movs	r1, #1
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 ff84 	bl	8004d18 <RCCEx_PLL2_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e14:	e012      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3324      	adds	r3, #36	; 0x24
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f001 f82d 	bl	8004e7c <RCCEx_PLL3_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e26:	e009      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2c:	e006      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e004      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003e32:	bf00      	nop
 8003e34:	e002      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003e36:	bf00      	nop
 8003e38:	e000      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e42:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e46:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e50:	4901      	ldr	r1, [pc, #4]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	658b      	str	r3, [r1, #88]	; 0x58
 8003e56:	e003      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003e58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d02f      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e74:	d00e      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e7a:	d814      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d015      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003e80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e84:	d10f      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e86:	4baf      	ldr	r3, [pc, #700]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	4aae      	ldr	r2, [pc, #696]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e92:	e00c      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 ff3c 	bl	8004d18 <RCCEx_PLL2_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ea4:	e003      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eaa:	e000      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d109      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003eb4:	4ba3      	ldr	r3, [pc, #652]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec0:	49a0      	ldr	r1, [pc, #640]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	650b      	str	r3, [r1, #80]	; 0x50
 8003ec6:	e001      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
 8003eca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d032      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d81b      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003ee0:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003f1f 	.word	0x08003f1f
 8003eec:	08003ef9 	.word	0x08003ef9
 8003ef0:	08003f07 	.word	0x08003f07
 8003ef4:	08003f1f 	.word	0x08003f1f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef8:	4b92      	ldr	r3, [pc, #584]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	4a91      	ldr	r2, [pc, #580]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f04:	e00c      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 ff03 	bl	8004d18 <RCCEx_PLL2_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f16:	e003      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f1c:	e000      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f26:	4b87      	ldr	r3, [pc, #540]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2a:	f023 0203 	bic.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	4984      	ldr	r1, [pc, #528]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f38:	e001      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
 8003f3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8086 	beq.w	8004058 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f4c:	4b7e      	ldr	r3, [pc, #504]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a7d      	ldr	r2, [pc, #500]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f58:	f7fd fbd8 	bl	800170c <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f5e:	e009      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f60:	f7fd fbd4 	bl	800170c <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	; 0x64
 8003f6c:	d902      	bls.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	75fb      	strb	r3, [r7, #23]
        break;
 8003f72:	e005      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f74:	4b74      	ldr	r3, [pc, #464]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0ef      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d166      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f86:	4b6f      	ldr	r3, [pc, #444]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f90:	4053      	eors	r3, r2
 8003f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d013      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f9a:	4b6a      	ldr	r3, [pc, #424]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fa4:	4b67      	ldr	r3, [pc, #412]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	4a66      	ldr	r2, [pc, #408]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb0:	4b64      	ldr	r3, [pc, #400]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4a63      	ldr	r2, [pc, #396]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003fbc:	4a61      	ldr	r2, [pc, #388]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fcc:	d115      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fce:	f7fd fb9d 	bl	800170c <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fd4:	e00b      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd6:	f7fd fb99 	bl	800170c <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d902      	bls.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	75fb      	strb	r3, [r7, #23]
            break;
 8003fec:	e005      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fee:	4b55      	ldr	r3, [pc, #340]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0ed      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003ffa:	7dfb      	ldrb	r3, [r7, #23]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d126      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800400e:	d10d      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004010:	4b4c      	ldr	r3, [pc, #304]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800401e:	0919      	lsrs	r1, r3, #4
 8004020:	4b4a      	ldr	r3, [pc, #296]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004022:	400b      	ands	r3, r1
 8004024:	4947      	ldr	r1, [pc, #284]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004026:	4313      	orrs	r3, r2
 8004028:	610b      	str	r3, [r1, #16]
 800402a:	e005      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800402c:	4b45      	ldr	r3, [pc, #276]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	4a44      	ldr	r2, [pc, #272]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004032:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004036:	6113      	str	r3, [r2, #16]
 8004038:	4b42      	ldr	r3, [pc, #264]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800403a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004046:	493f      	ldr	r1, [pc, #252]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004048:	4313      	orrs	r3, r2
 800404a:	670b      	str	r3, [r1, #112]	; 0x70
 800404c:	e004      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800404e:	7dfb      	ldrb	r3, [r7, #23]
 8004050:	75bb      	strb	r3, [r7, #22]
 8004052:	e001      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	7dfb      	ldrb	r3, [r7, #23]
 8004056:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8085 	beq.w	8004170 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406a:	2b28      	cmp	r3, #40	; 0x28
 800406c:	d866      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	08004151 	.word	0x08004151
 8004078:	0800413d 	.word	0x0800413d
 800407c:	0800413d 	.word	0x0800413d
 8004080:	0800413d 	.word	0x0800413d
 8004084:	0800413d 	.word	0x0800413d
 8004088:	0800413d 	.word	0x0800413d
 800408c:	0800413d 	.word	0x0800413d
 8004090:	0800413d 	.word	0x0800413d
 8004094:	08004119 	.word	0x08004119
 8004098:	0800413d 	.word	0x0800413d
 800409c:	0800413d 	.word	0x0800413d
 80040a0:	0800413d 	.word	0x0800413d
 80040a4:	0800413d 	.word	0x0800413d
 80040a8:	0800413d 	.word	0x0800413d
 80040ac:	0800413d 	.word	0x0800413d
 80040b0:	0800413d 	.word	0x0800413d
 80040b4:	0800412b 	.word	0x0800412b
 80040b8:	0800413d 	.word	0x0800413d
 80040bc:	0800413d 	.word	0x0800413d
 80040c0:	0800413d 	.word	0x0800413d
 80040c4:	0800413d 	.word	0x0800413d
 80040c8:	0800413d 	.word	0x0800413d
 80040cc:	0800413d 	.word	0x0800413d
 80040d0:	0800413d 	.word	0x0800413d
 80040d4:	08004151 	.word	0x08004151
 80040d8:	0800413d 	.word	0x0800413d
 80040dc:	0800413d 	.word	0x0800413d
 80040e0:	0800413d 	.word	0x0800413d
 80040e4:	0800413d 	.word	0x0800413d
 80040e8:	0800413d 	.word	0x0800413d
 80040ec:	0800413d 	.word	0x0800413d
 80040f0:	0800413d 	.word	0x0800413d
 80040f4:	08004151 	.word	0x08004151
 80040f8:	0800413d 	.word	0x0800413d
 80040fc:	0800413d 	.word	0x0800413d
 8004100:	0800413d 	.word	0x0800413d
 8004104:	0800413d 	.word	0x0800413d
 8004108:	0800413d 	.word	0x0800413d
 800410c:	0800413d 	.word	0x0800413d
 8004110:	0800413d 	.word	0x0800413d
 8004114:	08004151 	.word	0x08004151
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3304      	adds	r3, #4
 800411c:	2101      	movs	r1, #1
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fdfa 	bl	8004d18 <RCCEx_PLL2_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004128:	e013      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3324      	adds	r3, #36	; 0x24
 800412e:	2101      	movs	r1, #1
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fea3 	bl	8004e7c <RCCEx_PLL3_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800413a:	e00a      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	75fb      	strb	r3, [r7, #23]
      break;
 8004140:	e007      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004142:	bf00      	nop
 8004144:	58024400 	.word	0x58024400
 8004148:	58024800 	.word	0x58024800
 800414c:	00ffffcf 	.word	0x00ffffcf
      break;
 8004150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004152:	7dfb      	ldrb	r3, [r7, #23]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004158:	4b96      	ldr	r3, [pc, #600]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004164:	4993      	ldr	r1, [pc, #588]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	654b      	str	r3, [r1, #84]	; 0x54
 800416a:	e001      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416c:	7dfb      	ldrb	r3, [r7, #23]
 800416e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d038      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004180:	2b05      	cmp	r3, #5
 8004182:	d821      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004184:	a201      	add	r2, pc, #4	; (adr r2, 800418c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	080041cf 	.word	0x080041cf
 8004190:	080041a5 	.word	0x080041a5
 8004194:	080041b7 	.word	0x080041b7
 8004198:	080041cf 	.word	0x080041cf
 800419c:	080041cf 	.word	0x080041cf
 80041a0:	080041cf 	.word	0x080041cf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	2101      	movs	r1, #1
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fdb4 	bl	8004d18 <RCCEx_PLL2_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041b4:	e00c      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3324      	adds	r3, #36	; 0x24
 80041ba:	2101      	movs	r1, #1
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fe5d 	bl	8004e7c <RCCEx_PLL3_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041c6:	e003      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	75fb      	strb	r3, [r7, #23]
      break;
 80041cc:	e000      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80041ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041d6:	4b77      	ldr	r3, [pc, #476]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	f023 0207 	bic.w	r2, r3, #7
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e2:	4974      	ldr	r1, [pc, #464]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	654b      	str	r3, [r1, #84]	; 0x54
 80041e8:	e001      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
 80041ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d03a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	2b05      	cmp	r3, #5
 8004202:	d821      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004204:	a201      	add	r2, pc, #4	; (adr r2, 800420c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	0800424f 	.word	0x0800424f
 8004210:	08004225 	.word	0x08004225
 8004214:	08004237 	.word	0x08004237
 8004218:	0800424f 	.word	0x0800424f
 800421c:	0800424f 	.word	0x0800424f
 8004220:	0800424f 	.word	0x0800424f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3304      	adds	r3, #4
 8004228:	2101      	movs	r1, #1
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fd74 	bl	8004d18 <RCCEx_PLL2_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004234:	e00c      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3324      	adds	r3, #36	; 0x24
 800423a:	2101      	movs	r1, #1
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fe1d 	bl	8004e7c <RCCEx_PLL3_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004246:	e003      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	75fb      	strb	r3, [r7, #23]
      break;
 800424c:	e000      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800424e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004256:	4b57      	ldr	r3, [pc, #348]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	f023 0207 	bic.w	r2, r3, #7
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004264:	4953      	ldr	r1, [pc, #332]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004266:	4313      	orrs	r3, r2
 8004268:	658b      	str	r3, [r1, #88]	; 0x58
 800426a:	e001      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d04b      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004286:	d02e      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800428c:	d828      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800428e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004292:	d02a      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004298:	d822      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800429a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800429e:	d026      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80042a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042a4:	d81c      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80042a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042aa:	d010      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80042ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042b0:	d816      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01d      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80042b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ba:	d111      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fd28 	bl	8004d18 <RCCEx_PLL2_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042cc:	e012      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3324      	adds	r3, #36	; 0x24
 80042d2:	2102      	movs	r1, #2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fdd1 	bl	8004e7c <RCCEx_PLL3_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042de:	e009      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	75fb      	strb	r3, [r7, #23]
      break;
 80042e4:	e006      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80042e6:	bf00      	nop
 80042e8:	e004      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80042ea:	bf00      	nop
 80042ec:	e002      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80042ee:	bf00      	nop
 80042f0:	e000      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80042f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042fa:	4b2e      	ldr	r3, [pc, #184]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004308:	492a      	ldr	r1, [pc, #168]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800430a:	4313      	orrs	r3, r2
 800430c:	654b      	str	r3, [r1, #84]	; 0x54
 800430e:	e001      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d04d      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004326:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800432a:	d02e      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800432c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004330:	d828      	bhi.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004336:	d02a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433c:	d822      	bhi.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800433e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004342:	d026      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004344:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004348:	d81c      	bhi.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800434a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434e:	d010      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004354:	d816      	bhi.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01d      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800435a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435e:	d111      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3304      	adds	r3, #4
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fcd6 	bl	8004d18 <RCCEx_PLL2_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004370:	e012      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3324      	adds	r3, #36	; 0x24
 8004376:	2102      	movs	r1, #2
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fd7f 	bl	8004e7c <RCCEx_PLL3_Config>
 800437e:	4603      	mov	r3, r0
 8004380:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004382:	e009      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	75fb      	strb	r3, [r7, #23]
      break;
 8004388:	e006      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800438a:	bf00      	nop
 800438c:	e004      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800438e:	bf00      	nop
 8004390:	e002      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10c      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80043a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ac:	4901      	ldr	r1, [pc, #4]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	658b      	str	r3, [r1, #88]	; 0x58
 80043b2:	e003      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80043b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
 80043ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d04b      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043d2:	d02e      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80043d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043d8:	d828      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80043da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043de:	d02a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80043e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e4:	d822      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80043e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043ea:	d026      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80043ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043f0:	d81c      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80043f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043f6:	d010      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80043f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043fc:	d816      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d01d      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004406:	d111      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	2100      	movs	r1, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fc82 	bl	8004d18 <RCCEx_PLL2_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004418:	e012      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3324      	adds	r3, #36	; 0x24
 800441e:	2102      	movs	r1, #2
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fd2b 	bl	8004e7c <RCCEx_PLL3_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800442a:	e009      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	75fb      	strb	r3, [r7, #23]
      break;
 8004430:	e006      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004432:	bf00      	nop
 8004434:	e004      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800443e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004440:	7dfb      	ldrb	r3, [r7, #23]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004446:	4b9d      	ldr	r3, [pc, #628]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004454:	4999      	ldr	r1, [pc, #612]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004456:	4313      	orrs	r3, r2
 8004458:	658b      	str	r3, [r1, #88]	; 0x58
 800445a:	e001      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445c:	7dfb      	ldrb	r3, [r7, #23]
 800445e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01a      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004476:	d10a      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3324      	adds	r3, #36	; 0x24
 800447c:	2102      	movs	r1, #2
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fcfc 	bl	8004e7c <RCCEx_PLL3_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800448e:	4b8b      	ldr	r3, [pc, #556]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800449c:	4987      	ldr	r1, [pc, #540]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b8:	d10a      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3324      	adds	r3, #36	; 0x24
 80044be:	2102      	movs	r1, #2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fcdb 	bl	8004e7c <RCCEx_PLL3_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044d0:	4b7a      	ldr	r3, [pc, #488]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044de:	4977      	ldr	r1, [pc, #476]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d034      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044fa:	d01d      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80044fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004500:	d817      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450a:	d009      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800450c:	e011      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3304      	adds	r3, #4
 8004512:	2100      	movs	r1, #0
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fbff 	bl	8004d18 <RCCEx_PLL2_Config>
 800451a:	4603      	mov	r3, r0
 800451c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800451e:	e00c      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3324      	adds	r3, #36	; 0x24
 8004524:	2102      	movs	r1, #2
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fca8 	bl	8004e7c <RCCEx_PLL3_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004530:	e003      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	75fb      	strb	r3, [r7, #23]
      break;
 8004536:	e000      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800453a:	7dfb      	ldrb	r3, [r7, #23]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004540:	4b5e      	ldr	r3, [pc, #376]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004544:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800454e:	495b      	ldr	r1, [pc, #364]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004550:	4313      	orrs	r3, r2
 8004552:	658b      	str	r3, [r1, #88]	; 0x58
 8004554:	e001      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d033      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800456c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004570:	d01c      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004572:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004576:	d816      	bhi.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800457c:	d003      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800457e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004582:	d007      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004584:	e00f      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004586:	4b4d      	ldr	r3, [pc, #308]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	4a4c      	ldr	r2, [pc, #304]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800458c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004590:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004592:	e00c      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3324      	adds	r3, #36	; 0x24
 8004598:	2101      	movs	r1, #1
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fc6e 	bl	8004e7c <RCCEx_PLL3_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80045a4:	e003      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	75fb      	strb	r3, [r7, #23]
      break;
 80045aa:	e000      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80045ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ae:	7dfb      	ldrb	r3, [r7, #23]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045b4:	4b41      	ldr	r3, [pc, #260]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c2:	493e      	ldr	r1, [pc, #248]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	654b      	str	r3, [r1, #84]	; 0x54
 80045c8:	e001      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
 80045cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d029      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80045e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e6:	d007      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80045e8:	e00f      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ea:	4b34      	ldr	r3, [pc, #208]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	4a33      	ldr	r2, [pc, #204]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80045f6:	e00b      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	2102      	movs	r1, #2
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fb8a 	bl	8004d18 <RCCEx_PLL2_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004608:	e002      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
      break;
 800460e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004610:	7dfb      	ldrb	r3, [r7, #23]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004616:	4b29      	ldr	r3, [pc, #164]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004622:	4926      	ldr	r1, [pc, #152]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004624:	4313      	orrs	r3, r2
 8004626:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004628:	e001      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462a:	7dfb      	ldrb	r3, [r7, #23]
 800462c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3324      	adds	r3, #36	; 0x24
 800463e:	2102      	movs	r1, #2
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fc1b 	bl	8004e7c <RCCEx_PLL3_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d033      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004664:	d017      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800466a:	d811      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800466c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004670:	d013      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004676:	d80b      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d010      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800467c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004680:	d106      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004682:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	4a0d      	ldr	r2, [pc, #52]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800468c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800468e:	e007      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	75fb      	strb	r3, [r7, #23]
      break;
 8004694:	e004      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004696:	bf00      	nop
 8004698:	e002      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800469e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10c      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046b2:	4902      	ldr	r1, [pc, #8]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	654b      	str	r3, [r1, #84]	; 0x54
 80046b8:	e004      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80046ba:	bf00      	nop
 80046bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	7dfb      	ldrb	r3, [r7, #23]
 80046c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046d0:	4b31      	ldr	r3, [pc, #196]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	492e      	ldr	r1, [pc, #184]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d009      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80046ee:	4b2a      	ldr	r3, [pc, #168]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046fc:	4926      	ldr	r1, [pc, #152]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800470e:	4b22      	ldr	r3, [pc, #136]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004712:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471a:	491f      	ldr	r1, [pc, #124]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800471c:	4313      	orrs	r3, r2
 800471e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00d      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800472c:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	4a19      	ldr	r2, [pc, #100]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004732:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004736:	6113      	str	r3, [r2, #16]
 8004738:	4b17      	ldr	r3, [pc, #92]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004742:	4915      	ldr	r1, [pc, #84]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004744:	4313      	orrs	r3, r2
 8004746:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	da08      	bge.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004750:	4b11      	ldr	r3, [pc, #68]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004754:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475c:	490e      	ldr	r1, [pc, #56]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800475e:	4313      	orrs	r3, r2
 8004760:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800476e:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004772:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	4906      	ldr	r1, [pc, #24]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800477e:	4313      	orrs	r3, r2
 8004780:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004782:	7dbb      	ldrb	r3, [r7, #22]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	e000      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	58024400 	.word	0x58024400

0800479c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047a0:	f7ff f85a 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 80047a4:	4602      	mov	r2, r0
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	4904      	ldr	r1, [pc, #16]	; (80047c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047b2:	5ccb      	ldrb	r3, [r1, r3]
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047bc:	4618      	mov	r0, r3
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	58024400 	.word	0x58024400
 80047c4:	080089e4 	.word	0x080089e4

080047c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	; 0x24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047d0:	4ba1      	ldr	r3, [pc, #644]	; (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80047da:	4b9f      	ldr	r3, [pc, #636]	; (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	0b1b      	lsrs	r3, r3, #12
 80047e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047e6:	4b9c      	ldr	r3, [pc, #624]	; (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	091b      	lsrs	r3, r3, #4
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80047f2:	4b99      	ldr	r3, [pc, #612]	; (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	08db      	lsrs	r3, r3, #3
 80047f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8111 	beq.w	8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b02      	cmp	r3, #2
 800481a:	f000 8083 	beq.w	8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b02      	cmp	r3, #2
 8004822:	f200 80a1 	bhi.w	8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d056      	beq.n	80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004832:	e099      	b.n	8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004834:	4b88      	ldr	r3, [pc, #544]	; (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d02d      	beq.n	800489c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004840:	4b85      	ldr	r3, [pc, #532]	; (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	08db      	lsrs	r3, r3, #3
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	4a84      	ldr	r2, [pc, #528]	; (8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
 8004850:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	ee07 3a90 	vmov	s15, r3
 8004858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486a:	4b7b      	ldr	r3, [pc, #492]	; (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487a:	ed97 6a03 	vldr	s12, [r7, #12]
 800487e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800488e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800489a:	e087      	b.n	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ae:	4b6a      	ldr	r3, [pc, #424]	; (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048be:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048de:	e065      	b.n	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f2:	4b59      	ldr	r3, [pc, #356]	; (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004902:	ed97 6a03 	vldr	s12, [r7, #12]
 8004906:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800490a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004922:	e043      	b.n	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004936:	4b48      	ldr	r3, [pc, #288]	; (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004946:	ed97 6a03 	vldr	s12, [r7, #12]
 800494a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800494e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800495a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004962:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004966:	e021      	b.n	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497a:	4b37      	ldr	r3, [pc, #220]	; (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498a:	ed97 6a03 	vldr	s12, [r7, #12]
 800498e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800499e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80049ac:	4b2a      	ldr	r3, [pc, #168]	; (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	0a5b      	lsrs	r3, r3, #9
 80049b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d2:	ee17 2a90 	vmov	r2, s15
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80049da:	4b1f      	ldr	r3, [pc, #124]	; (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	0c1b      	lsrs	r3, r3, #16
 80049e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e4:	ee07 3a90 	vmov	s15, r3
 80049e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a00:	ee17 2a90 	vmov	r2, s15
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004a08:	4b13      	ldr	r3, [pc, #76]	; (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	0e1b      	lsrs	r3, r3, #24
 8004a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a2e:	ee17 2a90 	vmov	r2, s15
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a36:	e008      	b.n	8004a4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	609a      	str	r2, [r3, #8]
}
 8004a4a:	bf00      	nop
 8004a4c:	3724      	adds	r7, #36	; 0x24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	58024400 	.word	0x58024400
 8004a5c:	03d09000 	.word	0x03d09000
 8004a60:	46000000 	.word	0x46000000
 8004a64:	4c742400 	.word	0x4c742400
 8004a68:	4a742400 	.word	0x4a742400
 8004a6c:	4af42400 	.word	0x4af42400

08004a70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	; 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a78:	4ba1      	ldr	r3, [pc, #644]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7c:	f003 0303 	and.w	r3, r3, #3
 8004a80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004a82:	4b9f      	ldr	r3, [pc, #636]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	0d1b      	lsrs	r3, r3, #20
 8004a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a8e:	4b9c      	ldr	r3, [pc, #624]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	0a1b      	lsrs	r3, r3, #8
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004a9a:	4b99      	ldr	r3, [pc, #612]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9e:	08db      	lsrs	r3, r3, #3
 8004aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 8111 	beq.w	8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	f000 8083 	beq.w	8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	f200 80a1 	bhi.w	8004c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d056      	beq.n	8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ada:	e099      	b.n	8004c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004adc:	4b88      	ldr	r3, [pc, #544]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d02d      	beq.n	8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ae8:	4b85      	ldr	r3, [pc, #532]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	08db      	lsrs	r3, r3, #3
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	4a84      	ldr	r2, [pc, #528]	; (8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
 8004af8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	ee07 3a90 	vmov	s15, r3
 8004b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b12:	4b7b      	ldr	r3, [pc, #492]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b42:	e087      	b.n	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b56:	4b6a      	ldr	r3, [pc, #424]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b86:	e065      	b.n	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9a:	4b59      	ldr	r3, [pc, #356]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bca:	e043      	b.n	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bde:	4b48      	ldr	r3, [pc, #288]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c0e:	e021      	b.n	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c22:	4b37      	ldr	r3, [pc, #220]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004c54:	4b2a      	ldr	r3, [pc, #168]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	0a5b      	lsrs	r3, r3, #9
 8004c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c7a:	ee17 2a90 	vmov	r2, s15
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004c82:	4b1f      	ldr	r3, [pc, #124]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	0c1b      	lsrs	r3, r3, #16
 8004c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c8c:	ee07 3a90 	vmov	s15, r3
 8004c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ca8:	ee17 2a90 	vmov	r2, s15
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004cb0:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	0e1b      	lsrs	r3, r3, #24
 8004cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd6:	ee17 2a90 	vmov	r2, s15
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cde:	e008      	b.n	8004cf2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	609a      	str	r2, [r3, #8]
}
 8004cf2:	bf00      	nop
 8004cf4:	3724      	adds	r7, #36	; 0x24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	58024400 	.word	0x58024400
 8004d04:	03d09000 	.word	0x03d09000
 8004d08:	46000000 	.word	0x46000000
 8004d0c:	4c742400 	.word	0x4c742400
 8004d10:	4a742400 	.word	0x4a742400
 8004d14:	4af42400 	.word	0x4af42400

08004d18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d26:	4b53      	ldr	r3, [pc, #332]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d101      	bne.n	8004d36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e099      	b.n	8004e6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d36:	4b4f      	ldr	r3, [pc, #316]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a4e      	ldr	r2, [pc, #312]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d42:	f7fc fce3 	bl	800170c <HAL_GetTick>
 8004d46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d48:	e008      	b.n	8004d5c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d4a:	f7fc fcdf 	bl	800170c <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e086      	b.n	8004e6a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d5c:	4b45      	ldr	r3, [pc, #276]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1f0      	bne.n	8004d4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d68:	4b42      	ldr	r3, [pc, #264]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	031b      	lsls	r3, r3, #12
 8004d76:	493f      	ldr	r1, [pc, #252]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	628b      	str	r3, [r1, #40]	; 0x28
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	025b      	lsls	r3, r3, #9
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	041b      	lsls	r3, r3, #16
 8004d9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	061b      	lsls	r3, r3, #24
 8004da8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004dac:	4931      	ldr	r1, [pc, #196]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004db2:	4b30      	ldr	r3, [pc, #192]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	492d      	ldr	r1, [pc, #180]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004dc4:	4b2b      	ldr	r3, [pc, #172]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	f023 0220 	bic.w	r2, r3, #32
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	4928      	ldr	r1, [pc, #160]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004dd6:	4b27      	ldr	r3, [pc, #156]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	4a26      	ldr	r2, [pc, #152]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	f023 0310 	bic.w	r3, r3, #16
 8004de0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004de2:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004de4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de6:	4b24      	ldr	r3, [pc, #144]	; (8004e78 <RCCEx_PLL2_Config+0x160>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	69d2      	ldr	r2, [r2, #28]
 8004dee:	00d2      	lsls	r2, r2, #3
 8004df0:	4920      	ldr	r1, [pc, #128]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004df6:	4b1f      	ldr	r3, [pc, #124]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dfc:	f043 0310 	orr.w	r3, r3, #16
 8004e00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d106      	bne.n	8004e16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e08:	4b1a      	ldr	r3, [pc, #104]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	4a19      	ldr	r2, [pc, #100]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e14:	e00f      	b.n	8004e36 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d106      	bne.n	8004e2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e1c:	4b15      	ldr	r3, [pc, #84]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	4a14      	ldr	r2, [pc, #80]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e28:	e005      	b.n	8004e36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e2a:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	4a11      	ldr	r2, [pc, #68]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e36:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a0e      	ldr	r2, [pc, #56]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e42:	f7fc fc63 	bl	800170c <HAL_GetTick>
 8004e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e48:	e008      	b.n	8004e5c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004e4a:	f7fc fc5f 	bl	800170c <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e006      	b.n	8004e6a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	58024400 	.word	0x58024400
 8004e78:	ffff0007 	.word	0xffff0007

08004e7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e8a:	4b53      	ldr	r3, [pc, #332]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d101      	bne.n	8004e9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e099      	b.n	8004fce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e9a:	4b4f      	ldr	r3, [pc, #316]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a4e      	ldr	r2, [pc, #312]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea6:	f7fc fc31 	bl	800170c <HAL_GetTick>
 8004eaa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004eac:	e008      	b.n	8004ec0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004eae:	f7fc fc2d 	bl	800170c <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e086      	b.n	8004fce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ec0:	4b45      	ldr	r3, [pc, #276]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f0      	bne.n	8004eae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ecc:	4b42      	ldr	r3, [pc, #264]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	051b      	lsls	r3, r3, #20
 8004eda:	493f      	ldr	r1, [pc, #252]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	628b      	str	r3, [r1, #40]	; 0x28
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	025b      	lsls	r3, r3, #9
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f10:	4931      	ldr	r1, [pc, #196]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f16:	4b30      	ldr	r3, [pc, #192]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	492d      	ldr	r1, [pc, #180]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f28:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	4928      	ldr	r1, [pc, #160]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f3a:	4b27      	ldr	r3, [pc, #156]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	4a26      	ldr	r2, [pc, #152]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f46:	4b24      	ldr	r3, [pc, #144]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f4a:	4b24      	ldr	r3, [pc, #144]	; (8004fdc <RCCEx_PLL3_Config+0x160>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	69d2      	ldr	r2, [r2, #28]
 8004f52:	00d2      	lsls	r2, r2, #3
 8004f54:	4920      	ldr	r1, [pc, #128]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f5a:	4b1f      	ldr	r3, [pc, #124]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5e:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	4a19      	ldr	r2, [pc, #100]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f78:	e00f      	b.n	8004f9a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d106      	bne.n	8004f8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f80:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	4a14      	ldr	r2, [pc, #80]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f8c:	e005      	b.n	8004f9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f8e:	4b12      	ldr	r3, [pc, #72]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	4a11      	ldr	r2, [pc, #68]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f9a:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a0e      	ldr	r2, [pc, #56]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa6:	f7fc fbb1 	bl	800170c <HAL_GetTick>
 8004faa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fac:	e008      	b.n	8004fc0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004fae:	f7fc fbad 	bl	800170c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e006      	b.n	8004fce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	58024400 	.word	0x58024400
 8004fdc:	ffff0007 	.word	0xffff0007

08004fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e049      	b.n	8005086 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fc f890 	bl	800112c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f000 fd46 	bl	8005ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d001      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e054      	b.n	8005152 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a26      	ldr	r2, [pc, #152]	; (8005160 <HAL_TIM_Base_Start_IT+0xd0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d022      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d2:	d01d      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a22      	ldr	r2, [pc, #136]	; (8005164 <HAL_TIM_Base_Start_IT+0xd4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d018      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a21      	ldr	r2, [pc, #132]	; (8005168 <HAL_TIM_Base_Start_IT+0xd8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d013      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1f      	ldr	r2, [pc, #124]	; (800516c <HAL_TIM_Base_Start_IT+0xdc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00e      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <HAL_TIM_Base_Start_IT+0xe0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d009      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <HAL_TIM_Base_Start_IT+0xe4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1b      	ldr	r2, [pc, #108]	; (8005178 <HAL_TIM_Base_Start_IT+0xe8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d115      	bne.n	800513c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	4b19      	ldr	r3, [pc, #100]	; (800517c <HAL_TIM_Base_Start_IT+0xec>)
 8005118:	4013      	ands	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b06      	cmp	r3, #6
 8005120:	d015      	beq.n	800514e <HAL_TIM_Base_Start_IT+0xbe>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005128:	d011      	beq.n	800514e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0201 	orr.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513a:	e008      	b.n	800514e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	e000      	b.n	8005150 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40010000 	.word	0x40010000
 8005164:	40000400 	.word	0x40000400
 8005168:	40000800 	.word	0x40000800
 800516c:	40000c00 	.word	0x40000c00
 8005170:	40010400 	.word	0x40010400
 8005174:	40001800 	.word	0x40001800
 8005178:	40014000 	.word	0x40014000
 800517c:	00010007 	.word	0x00010007

08005180 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e049      	b.n	8005226 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f841 	bl	800522e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f000 fc76 	bl	8005ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d104      	bne.n	8005262 <HAL_TIM_IC_Start_IT+0x1e>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800525e:	b2db      	uxtb	r3, r3
 8005260:	e023      	b.n	80052aa <HAL_TIM_IC_Start_IT+0x66>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b04      	cmp	r3, #4
 8005266:	d104      	bne.n	8005272 <HAL_TIM_IC_Start_IT+0x2e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800526e:	b2db      	uxtb	r3, r3
 8005270:	e01b      	b.n	80052aa <HAL_TIM_IC_Start_IT+0x66>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b08      	cmp	r3, #8
 8005276:	d104      	bne.n	8005282 <HAL_TIM_IC_Start_IT+0x3e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800527e:	b2db      	uxtb	r3, r3
 8005280:	e013      	b.n	80052aa <HAL_TIM_IC_Start_IT+0x66>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b0c      	cmp	r3, #12
 8005286:	d104      	bne.n	8005292 <HAL_TIM_IC_Start_IT+0x4e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800528e:	b2db      	uxtb	r3, r3
 8005290:	e00b      	b.n	80052aa <HAL_TIM_IC_Start_IT+0x66>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b10      	cmp	r3, #16
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_IC_Start_IT+0x5e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	e003      	b.n	80052aa <HAL_TIM_IC_Start_IT+0x66>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d104      	bne.n	80052bc <HAL_TIM_IC_Start_IT+0x78>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	e013      	b.n	80052e4 <HAL_TIM_IC_Start_IT+0xa0>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d104      	bne.n	80052cc <HAL_TIM_IC_Start_IT+0x88>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e00b      	b.n	80052e4 <HAL_TIM_IC_Start_IT+0xa0>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d104      	bne.n	80052dc <HAL_TIM_IC_Start_IT+0x98>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	e003      	b.n	80052e4 <HAL_TIM_IC_Start_IT+0xa0>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052e6:	7bbb      	ldrb	r3, [r7, #14]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d102      	bne.n	80052f2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052ec:	7b7b      	ldrb	r3, [r7, #13]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d001      	beq.n	80052f6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e0e2      	b.n	80054bc <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d104      	bne.n	8005306 <HAL_TIM_IC_Start_IT+0xc2>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005304:	e023      	b.n	800534e <HAL_TIM_IC_Start_IT+0x10a>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b04      	cmp	r3, #4
 800530a:	d104      	bne.n	8005316 <HAL_TIM_IC_Start_IT+0xd2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005314:	e01b      	b.n	800534e <HAL_TIM_IC_Start_IT+0x10a>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d104      	bne.n	8005326 <HAL_TIM_IC_Start_IT+0xe2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005324:	e013      	b.n	800534e <HAL_TIM_IC_Start_IT+0x10a>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b0c      	cmp	r3, #12
 800532a:	d104      	bne.n	8005336 <HAL_TIM_IC_Start_IT+0xf2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005334:	e00b      	b.n	800534e <HAL_TIM_IC_Start_IT+0x10a>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b10      	cmp	r3, #16
 800533a:	d104      	bne.n	8005346 <HAL_TIM_IC_Start_IT+0x102>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005344:	e003      	b.n	800534e <HAL_TIM_IC_Start_IT+0x10a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d104      	bne.n	800535e <HAL_TIM_IC_Start_IT+0x11a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800535c:	e013      	b.n	8005386 <HAL_TIM_IC_Start_IT+0x142>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b04      	cmp	r3, #4
 8005362:	d104      	bne.n	800536e <HAL_TIM_IC_Start_IT+0x12a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800536c:	e00b      	b.n	8005386 <HAL_TIM_IC_Start_IT+0x142>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b08      	cmp	r3, #8
 8005372:	d104      	bne.n	800537e <HAL_TIM_IC_Start_IT+0x13a>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800537c:	e003      	b.n	8005386 <HAL_TIM_IC_Start_IT+0x142>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2202      	movs	r2, #2
 8005382:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b0c      	cmp	r3, #12
 800538a:	d841      	bhi.n	8005410 <HAL_TIM_IC_Start_IT+0x1cc>
 800538c:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <HAL_TIM_IC_Start_IT+0x150>)
 800538e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005392:	bf00      	nop
 8005394:	080053c9 	.word	0x080053c9
 8005398:	08005411 	.word	0x08005411
 800539c:	08005411 	.word	0x08005411
 80053a0:	08005411 	.word	0x08005411
 80053a4:	080053db 	.word	0x080053db
 80053a8:	08005411 	.word	0x08005411
 80053ac:	08005411 	.word	0x08005411
 80053b0:	08005411 	.word	0x08005411
 80053b4:	080053ed 	.word	0x080053ed
 80053b8:	08005411 	.word	0x08005411
 80053bc:	08005411 	.word	0x08005411
 80053c0:	08005411 	.word	0x08005411
 80053c4:	080053ff 	.word	0x080053ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0202 	orr.w	r2, r2, #2
 80053d6:	60da      	str	r2, [r3, #12]
      break;
 80053d8:	e01d      	b.n	8005416 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0204 	orr.w	r2, r2, #4
 80053e8:	60da      	str	r2, [r3, #12]
      break;
 80053ea:	e014      	b.n	8005416 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0208 	orr.w	r2, r2, #8
 80053fa:	60da      	str	r2, [r3, #12]
      break;
 80053fc:	e00b      	b.n	8005416 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0210 	orr.w	r2, r2, #16
 800540c:	60da      	str	r2, [r3, #12]
      break;
 800540e:	e002      	b.n	8005416 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
      break;
 8005414:	bf00      	nop
  }

  if (status == HAL_OK)
 8005416:	7bfb      	ldrb	r3, [r7, #15]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d14e      	bne.n	80054ba <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2201      	movs	r2, #1
 8005422:	6839      	ldr	r1, [r7, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fda5 	bl	8005f74 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a25      	ldr	r2, [pc, #148]	; (80054c4 <HAL_TIM_IC_Start_IT+0x280>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d022      	beq.n	800547a <HAL_TIM_IC_Start_IT+0x236>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543c:	d01d      	beq.n	800547a <HAL_TIM_IC_Start_IT+0x236>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a21      	ldr	r2, [pc, #132]	; (80054c8 <HAL_TIM_IC_Start_IT+0x284>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d018      	beq.n	800547a <HAL_TIM_IC_Start_IT+0x236>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1f      	ldr	r2, [pc, #124]	; (80054cc <HAL_TIM_IC_Start_IT+0x288>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <HAL_TIM_IC_Start_IT+0x236>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a1e      	ldr	r2, [pc, #120]	; (80054d0 <HAL_TIM_IC_Start_IT+0x28c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00e      	beq.n	800547a <HAL_TIM_IC_Start_IT+0x236>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1c      	ldr	r2, [pc, #112]	; (80054d4 <HAL_TIM_IC_Start_IT+0x290>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d009      	beq.n	800547a <HAL_TIM_IC_Start_IT+0x236>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1b      	ldr	r2, [pc, #108]	; (80054d8 <HAL_TIM_IC_Start_IT+0x294>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d004      	beq.n	800547a <HAL_TIM_IC_Start_IT+0x236>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a19      	ldr	r2, [pc, #100]	; (80054dc <HAL_TIM_IC_Start_IT+0x298>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d115      	bne.n	80054a6 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	4b17      	ldr	r3, [pc, #92]	; (80054e0 <HAL_TIM_IC_Start_IT+0x29c>)
 8005482:	4013      	ands	r3, r2
 8005484:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b06      	cmp	r3, #6
 800548a:	d015      	beq.n	80054b8 <HAL_TIM_IC_Start_IT+0x274>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005492:	d011      	beq.n	80054b8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a4:	e008      	b.n	80054b8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e000      	b.n	80054ba <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40010000 	.word	0x40010000
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800
 80054d0:	40000c00 	.word	0x40000c00
 80054d4:	40010400 	.word	0x40010400
 80054d8:	40001800 	.word	0x40001800
 80054dc:	40014000 	.word	0x40014000
 80054e0:	00010007 	.word	0x00010007

080054e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d122      	bne.n	8005540 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b02      	cmp	r3, #2
 8005506:	d11b      	bne.n	8005540 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0202 	mvn.w	r2, #2
 8005510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 faa4 	bl	8005a74 <HAL_TIM_IC_CaptureCallback>
 800552c:	e005      	b.n	800553a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fa96 	bl	8005a60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 faa7 	bl	8005a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b04      	cmp	r3, #4
 800554c:	d122      	bne.n	8005594 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b04      	cmp	r3, #4
 800555a:	d11b      	bne.n	8005594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0204 	mvn.w	r2, #4
 8005564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fa7a 	bl	8005a74 <HAL_TIM_IC_CaptureCallback>
 8005580:	e005      	b.n	800558e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fa6c 	bl	8005a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fa7d 	bl	8005a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d122      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d11b      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0208 	mvn.w	r2, #8
 80055b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2204      	movs	r2, #4
 80055be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fa50 	bl	8005a74 <HAL_TIM_IC_CaptureCallback>
 80055d4:	e005      	b.n	80055e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa42 	bl	8005a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fa53 	bl	8005a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b10      	cmp	r3, #16
 80055f4:	d122      	bne.n	800563c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b10      	cmp	r3, #16
 8005602:	d11b      	bne.n	800563c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0210 	mvn.w	r2, #16
 800560c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2208      	movs	r2, #8
 8005612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa26 	bl	8005a74 <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fa18 	bl	8005a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fa29 	bl	8005a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b01      	cmp	r3, #1
 8005648:	d10e      	bne.n	8005668 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b01      	cmp	r3, #1
 8005656:	d107      	bne.n	8005668 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0201 	mvn.w	r2, #1
 8005660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f9f2 	bl	8005a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b80      	cmp	r3, #128	; 0x80
 8005674:	d10e      	bne.n	8005694 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005680:	2b80      	cmp	r3, #128	; 0x80
 8005682:	d107      	bne.n	8005694 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800568c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fd2e 	bl	80060f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a2:	d10e      	bne.n	80056c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ae:	2b80      	cmp	r3, #128	; 0x80
 80056b0:	d107      	bne.n	80056c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fd21 	bl	8006104 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b40      	cmp	r3, #64	; 0x40
 80056ce:	d10e      	bne.n	80056ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056da:	2b40      	cmp	r3, #64	; 0x40
 80056dc:	d107      	bne.n	80056ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f9d7 	bl	8005a9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	f003 0320 	and.w	r3, r3, #32
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d10e      	bne.n	800571a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b20      	cmp	r3, #32
 8005708:	d107      	bne.n	800571a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f06f 0220 	mvn.w	r2, #32
 8005712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fce1 	bl	80060dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800571a:	bf00      	nop
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b086      	sub	sp, #24
 8005726:	af00      	add	r7, sp, #0
 8005728:	60f8      	str	r0, [r7, #12]
 800572a:	60b9      	str	r1, [r7, #8]
 800572c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_TIM_IC_ConfigChannel+0x1e>
 800573c:	2302      	movs	r3, #2
 800573e:	e088      	b.n	8005852 <HAL_TIM_IC_ConfigChannel+0x130>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d11b      	bne.n	8005786 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6819      	ldr	r1, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f000 fa41 	bl	8005be4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699a      	ldr	r2, [r3, #24]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 020c 	bic.w	r2, r2, #12
 8005770:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6999      	ldr	r1, [r3, #24]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	619a      	str	r2, [r3, #24]
 8005784:	e060      	b.n	8005848 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b04      	cmp	r3, #4
 800578a:	d11c      	bne.n	80057c6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	6819      	ldr	r1, [r3, #0]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f000 fac5 	bl	8005d2a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057ae:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6999      	ldr	r1, [r3, #24]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	021a      	lsls	r2, r3, #8
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	619a      	str	r2, [r3, #24]
 80057c4:	e040      	b.n	8005848 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d11b      	bne.n	8005804 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	6819      	ldr	r1, [r3, #0]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f000 fb12 	bl	8005e04 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	69da      	ldr	r2, [r3, #28]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 020c 	bic.w	r2, r2, #12
 80057ee:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69d9      	ldr	r1, [r3, #28]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	61da      	str	r2, [r3, #28]
 8005802:	e021      	b.n	8005848 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b0c      	cmp	r3, #12
 8005808:	d11c      	bne.n	8005844 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	6819      	ldr	r1, [r3, #0]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f000 fb2f 	bl	8005e7c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800582c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69d9      	ldr	r1, [r3, #28]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	021a      	lsls	r2, r3, #8
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	61da      	str	r2, [r3, #28]
 8005842:	e001      	b.n	8005848 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005850:	7dfb      	ldrb	r3, [r7, #23]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_TIM_ConfigClockSource+0x1c>
 8005874:	2302      	movs	r3, #2
 8005876:	e0dc      	b.n	8005a32 <HAL_TIM_ConfigClockSource+0x1d6>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	4b6a      	ldr	r3, [pc, #424]	; (8005a3c <HAL_TIM_ConfigClockSource+0x1e0>)
 8005894:	4013      	ands	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800589e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a64      	ldr	r2, [pc, #400]	; (8005a40 <HAL_TIM_ConfigClockSource+0x1e4>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	f000 80a9 	beq.w	8005a06 <HAL_TIM_ConfigClockSource+0x1aa>
 80058b4:	4a62      	ldr	r2, [pc, #392]	; (8005a40 <HAL_TIM_ConfigClockSource+0x1e4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	f200 80ae 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x1bc>
 80058bc:	4a61      	ldr	r2, [pc, #388]	; (8005a44 <HAL_TIM_ConfigClockSource+0x1e8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	f000 80a1 	beq.w	8005a06 <HAL_TIM_ConfigClockSource+0x1aa>
 80058c4:	4a5f      	ldr	r2, [pc, #380]	; (8005a44 <HAL_TIM_ConfigClockSource+0x1e8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	f200 80a6 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x1bc>
 80058cc:	4a5e      	ldr	r2, [pc, #376]	; (8005a48 <HAL_TIM_ConfigClockSource+0x1ec>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	f000 8099 	beq.w	8005a06 <HAL_TIM_ConfigClockSource+0x1aa>
 80058d4:	4a5c      	ldr	r2, [pc, #368]	; (8005a48 <HAL_TIM_ConfigClockSource+0x1ec>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	f200 809e 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x1bc>
 80058dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80058e0:	f000 8091 	beq.w	8005a06 <HAL_TIM_ConfigClockSource+0x1aa>
 80058e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80058e8:	f200 8096 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x1bc>
 80058ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f0:	f000 8089 	beq.w	8005a06 <HAL_TIM_ConfigClockSource+0x1aa>
 80058f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f8:	f200 808e 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x1bc>
 80058fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005900:	d03e      	beq.n	8005980 <HAL_TIM_ConfigClockSource+0x124>
 8005902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005906:	f200 8087 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x1bc>
 800590a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590e:	f000 8086 	beq.w	8005a1e <HAL_TIM_ConfigClockSource+0x1c2>
 8005912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005916:	d87f      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005918:	2b70      	cmp	r3, #112	; 0x70
 800591a:	d01a      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0xf6>
 800591c:	2b70      	cmp	r3, #112	; 0x70
 800591e:	d87b      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005920:	2b60      	cmp	r3, #96	; 0x60
 8005922:	d050      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0x16a>
 8005924:	2b60      	cmp	r3, #96	; 0x60
 8005926:	d877      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005928:	2b50      	cmp	r3, #80	; 0x50
 800592a:	d03c      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x14a>
 800592c:	2b50      	cmp	r3, #80	; 0x50
 800592e:	d873      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d058      	beq.n	80059e6 <HAL_TIM_ConfigClockSource+0x18a>
 8005934:	2b40      	cmp	r3, #64	; 0x40
 8005936:	d86f      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005938:	2b30      	cmp	r3, #48	; 0x30
 800593a:	d064      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x1aa>
 800593c:	2b30      	cmp	r3, #48	; 0x30
 800593e:	d86b      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005940:	2b20      	cmp	r3, #32
 8005942:	d060      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x1aa>
 8005944:	2b20      	cmp	r3, #32
 8005946:	d867      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d05c      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x1aa>
 800594c:	2b10      	cmp	r3, #16
 800594e:	d05a      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x1aa>
 8005950:	e062      	b.n	8005a18 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6899      	ldr	r1, [r3, #8]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f000 fae7 	bl	8005f34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005974:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	609a      	str	r2, [r3, #8]
      break;
 800597e:	e04f      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6818      	ldr	r0, [r3, #0]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	6899      	ldr	r1, [r3, #8]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f000 fad0 	bl	8005f34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059a2:	609a      	str	r2, [r3, #8]
      break;
 80059a4:	e03c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	6859      	ldr	r1, [r3, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	461a      	mov	r2, r3
 80059b4:	f000 f98a 	bl	8005ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2150      	movs	r1, #80	; 0x50
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 fa9a 	bl	8005ef8 <TIM_ITRx_SetConfig>
      break;
 80059c4:	e02c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6818      	ldr	r0, [r3, #0]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6859      	ldr	r1, [r3, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	461a      	mov	r2, r3
 80059d4:	f000 f9e6 	bl	8005da4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2160      	movs	r1, #96	; 0x60
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fa8a 	bl	8005ef8 <TIM_ITRx_SetConfig>
      break;
 80059e4:	e01c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6818      	ldr	r0, [r3, #0]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	6859      	ldr	r1, [r3, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	461a      	mov	r2, r3
 80059f4:	f000 f96a 	bl	8005ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2140      	movs	r1, #64	; 0x40
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fa7a 	bl	8005ef8 <TIM_ITRx_SetConfig>
      break;
 8005a04:	e00c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4610      	mov	r0, r2
 8005a12:	f000 fa71 	bl	8005ef8 <TIM_ITRx_SetConfig>
      break;
 8005a16:	e003      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a1c:	e000      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005a1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	ffceff88 	.word	0xffceff88
 8005a40:	00100040 	.word	0x00100040
 8005a44:	00100030 	.word	0x00100030
 8005a48:	00100020 	.word	0x00100020

08005a4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a40      	ldr	r2, [pc, #256]	; (8005bc4 <TIM_Base_SetConfig+0x114>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d013      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ace:	d00f      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a3d      	ldr	r2, [pc, #244]	; (8005bc8 <TIM_Base_SetConfig+0x118>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00b      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a3c      	ldr	r2, [pc, #240]	; (8005bcc <TIM_Base_SetConfig+0x11c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d007      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a3b      	ldr	r2, [pc, #236]	; (8005bd0 <TIM_Base_SetConfig+0x120>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d003      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a3a      	ldr	r2, [pc, #232]	; (8005bd4 <TIM_Base_SetConfig+0x124>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d108      	bne.n	8005b02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a2f      	ldr	r2, [pc, #188]	; (8005bc4 <TIM_Base_SetConfig+0x114>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d01f      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b10:	d01b      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a2c      	ldr	r2, [pc, #176]	; (8005bc8 <TIM_Base_SetConfig+0x118>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d017      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2b      	ldr	r2, [pc, #172]	; (8005bcc <TIM_Base_SetConfig+0x11c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d013      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2a      	ldr	r2, [pc, #168]	; (8005bd0 <TIM_Base_SetConfig+0x120>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00f      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a29      	ldr	r2, [pc, #164]	; (8005bd4 <TIM_Base_SetConfig+0x124>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00b      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a28      	ldr	r2, [pc, #160]	; (8005bd8 <TIM_Base_SetConfig+0x128>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d007      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a27      	ldr	r2, [pc, #156]	; (8005bdc <TIM_Base_SetConfig+0x12c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d003      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a26      	ldr	r2, [pc, #152]	; (8005be0 <TIM_Base_SetConfig+0x130>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d108      	bne.n	8005b5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a10      	ldr	r2, [pc, #64]	; (8005bc4 <TIM_Base_SetConfig+0x114>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00f      	beq.n	8005ba8 <TIM_Base_SetConfig+0xf8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a12      	ldr	r2, [pc, #72]	; (8005bd4 <TIM_Base_SetConfig+0x124>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00b      	beq.n	8005ba8 <TIM_Base_SetConfig+0xf8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a11      	ldr	r2, [pc, #68]	; (8005bd8 <TIM_Base_SetConfig+0x128>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d007      	beq.n	8005ba8 <TIM_Base_SetConfig+0xf8>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a10      	ldr	r2, [pc, #64]	; (8005bdc <TIM_Base_SetConfig+0x12c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_Base_SetConfig+0xf8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a0f      	ldr	r2, [pc, #60]	; (8005be0 <TIM_Base_SetConfig+0x130>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d103      	bne.n	8005bb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	615a      	str	r2, [r3, #20]
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40010000 	.word	0x40010000
 8005bc8:	40000400 	.word	0x40000400
 8005bcc:	40000800 	.word	0x40000800
 8005bd0:	40000c00 	.word	0x40000c00
 8005bd4:	40010400 	.word	0x40010400
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40014400 	.word	0x40014400
 8005be0:	40014800 	.word	0x40014800

08005be4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	f023 0201 	bic.w	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4a28      	ldr	r2, [pc, #160]	; (8005cb0 <TIM_TI1_SetConfig+0xcc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d01b      	beq.n	8005c4a <TIM_TI1_SetConfig+0x66>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c18:	d017      	beq.n	8005c4a <TIM_TI1_SetConfig+0x66>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4a25      	ldr	r2, [pc, #148]	; (8005cb4 <TIM_TI1_SetConfig+0xd0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d013      	beq.n	8005c4a <TIM_TI1_SetConfig+0x66>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4a24      	ldr	r2, [pc, #144]	; (8005cb8 <TIM_TI1_SetConfig+0xd4>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00f      	beq.n	8005c4a <TIM_TI1_SetConfig+0x66>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4a23      	ldr	r2, [pc, #140]	; (8005cbc <TIM_TI1_SetConfig+0xd8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00b      	beq.n	8005c4a <TIM_TI1_SetConfig+0x66>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4a22      	ldr	r2, [pc, #136]	; (8005cc0 <TIM_TI1_SetConfig+0xdc>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d007      	beq.n	8005c4a <TIM_TI1_SetConfig+0x66>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4a21      	ldr	r2, [pc, #132]	; (8005cc4 <TIM_TI1_SetConfig+0xe0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d003      	beq.n	8005c4a <TIM_TI1_SetConfig+0x66>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4a20      	ldr	r2, [pc, #128]	; (8005cc8 <TIM_TI1_SetConfig+0xe4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d101      	bne.n	8005c4e <TIM_TI1_SetConfig+0x6a>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <TIM_TI1_SetConfig+0x6c>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0303 	bic.w	r3, r3, #3
 8005c5a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e003      	b.n	8005c6e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f043 0301 	orr.w	r3, r3, #1
 8005c6c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f023 030a 	bic.w	r3, r3, #10
 8005c88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f003 030a 	and.w	r3, r3, #10
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	40000800 	.word	0x40000800
 8005cbc:	40000c00 	.word	0x40000c00
 8005cc0:	40010400 	.word	0x40010400
 8005cc4:	40001800 	.word	0x40001800
 8005cc8:	40014000 	.word	0x40014000

08005ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	f023 0201 	bic.w	r2, r3, #1
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f023 030a 	bic.w	r3, r3, #10
 8005d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b087      	sub	sp, #28
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
 8005d36:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	f023 0210 	bic.w	r2, r3, #16
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	021b      	lsls	r3, r3, #8
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	031b      	lsls	r3, r3, #12
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	621a      	str	r2, [r3, #32]
}
 8005d98:	bf00      	nop
 8005d9a:	371c      	adds	r7, #28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	f023 0210 	bic.w	r2, r3, #16
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	031b      	lsls	r3, r3, #12
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005de0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	621a      	str	r2, [r3, #32]
}
 8005df8:	bf00      	nop
 8005dfa:	371c      	adds	r7, #28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f023 0303 	bic.w	r3, r3, #3
 8005e30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005e54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	021b      	lsls	r3, r3, #8
 8005e5a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	621a      	str	r2, [r3, #32]
}
 8005e70:	bf00      	nop
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	021b      	lsls	r3, r3, #8
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	031b      	lsls	r3, r3, #12
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005ece:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	031b      	lsls	r3, r3, #12
 8005ed4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	621a      	str	r2, [r3, #32]
}
 8005eea:	bf00      	nop
 8005eec:	371c      	adds	r7, #28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
	...

08005ef8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <TIM_ITRx_SetConfig+0x38>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f043 0307 	orr.w	r3, r3, #7
 8005f1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	609a      	str	r2, [r3, #8]
}
 8005f22:	bf00      	nop
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	ffcfff8f 	.word	0xffcfff8f

08005f34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	021a      	lsls	r2, r3, #8
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	609a      	str	r2, [r3, #8]
}
 8005f68:	bf00      	nop
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 031f 	and.w	r3, r3, #31
 8005f86:	2201      	movs	r2, #1
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a1a      	ldr	r2, [r3, #32]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	43db      	mvns	r3, r3
 8005f96:	401a      	ands	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a1a      	ldr	r2, [r3, #32]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fac:	431a      	orrs	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	621a      	str	r2, [r3, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e06d      	b.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a30      	ldr	r2, [pc, #192]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d004      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a2f      	ldr	r2, [pc, #188]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d108      	bne.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006012:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4313      	orrs	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006024:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a20      	ldr	r2, [pc, #128]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d022      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604a:	d01d      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1d      	ldr	r2, [pc, #116]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d018      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a1c      	ldr	r2, [pc, #112]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d013      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1a      	ldr	r2, [pc, #104]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00e      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a15      	ldr	r2, [pc, #84]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d009      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a16      	ldr	r2, [pc, #88]	; (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d004      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a15      	ldr	r2, [pc, #84]	; (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d10c      	bne.n	80060a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800608e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	4313      	orrs	r3, r2
 8006098:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	40010000 	.word	0x40010000
 80060c4:	40010400 	.word	0x40010400
 80060c8:	40000400 	.word	0x40000400
 80060cc:	40000800 	.word	0x40000800
 80060d0:	40000c00 	.word	0x40000c00
 80060d4:	40001800 	.word	0x40001800
 80060d8:	40014000 	.word	0x40014000

080060dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e042      	b.n	80061b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006130:	2b00      	cmp	r3, #0
 8006132:	d106      	bne.n	8006142 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7fb f85f 	bl	8001200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2224      	movs	r2, #36	; 0x24
 8006146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0201 	bic.w	r2, r2, #1
 8006158:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f8c2 	bl	80062e4 <UART_SetConfig>
 8006160:	4603      	mov	r3, r0
 8006162:	2b01      	cmp	r3, #1
 8006164:	d101      	bne.n	800616a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e022      	b.n	80061b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fe1e 	bl	8006db4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0201 	orr.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fea5 	bl	8006ef8 <UART_CheckIdleState>
 80061ae:	4603      	mov	r3, r0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08a      	sub	sp, #40	; 0x28
 80061bc:	af02      	add	r7, sp, #8
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ce:	2b20      	cmp	r3, #32
 80061d0:	f040 8083 	bne.w	80062da <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_UART_Transmit+0x28>
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e07b      	b.n	80062dc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_UART_Transmit+0x3a>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e074      	b.n	80062dc <HAL_UART_Transmit+0x124>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2221      	movs	r2, #33	; 0x21
 8006206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800620a:	f7fb fa7f 	bl	800170c <HAL_GetTick>
 800620e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	88fa      	ldrh	r2, [r7, #6]
 8006214:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	88fa      	ldrh	r2, [r7, #6]
 800621c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006228:	d108      	bne.n	800623c <HAL_UART_Transmit+0x84>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d104      	bne.n	800623c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006232:	2300      	movs	r3, #0
 8006234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	e003      	b.n	8006244 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006240:	2300      	movs	r3, #0
 8006242:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800624c:	e02c      	b.n	80062a8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2200      	movs	r2, #0
 8006256:	2180      	movs	r1, #128	; 0x80
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 fe98 	bl	8006f8e <UART_WaitOnFlagUntilTimeout>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e039      	b.n	80062dc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10b      	bne.n	8006286 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800627c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	3302      	adds	r3, #2
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	e007      	b.n	8006296 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	781a      	ldrb	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	3301      	adds	r3, #1
 8006294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1cc      	bne.n	800624e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2200      	movs	r2, #0
 80062bc:	2140      	movs	r1, #64	; 0x40
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fe65 	bl	8006f8e <UART_WaitOnFlagUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e006      	b.n	80062dc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	e000      	b.n	80062dc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80062da:	2302      	movs	r3, #2
  }
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3720      	adds	r7, #32
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e8:	b092      	sub	sp, #72	; 0x48
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	431a      	orrs	r2, r3
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	431a      	orrs	r2, r3
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	4313      	orrs	r3, r2
 800630a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4bbe      	ldr	r3, [pc, #760]	; (800660c <UART_SetConfig+0x328>)
 8006314:	4013      	ands	r3, r2
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	6812      	ldr	r2, [r2, #0]
 800631a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800631c:	430b      	orrs	r3, r1
 800631e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4ab3      	ldr	r2, [pc, #716]	; (8006610 <UART_SetConfig+0x32c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800634c:	4313      	orrs	r3, r2
 800634e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	4baf      	ldr	r3, [pc, #700]	; (8006614 <UART_SetConfig+0x330>)
 8006358:	4013      	ands	r3, r2
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	6812      	ldr	r2, [r2, #0]
 800635e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006360:	430b      	orrs	r3, r1
 8006362:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	f023 010f 	bic.w	r1, r3, #15
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4aa6      	ldr	r2, [pc, #664]	; (8006618 <UART_SetConfig+0x334>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d177      	bne.n	8006474 <UART_SetConfig+0x190>
 8006384:	4ba5      	ldr	r3, [pc, #660]	; (800661c <UART_SetConfig+0x338>)
 8006386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006388:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800638c:	2b28      	cmp	r3, #40	; 0x28
 800638e:	d86d      	bhi.n	800646c <UART_SetConfig+0x188>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <UART_SetConfig+0xb4>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	0800643d 	.word	0x0800643d
 800639c:	0800646d 	.word	0x0800646d
 80063a0:	0800646d 	.word	0x0800646d
 80063a4:	0800646d 	.word	0x0800646d
 80063a8:	0800646d 	.word	0x0800646d
 80063ac:	0800646d 	.word	0x0800646d
 80063b0:	0800646d 	.word	0x0800646d
 80063b4:	0800646d 	.word	0x0800646d
 80063b8:	08006445 	.word	0x08006445
 80063bc:	0800646d 	.word	0x0800646d
 80063c0:	0800646d 	.word	0x0800646d
 80063c4:	0800646d 	.word	0x0800646d
 80063c8:	0800646d 	.word	0x0800646d
 80063cc:	0800646d 	.word	0x0800646d
 80063d0:	0800646d 	.word	0x0800646d
 80063d4:	0800646d 	.word	0x0800646d
 80063d8:	0800644d 	.word	0x0800644d
 80063dc:	0800646d 	.word	0x0800646d
 80063e0:	0800646d 	.word	0x0800646d
 80063e4:	0800646d 	.word	0x0800646d
 80063e8:	0800646d 	.word	0x0800646d
 80063ec:	0800646d 	.word	0x0800646d
 80063f0:	0800646d 	.word	0x0800646d
 80063f4:	0800646d 	.word	0x0800646d
 80063f8:	08006455 	.word	0x08006455
 80063fc:	0800646d 	.word	0x0800646d
 8006400:	0800646d 	.word	0x0800646d
 8006404:	0800646d 	.word	0x0800646d
 8006408:	0800646d 	.word	0x0800646d
 800640c:	0800646d 	.word	0x0800646d
 8006410:	0800646d 	.word	0x0800646d
 8006414:	0800646d 	.word	0x0800646d
 8006418:	0800645d 	.word	0x0800645d
 800641c:	0800646d 	.word	0x0800646d
 8006420:	0800646d 	.word	0x0800646d
 8006424:	0800646d 	.word	0x0800646d
 8006428:	0800646d 	.word	0x0800646d
 800642c:	0800646d 	.word	0x0800646d
 8006430:	0800646d 	.word	0x0800646d
 8006434:	0800646d 	.word	0x0800646d
 8006438:	08006465 	.word	0x08006465
 800643c:	2301      	movs	r3, #1
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006442:	e222      	b.n	800688a <UART_SetConfig+0x5a6>
 8006444:	2304      	movs	r3, #4
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800644a:	e21e      	b.n	800688a <UART_SetConfig+0x5a6>
 800644c:	2308      	movs	r3, #8
 800644e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006452:	e21a      	b.n	800688a <UART_SetConfig+0x5a6>
 8006454:	2310      	movs	r3, #16
 8006456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800645a:	e216      	b.n	800688a <UART_SetConfig+0x5a6>
 800645c:	2320      	movs	r3, #32
 800645e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006462:	e212      	b.n	800688a <UART_SetConfig+0x5a6>
 8006464:	2340      	movs	r3, #64	; 0x40
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646a:	e20e      	b.n	800688a <UART_SetConfig+0x5a6>
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006472:	e20a      	b.n	800688a <UART_SetConfig+0x5a6>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a69      	ldr	r2, [pc, #420]	; (8006620 <UART_SetConfig+0x33c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d130      	bne.n	80064e0 <UART_SetConfig+0x1fc>
 800647e:	4b67      	ldr	r3, [pc, #412]	; (800661c <UART_SetConfig+0x338>)
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	2b05      	cmp	r3, #5
 8006488:	d826      	bhi.n	80064d8 <UART_SetConfig+0x1f4>
 800648a:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <UART_SetConfig+0x1ac>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064a9 	.word	0x080064a9
 8006494:	080064b1 	.word	0x080064b1
 8006498:	080064b9 	.word	0x080064b9
 800649c:	080064c1 	.word	0x080064c1
 80064a0:	080064c9 	.word	0x080064c9
 80064a4:	080064d1 	.word	0x080064d1
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ae:	e1ec      	b.n	800688a <UART_SetConfig+0x5a6>
 80064b0:	2304      	movs	r3, #4
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e1e8      	b.n	800688a <UART_SetConfig+0x5a6>
 80064b8:	2308      	movs	r3, #8
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e1e4      	b.n	800688a <UART_SetConfig+0x5a6>
 80064c0:	2310      	movs	r3, #16
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c6:	e1e0      	b.n	800688a <UART_SetConfig+0x5a6>
 80064c8:	2320      	movs	r3, #32
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ce:	e1dc      	b.n	800688a <UART_SetConfig+0x5a6>
 80064d0:	2340      	movs	r3, #64	; 0x40
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d6:	e1d8      	b.n	800688a <UART_SetConfig+0x5a6>
 80064d8:	2380      	movs	r3, #128	; 0x80
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064de:	e1d4      	b.n	800688a <UART_SetConfig+0x5a6>
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a4f      	ldr	r2, [pc, #316]	; (8006624 <UART_SetConfig+0x340>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d130      	bne.n	800654c <UART_SetConfig+0x268>
 80064ea:	4b4c      	ldr	r3, [pc, #304]	; (800661c <UART_SetConfig+0x338>)
 80064ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	2b05      	cmp	r3, #5
 80064f4:	d826      	bhi.n	8006544 <UART_SetConfig+0x260>
 80064f6:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <UART_SetConfig+0x218>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	08006515 	.word	0x08006515
 8006500:	0800651d 	.word	0x0800651d
 8006504:	08006525 	.word	0x08006525
 8006508:	0800652d 	.word	0x0800652d
 800650c:	08006535 	.word	0x08006535
 8006510:	0800653d 	.word	0x0800653d
 8006514:	2300      	movs	r3, #0
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800651a:	e1b6      	b.n	800688a <UART_SetConfig+0x5a6>
 800651c:	2304      	movs	r3, #4
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006522:	e1b2      	b.n	800688a <UART_SetConfig+0x5a6>
 8006524:	2308      	movs	r3, #8
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800652a:	e1ae      	b.n	800688a <UART_SetConfig+0x5a6>
 800652c:	2310      	movs	r3, #16
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006532:	e1aa      	b.n	800688a <UART_SetConfig+0x5a6>
 8006534:	2320      	movs	r3, #32
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800653a:	e1a6      	b.n	800688a <UART_SetConfig+0x5a6>
 800653c:	2340      	movs	r3, #64	; 0x40
 800653e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006542:	e1a2      	b.n	800688a <UART_SetConfig+0x5a6>
 8006544:	2380      	movs	r3, #128	; 0x80
 8006546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800654a:	e19e      	b.n	800688a <UART_SetConfig+0x5a6>
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a35      	ldr	r2, [pc, #212]	; (8006628 <UART_SetConfig+0x344>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d130      	bne.n	80065b8 <UART_SetConfig+0x2d4>
 8006556:	4b31      	ldr	r3, [pc, #196]	; (800661c <UART_SetConfig+0x338>)
 8006558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	2b05      	cmp	r3, #5
 8006560:	d826      	bhi.n	80065b0 <UART_SetConfig+0x2cc>
 8006562:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <UART_SetConfig+0x284>)
 8006564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006568:	08006581 	.word	0x08006581
 800656c:	08006589 	.word	0x08006589
 8006570:	08006591 	.word	0x08006591
 8006574:	08006599 	.word	0x08006599
 8006578:	080065a1 	.word	0x080065a1
 800657c:	080065a9 	.word	0x080065a9
 8006580:	2300      	movs	r3, #0
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006586:	e180      	b.n	800688a <UART_SetConfig+0x5a6>
 8006588:	2304      	movs	r3, #4
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658e:	e17c      	b.n	800688a <UART_SetConfig+0x5a6>
 8006590:	2308      	movs	r3, #8
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006596:	e178      	b.n	800688a <UART_SetConfig+0x5a6>
 8006598:	2310      	movs	r3, #16
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659e:	e174      	b.n	800688a <UART_SetConfig+0x5a6>
 80065a0:	2320      	movs	r3, #32
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a6:	e170      	b.n	800688a <UART_SetConfig+0x5a6>
 80065a8:	2340      	movs	r3, #64	; 0x40
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ae:	e16c      	b.n	800688a <UART_SetConfig+0x5a6>
 80065b0:	2380      	movs	r3, #128	; 0x80
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b6:	e168      	b.n	800688a <UART_SetConfig+0x5a6>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1b      	ldr	r2, [pc, #108]	; (800662c <UART_SetConfig+0x348>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d142      	bne.n	8006648 <UART_SetConfig+0x364>
 80065c2:	4b16      	ldr	r3, [pc, #88]	; (800661c <UART_SetConfig+0x338>)
 80065c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b05      	cmp	r3, #5
 80065cc:	d838      	bhi.n	8006640 <UART_SetConfig+0x35c>
 80065ce:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <UART_SetConfig+0x2f0>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065ed 	.word	0x080065ed
 80065d8:	080065f5 	.word	0x080065f5
 80065dc:	080065fd 	.word	0x080065fd
 80065e0:	08006605 	.word	0x08006605
 80065e4:	08006631 	.word	0x08006631
 80065e8:	08006639 	.word	0x08006639
 80065ec:	2300      	movs	r3, #0
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f2:	e14a      	b.n	800688a <UART_SetConfig+0x5a6>
 80065f4:	2304      	movs	r3, #4
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fa:	e146      	b.n	800688a <UART_SetConfig+0x5a6>
 80065fc:	2308      	movs	r3, #8
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006602:	e142      	b.n	800688a <UART_SetConfig+0x5a6>
 8006604:	2310      	movs	r3, #16
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660a:	e13e      	b.n	800688a <UART_SetConfig+0x5a6>
 800660c:	cfff69f3 	.word	0xcfff69f3
 8006610:	58000c00 	.word	0x58000c00
 8006614:	11fff4ff 	.word	0x11fff4ff
 8006618:	40011000 	.word	0x40011000
 800661c:	58024400 	.word	0x58024400
 8006620:	40004400 	.word	0x40004400
 8006624:	40004800 	.word	0x40004800
 8006628:	40004c00 	.word	0x40004c00
 800662c:	40005000 	.word	0x40005000
 8006630:	2320      	movs	r3, #32
 8006632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006636:	e128      	b.n	800688a <UART_SetConfig+0x5a6>
 8006638:	2340      	movs	r3, #64	; 0x40
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663e:	e124      	b.n	800688a <UART_SetConfig+0x5a6>
 8006640:	2380      	movs	r3, #128	; 0x80
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006646:	e120      	b.n	800688a <UART_SetConfig+0x5a6>
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4acb      	ldr	r2, [pc, #812]	; (800697c <UART_SetConfig+0x698>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d176      	bne.n	8006740 <UART_SetConfig+0x45c>
 8006652:	4bcb      	ldr	r3, [pc, #812]	; (8006980 <UART_SetConfig+0x69c>)
 8006654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800665a:	2b28      	cmp	r3, #40	; 0x28
 800665c:	d86c      	bhi.n	8006738 <UART_SetConfig+0x454>
 800665e:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <UART_SetConfig+0x380>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006709 	.word	0x08006709
 8006668:	08006739 	.word	0x08006739
 800666c:	08006739 	.word	0x08006739
 8006670:	08006739 	.word	0x08006739
 8006674:	08006739 	.word	0x08006739
 8006678:	08006739 	.word	0x08006739
 800667c:	08006739 	.word	0x08006739
 8006680:	08006739 	.word	0x08006739
 8006684:	08006711 	.word	0x08006711
 8006688:	08006739 	.word	0x08006739
 800668c:	08006739 	.word	0x08006739
 8006690:	08006739 	.word	0x08006739
 8006694:	08006739 	.word	0x08006739
 8006698:	08006739 	.word	0x08006739
 800669c:	08006739 	.word	0x08006739
 80066a0:	08006739 	.word	0x08006739
 80066a4:	08006719 	.word	0x08006719
 80066a8:	08006739 	.word	0x08006739
 80066ac:	08006739 	.word	0x08006739
 80066b0:	08006739 	.word	0x08006739
 80066b4:	08006739 	.word	0x08006739
 80066b8:	08006739 	.word	0x08006739
 80066bc:	08006739 	.word	0x08006739
 80066c0:	08006739 	.word	0x08006739
 80066c4:	08006721 	.word	0x08006721
 80066c8:	08006739 	.word	0x08006739
 80066cc:	08006739 	.word	0x08006739
 80066d0:	08006739 	.word	0x08006739
 80066d4:	08006739 	.word	0x08006739
 80066d8:	08006739 	.word	0x08006739
 80066dc:	08006739 	.word	0x08006739
 80066e0:	08006739 	.word	0x08006739
 80066e4:	08006729 	.word	0x08006729
 80066e8:	08006739 	.word	0x08006739
 80066ec:	08006739 	.word	0x08006739
 80066f0:	08006739 	.word	0x08006739
 80066f4:	08006739 	.word	0x08006739
 80066f8:	08006739 	.word	0x08006739
 80066fc:	08006739 	.word	0x08006739
 8006700:	08006739 	.word	0x08006739
 8006704:	08006731 	.word	0x08006731
 8006708:	2301      	movs	r3, #1
 800670a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800670e:	e0bc      	b.n	800688a <UART_SetConfig+0x5a6>
 8006710:	2304      	movs	r3, #4
 8006712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006716:	e0b8      	b.n	800688a <UART_SetConfig+0x5a6>
 8006718:	2308      	movs	r3, #8
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800671e:	e0b4      	b.n	800688a <UART_SetConfig+0x5a6>
 8006720:	2310      	movs	r3, #16
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006726:	e0b0      	b.n	800688a <UART_SetConfig+0x5a6>
 8006728:	2320      	movs	r3, #32
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800672e:	e0ac      	b.n	800688a <UART_SetConfig+0x5a6>
 8006730:	2340      	movs	r3, #64	; 0x40
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006736:	e0a8      	b.n	800688a <UART_SetConfig+0x5a6>
 8006738:	2380      	movs	r3, #128	; 0x80
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800673e:	e0a4      	b.n	800688a <UART_SetConfig+0x5a6>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a8f      	ldr	r2, [pc, #572]	; (8006984 <UART_SetConfig+0x6a0>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d130      	bne.n	80067ac <UART_SetConfig+0x4c8>
 800674a:	4b8d      	ldr	r3, [pc, #564]	; (8006980 <UART_SetConfig+0x69c>)
 800674c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	2b05      	cmp	r3, #5
 8006754:	d826      	bhi.n	80067a4 <UART_SetConfig+0x4c0>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <UART_SetConfig+0x478>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	08006775 	.word	0x08006775
 8006760:	0800677d 	.word	0x0800677d
 8006764:	08006785 	.word	0x08006785
 8006768:	0800678d 	.word	0x0800678d
 800676c:	08006795 	.word	0x08006795
 8006770:	0800679d 	.word	0x0800679d
 8006774:	2300      	movs	r3, #0
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677a:	e086      	b.n	800688a <UART_SetConfig+0x5a6>
 800677c:	2304      	movs	r3, #4
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006782:	e082      	b.n	800688a <UART_SetConfig+0x5a6>
 8006784:	2308      	movs	r3, #8
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e07e      	b.n	800688a <UART_SetConfig+0x5a6>
 800678c:	2310      	movs	r3, #16
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006792:	e07a      	b.n	800688a <UART_SetConfig+0x5a6>
 8006794:	2320      	movs	r3, #32
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679a:	e076      	b.n	800688a <UART_SetConfig+0x5a6>
 800679c:	2340      	movs	r3, #64	; 0x40
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a2:	e072      	b.n	800688a <UART_SetConfig+0x5a6>
 80067a4:	2380      	movs	r3, #128	; 0x80
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067aa:	e06e      	b.n	800688a <UART_SetConfig+0x5a6>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a75      	ldr	r2, [pc, #468]	; (8006988 <UART_SetConfig+0x6a4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d130      	bne.n	8006818 <UART_SetConfig+0x534>
 80067b6:	4b72      	ldr	r3, [pc, #456]	; (8006980 <UART_SetConfig+0x69c>)
 80067b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d826      	bhi.n	8006810 <UART_SetConfig+0x52c>
 80067c2:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <UART_SetConfig+0x4e4>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067e1 	.word	0x080067e1
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	080067f1 	.word	0x080067f1
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	08006801 	.word	0x08006801
 80067dc:	08006809 	.word	0x08006809
 80067e0:	2300      	movs	r3, #0
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e6:	e050      	b.n	800688a <UART_SetConfig+0x5a6>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ee:	e04c      	b.n	800688a <UART_SetConfig+0x5a6>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f6:	e048      	b.n	800688a <UART_SetConfig+0x5a6>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067fe:	e044      	b.n	800688a <UART_SetConfig+0x5a6>
 8006800:	2320      	movs	r3, #32
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006806:	e040      	b.n	800688a <UART_SetConfig+0x5a6>
 8006808:	2340      	movs	r3, #64	; 0x40
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800680e:	e03c      	b.n	800688a <UART_SetConfig+0x5a6>
 8006810:	2380      	movs	r3, #128	; 0x80
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006816:	e038      	b.n	800688a <UART_SetConfig+0x5a6>
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a5b      	ldr	r2, [pc, #364]	; (800698c <UART_SetConfig+0x6a8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d130      	bne.n	8006884 <UART_SetConfig+0x5a0>
 8006822:	4b57      	ldr	r3, [pc, #348]	; (8006980 <UART_SetConfig+0x69c>)
 8006824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	2b05      	cmp	r3, #5
 800682c:	d826      	bhi.n	800687c <UART_SetConfig+0x598>
 800682e:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <UART_SetConfig+0x550>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	0800684d 	.word	0x0800684d
 8006838:	08006855 	.word	0x08006855
 800683c:	0800685d 	.word	0x0800685d
 8006840:	08006865 	.word	0x08006865
 8006844:	0800686d 	.word	0x0800686d
 8006848:	08006875 	.word	0x08006875
 800684c:	2302      	movs	r3, #2
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006852:	e01a      	b.n	800688a <UART_SetConfig+0x5a6>
 8006854:	2304      	movs	r3, #4
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800685a:	e016      	b.n	800688a <UART_SetConfig+0x5a6>
 800685c:	2308      	movs	r3, #8
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006862:	e012      	b.n	800688a <UART_SetConfig+0x5a6>
 8006864:	2310      	movs	r3, #16
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800686a:	e00e      	b.n	800688a <UART_SetConfig+0x5a6>
 800686c:	2320      	movs	r3, #32
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006872:	e00a      	b.n	800688a <UART_SetConfig+0x5a6>
 8006874:	2340      	movs	r3, #64	; 0x40
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800687a:	e006      	b.n	800688a <UART_SetConfig+0x5a6>
 800687c:	2380      	movs	r3, #128	; 0x80
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006882:	e002      	b.n	800688a <UART_SetConfig+0x5a6>
 8006884:	2380      	movs	r3, #128	; 0x80
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a3f      	ldr	r2, [pc, #252]	; (800698c <UART_SetConfig+0x6a8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	f040 80f8 	bne.w	8006a86 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006896:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800689a:	2b20      	cmp	r3, #32
 800689c:	dc46      	bgt.n	800692c <UART_SetConfig+0x648>
 800689e:	2b02      	cmp	r3, #2
 80068a0:	f2c0 8082 	blt.w	80069a8 <UART_SetConfig+0x6c4>
 80068a4:	3b02      	subs	r3, #2
 80068a6:	2b1e      	cmp	r3, #30
 80068a8:	d87e      	bhi.n	80069a8 <UART_SetConfig+0x6c4>
 80068aa:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <UART_SetConfig+0x5cc>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	08006933 	.word	0x08006933
 80068b4:	080069a9 	.word	0x080069a9
 80068b8:	0800693b 	.word	0x0800693b
 80068bc:	080069a9 	.word	0x080069a9
 80068c0:	080069a9 	.word	0x080069a9
 80068c4:	080069a9 	.word	0x080069a9
 80068c8:	0800694b 	.word	0x0800694b
 80068cc:	080069a9 	.word	0x080069a9
 80068d0:	080069a9 	.word	0x080069a9
 80068d4:	080069a9 	.word	0x080069a9
 80068d8:	080069a9 	.word	0x080069a9
 80068dc:	080069a9 	.word	0x080069a9
 80068e0:	080069a9 	.word	0x080069a9
 80068e4:	080069a9 	.word	0x080069a9
 80068e8:	0800695b 	.word	0x0800695b
 80068ec:	080069a9 	.word	0x080069a9
 80068f0:	080069a9 	.word	0x080069a9
 80068f4:	080069a9 	.word	0x080069a9
 80068f8:	080069a9 	.word	0x080069a9
 80068fc:	080069a9 	.word	0x080069a9
 8006900:	080069a9 	.word	0x080069a9
 8006904:	080069a9 	.word	0x080069a9
 8006908:	080069a9 	.word	0x080069a9
 800690c:	080069a9 	.word	0x080069a9
 8006910:	080069a9 	.word	0x080069a9
 8006914:	080069a9 	.word	0x080069a9
 8006918:	080069a9 	.word	0x080069a9
 800691c:	080069a9 	.word	0x080069a9
 8006920:	080069a9 	.word	0x080069a9
 8006924:	080069a9 	.word	0x080069a9
 8006928:	0800699b 	.word	0x0800699b
 800692c:	2b40      	cmp	r3, #64	; 0x40
 800692e:	d037      	beq.n	80069a0 <UART_SetConfig+0x6bc>
 8006930:	e03a      	b.n	80069a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006932:	f7fd ff33 	bl	800479c <HAL_RCCEx_GetD3PCLK1Freq>
 8006936:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006938:	e03c      	b.n	80069b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800693a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800693e:	4618      	mov	r0, r3
 8006940:	f7fd ff42 	bl	80047c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006948:	e034      	b.n	80069b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800694a:	f107 0318 	add.w	r3, r7, #24
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe f88e 	bl	8004a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006958:	e02c      	b.n	80069b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800695a:	4b09      	ldr	r3, [pc, #36]	; (8006980 <UART_SetConfig+0x69c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b00      	cmp	r3, #0
 8006964:	d016      	beq.n	8006994 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006966:	4b06      	ldr	r3, [pc, #24]	; (8006980 <UART_SetConfig+0x69c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	08db      	lsrs	r3, r3, #3
 800696c:	f003 0303 	and.w	r3, r3, #3
 8006970:	4a07      	ldr	r2, [pc, #28]	; (8006990 <UART_SetConfig+0x6ac>)
 8006972:	fa22 f303 	lsr.w	r3, r2, r3
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006978:	e01c      	b.n	80069b4 <UART_SetConfig+0x6d0>
 800697a:	bf00      	nop
 800697c:	40011400 	.word	0x40011400
 8006980:	58024400 	.word	0x58024400
 8006984:	40007800 	.word	0x40007800
 8006988:	40007c00 	.word	0x40007c00
 800698c:	58000c00 	.word	0x58000c00
 8006990:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006994:	4b9d      	ldr	r3, [pc, #628]	; (8006c0c <UART_SetConfig+0x928>)
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006998:	e00c      	b.n	80069b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800699a:	4b9d      	ldr	r3, [pc, #628]	; (8006c10 <UART_SetConfig+0x92c>)
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800699e:	e009      	b.n	80069b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a6:	e005      	b.n	80069b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80069b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 81de 	beq.w	8006d78 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	4a94      	ldr	r2, [pc, #592]	; (8006c14 <UART_SetConfig+0x930>)
 80069c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069c6:	461a      	mov	r2, r3
 80069c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80069ce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	4613      	mov	r3, r2
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	4413      	add	r3, r2
 80069da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069dc:	429a      	cmp	r2, r3
 80069de:	d305      	bcc.n	80069ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d903      	bls.n	80069f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80069f2:	e1c1      	b.n	8006d78 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f6:	2200      	movs	r2, #0
 80069f8:	60bb      	str	r3, [r7, #8]
 80069fa:	60fa      	str	r2, [r7, #12]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	4a84      	ldr	r2, [pc, #528]	; (8006c14 <UART_SetConfig+0x930>)
 8006a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2200      	movs	r2, #0
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	607a      	str	r2, [r7, #4]
 8006a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a16:	f7f9 fcb3 	bl	8000380 <__aeabi_uldivmod>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4610      	mov	r0, r2
 8006a20:	4619      	mov	r1, r3
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	020b      	lsls	r3, r1, #8
 8006a2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a30:	0202      	lsls	r2, r0, #8
 8006a32:	6979      	ldr	r1, [r7, #20]
 8006a34:	6849      	ldr	r1, [r1, #4]
 8006a36:	0849      	lsrs	r1, r1, #1
 8006a38:	2000      	movs	r0, #0
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	eb12 0804 	adds.w	r8, r2, r4
 8006a42:	eb43 0905 	adc.w	r9, r3, r5
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	469a      	mov	sl, r3
 8006a4e:	4693      	mov	fp, r2
 8006a50:	4652      	mov	r2, sl
 8006a52:	465b      	mov	r3, fp
 8006a54:	4640      	mov	r0, r8
 8006a56:	4649      	mov	r1, r9
 8006a58:	f7f9 fc92 	bl	8000380 <__aeabi_uldivmod>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4613      	mov	r3, r2
 8006a62:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a6a:	d308      	bcc.n	8006a7e <UART_SetConfig+0x79a>
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a72:	d204      	bcs.n	8006a7e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a7a:	60da      	str	r2, [r3, #12]
 8006a7c:	e17c      	b.n	8006d78 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a84:	e178      	b.n	8006d78 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a8e:	f040 80c5 	bne.w	8006c1c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006a92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	dc48      	bgt.n	8006b2c <UART_SetConfig+0x848>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	db7b      	blt.n	8006b96 <UART_SetConfig+0x8b2>
 8006a9e:	2b20      	cmp	r3, #32
 8006aa0:	d879      	bhi.n	8006b96 <UART_SetConfig+0x8b2>
 8006aa2:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <UART_SetConfig+0x7c4>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006b33 	.word	0x08006b33
 8006aac:	08006b3b 	.word	0x08006b3b
 8006ab0:	08006b97 	.word	0x08006b97
 8006ab4:	08006b97 	.word	0x08006b97
 8006ab8:	08006b43 	.word	0x08006b43
 8006abc:	08006b97 	.word	0x08006b97
 8006ac0:	08006b97 	.word	0x08006b97
 8006ac4:	08006b97 	.word	0x08006b97
 8006ac8:	08006b53 	.word	0x08006b53
 8006acc:	08006b97 	.word	0x08006b97
 8006ad0:	08006b97 	.word	0x08006b97
 8006ad4:	08006b97 	.word	0x08006b97
 8006ad8:	08006b97 	.word	0x08006b97
 8006adc:	08006b97 	.word	0x08006b97
 8006ae0:	08006b97 	.word	0x08006b97
 8006ae4:	08006b97 	.word	0x08006b97
 8006ae8:	08006b63 	.word	0x08006b63
 8006aec:	08006b97 	.word	0x08006b97
 8006af0:	08006b97 	.word	0x08006b97
 8006af4:	08006b97 	.word	0x08006b97
 8006af8:	08006b97 	.word	0x08006b97
 8006afc:	08006b97 	.word	0x08006b97
 8006b00:	08006b97 	.word	0x08006b97
 8006b04:	08006b97 	.word	0x08006b97
 8006b08:	08006b97 	.word	0x08006b97
 8006b0c:	08006b97 	.word	0x08006b97
 8006b10:	08006b97 	.word	0x08006b97
 8006b14:	08006b97 	.word	0x08006b97
 8006b18:	08006b97 	.word	0x08006b97
 8006b1c:	08006b97 	.word	0x08006b97
 8006b20:	08006b97 	.word	0x08006b97
 8006b24:	08006b97 	.word	0x08006b97
 8006b28:	08006b89 	.word	0x08006b89
 8006b2c:	2b40      	cmp	r3, #64	; 0x40
 8006b2e:	d02e      	beq.n	8006b8e <UART_SetConfig+0x8aa>
 8006b30:	e031      	b.n	8006b96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b32:	f7fc fec1 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
 8006b36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b38:	e033      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b3a:	f7fc fed3 	bl	80038e4 <HAL_RCC_GetPCLK2Freq>
 8006b3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b40:	e02f      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fd fe3e 	bl	80047c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b50:	e027      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b52:	f107 0318 	add.w	r3, r7, #24
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fd ff8a 	bl	8004a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b60:	e01f      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b62:	4b2d      	ldr	r3, [pc, #180]	; (8006c18 <UART_SetConfig+0x934>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b6e:	4b2a      	ldr	r3, [pc, #168]	; (8006c18 <UART_SetConfig+0x934>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	08db      	lsrs	r3, r3, #3
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	4a24      	ldr	r2, [pc, #144]	; (8006c0c <UART_SetConfig+0x928>)
 8006b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b80:	e00f      	b.n	8006ba2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006b82:	4b22      	ldr	r3, [pc, #136]	; (8006c0c <UART_SetConfig+0x928>)
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b86:	e00c      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b88:	4b21      	ldr	r3, [pc, #132]	; (8006c10 <UART_SetConfig+0x92c>)
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b8c:	e009      	b.n	8006ba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b94:	e005      	b.n	8006ba2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006ba0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 80e7 	beq.w	8006d78 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	4a19      	ldr	r2, [pc, #100]	; (8006c14 <UART_SetConfig+0x930>)
 8006bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bbc:	005a      	lsls	r2, r3, #1
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	085b      	lsrs	r3, r3, #1
 8006bc4:	441a      	add	r2, r3
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd2:	2b0f      	cmp	r3, #15
 8006bd4:	d916      	bls.n	8006c04 <UART_SetConfig+0x920>
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bdc:	d212      	bcs.n	8006c04 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f023 030f 	bic.w	r3, r3, #15
 8006be6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006c00:	60da      	str	r2, [r3, #12]
 8006c02:	e0b9      	b.n	8006d78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c0a:	e0b5      	b.n	8006d78 <UART_SetConfig+0xa94>
 8006c0c:	03d09000 	.word	0x03d09000
 8006c10:	003d0900 	.word	0x003d0900
 8006c14:	080089f4 	.word	0x080089f4
 8006c18:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	dc49      	bgt.n	8006cb8 <UART_SetConfig+0x9d4>
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	db7c      	blt.n	8006d22 <UART_SetConfig+0xa3e>
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d87a      	bhi.n	8006d22 <UART_SetConfig+0xa3e>
 8006c2c:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <UART_SetConfig+0x950>)
 8006c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c32:	bf00      	nop
 8006c34:	08006cbf 	.word	0x08006cbf
 8006c38:	08006cc7 	.word	0x08006cc7
 8006c3c:	08006d23 	.word	0x08006d23
 8006c40:	08006d23 	.word	0x08006d23
 8006c44:	08006ccf 	.word	0x08006ccf
 8006c48:	08006d23 	.word	0x08006d23
 8006c4c:	08006d23 	.word	0x08006d23
 8006c50:	08006d23 	.word	0x08006d23
 8006c54:	08006cdf 	.word	0x08006cdf
 8006c58:	08006d23 	.word	0x08006d23
 8006c5c:	08006d23 	.word	0x08006d23
 8006c60:	08006d23 	.word	0x08006d23
 8006c64:	08006d23 	.word	0x08006d23
 8006c68:	08006d23 	.word	0x08006d23
 8006c6c:	08006d23 	.word	0x08006d23
 8006c70:	08006d23 	.word	0x08006d23
 8006c74:	08006cef 	.word	0x08006cef
 8006c78:	08006d23 	.word	0x08006d23
 8006c7c:	08006d23 	.word	0x08006d23
 8006c80:	08006d23 	.word	0x08006d23
 8006c84:	08006d23 	.word	0x08006d23
 8006c88:	08006d23 	.word	0x08006d23
 8006c8c:	08006d23 	.word	0x08006d23
 8006c90:	08006d23 	.word	0x08006d23
 8006c94:	08006d23 	.word	0x08006d23
 8006c98:	08006d23 	.word	0x08006d23
 8006c9c:	08006d23 	.word	0x08006d23
 8006ca0:	08006d23 	.word	0x08006d23
 8006ca4:	08006d23 	.word	0x08006d23
 8006ca8:	08006d23 	.word	0x08006d23
 8006cac:	08006d23 	.word	0x08006d23
 8006cb0:	08006d23 	.word	0x08006d23
 8006cb4:	08006d15 	.word	0x08006d15
 8006cb8:	2b40      	cmp	r3, #64	; 0x40
 8006cba:	d02e      	beq.n	8006d1a <UART_SetConfig+0xa36>
 8006cbc:	e031      	b.n	8006d22 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cbe:	f7fc fdfb 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
 8006cc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006cc4:	e033      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cc6:	f7fc fe0d 	bl	80038e4 <HAL_RCC_GetPCLK2Freq>
 8006cca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ccc:	e02f      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fd fd78 	bl	80047c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cdc:	e027      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cde:	f107 0318 	add.w	r3, r7, #24
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fd fec4 	bl	8004a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cec:	e01f      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cee:	4b2d      	ldr	r3, [pc, #180]	; (8006da4 <UART_SetConfig+0xac0>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cfa:	4b2a      	ldr	r3, [pc, #168]	; (8006da4 <UART_SetConfig+0xac0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	08db      	lsrs	r3, r3, #3
 8006d00:	f003 0303 	and.w	r3, r3, #3
 8006d04:	4a28      	ldr	r2, [pc, #160]	; (8006da8 <UART_SetConfig+0xac4>)
 8006d06:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d0c:	e00f      	b.n	8006d2e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006d0e:	4b26      	ldr	r3, [pc, #152]	; (8006da8 <UART_SetConfig+0xac4>)
 8006d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d12:	e00c      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d14:	4b25      	ldr	r3, [pc, #148]	; (8006dac <UART_SetConfig+0xac8>)
 8006d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d18:	e009      	b.n	8006d2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d20:	e005      	b.n	8006d2e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006d2c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d021      	beq.n	8006d78 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	4a1d      	ldr	r2, [pc, #116]	; (8006db0 <UART_SetConfig+0xacc>)
 8006d3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d42:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	085b      	lsrs	r3, r3, #1
 8006d4c:	441a      	add	r2, r3
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d56:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5a:	2b0f      	cmp	r3, #15
 8006d5c:	d909      	bls.n	8006d72 <UART_SetConfig+0xa8e>
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d64:	d205      	bcs.n	8006d72 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60da      	str	r2, [r3, #12]
 8006d70:	e002      	b.n	8006d78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2200      	movs	r2, #0
 8006d92:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006d94:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3748      	adds	r7, #72	; 0x48
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da2:	bf00      	nop
 8006da4:	58024400 	.word	0x58024400
 8006da8:	03d09000 	.word	0x03d09000
 8006dac:	003d0900 	.word	0x003d0900
 8006db0:	080089f4 	.word	0x080089f4

08006db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00a      	beq.n	8006dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00a      	beq.n	8006e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e26:	f003 0308 	and.w	r3, r3, #8
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00a      	beq.n	8006e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01a      	beq.n	8006eca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eb2:	d10a      	bne.n	8006eca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	605a      	str	r2, [r3, #4]
  }
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f08:	f7fa fc00 	bl	800170c <HAL_GetTick>
 8006f0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d10e      	bne.n	8006f3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f82f 	bl	8006f8e <UART_WaitOnFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e025      	b.n	8006f86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d10e      	bne.n	8006f66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f819 	bl	8006f8e <UART_WaitOnFlagUntilTimeout>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e00f      	b.n	8006f86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b09c      	sub	sp, #112	; 0x70
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	603b      	str	r3, [r7, #0]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9e:	e0a9      	b.n	80070f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa6:	f000 80a5 	beq.w	80070f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006faa:	f7fa fbaf 	bl	800170c <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d302      	bcc.n	8006fc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006fba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d140      	bne.n	8007042 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fd4:	667b      	str	r3, [r7, #100]	; 0x64
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fe0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fe4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e6      	bne.n	8006fc0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3308      	adds	r3, #8
 8006ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffc:	e853 3f00 	ldrex	r3, [r3]
 8007000:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007004:	f023 0301 	bic.w	r3, r3, #1
 8007008:	663b      	str	r3, [r7, #96]	; 0x60
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3308      	adds	r3, #8
 8007010:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007012:	64ba      	str	r2, [r7, #72]	; 0x48
 8007014:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007016:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800701a:	e841 2300 	strex	r3, r2, [r1]
 800701e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1e5      	bne.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2220      	movs	r2, #32
 800702a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2220      	movs	r2, #32
 8007032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e069      	b.n	8007116 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b00      	cmp	r3, #0
 800704e:	d051      	beq.n	80070f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800705a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800705e:	d149      	bne.n	80070f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007068:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800707e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	461a      	mov	r2, r3
 8007086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007088:	637b      	str	r3, [r7, #52]	; 0x34
 800708a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800708e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e6      	bne.n	800706a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3308      	adds	r3, #8
 80070a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	613b      	str	r3, [r7, #16]
   return(result);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f023 0301 	bic.w	r3, r3, #1
 80070b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3308      	adds	r3, #8
 80070ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070bc:	623a      	str	r2, [r7, #32]
 80070be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	69f9      	ldr	r1, [r7, #28]
 80070c2:	6a3a      	ldr	r2, [r7, #32]
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e5      	bne.n	800709c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2220      	movs	r2, #32
 80070dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e010      	b.n	8007116 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	69da      	ldr	r2, [r3, #28]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4013      	ands	r3, r2
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	429a      	cmp	r2, r3
 8007102:	bf0c      	ite	eq
 8007104:	2301      	moveq	r3, #1
 8007106:	2300      	movne	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	461a      	mov	r2, r3
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	429a      	cmp	r2, r3
 8007110:	f43f af46 	beq.w	8006fa0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3770      	adds	r7, #112	; 0x70
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_UARTEx_DisableFifoMode+0x16>
 8007130:	2302      	movs	r3, #2
 8007132:	e027      	b.n	8007184 <HAL_UARTEx_DisableFifoMode+0x66>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2224      	movs	r2, #36	; 0x24
 8007140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0201 	bic.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007162:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2220      	movs	r2, #32
 8007176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d101      	bne.n	80071a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e02d      	b.n	8007204 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2224      	movs	r2, #36	; 0x24
 80071b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 0201 	bic.w	r2, r2, #1
 80071ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f84f 	bl	8007288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007220:	2302      	movs	r3, #2
 8007222:	e02d      	b.n	8007280 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2224      	movs	r2, #36	; 0x24
 8007230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0201 	bic.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f811 	bl	8007288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007294:	2b00      	cmp	r3, #0
 8007296:	d108      	bne.n	80072aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072a8:	e031      	b.n	800730e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072aa:	2310      	movs	r3, #16
 80072ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072ae:	2310      	movs	r3, #16
 80072b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	0e5b      	lsrs	r3, r3, #25
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	0f5b      	lsrs	r3, r3, #29
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072d2:	7bbb      	ldrb	r3, [r7, #14]
 80072d4:	7b3a      	ldrb	r2, [r7, #12]
 80072d6:	4911      	ldr	r1, [pc, #68]	; (800731c <UARTEx_SetNbDataToProcess+0x94>)
 80072d8:	5c8a      	ldrb	r2, [r1, r2]
 80072da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072de:	7b3a      	ldrb	r2, [r7, #12]
 80072e0:	490f      	ldr	r1, [pc, #60]	; (8007320 <UARTEx_SetNbDataToProcess+0x98>)
 80072e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	7b7a      	ldrb	r2, [r7, #13]
 80072f4:	4909      	ldr	r1, [pc, #36]	; (800731c <UARTEx_SetNbDataToProcess+0x94>)
 80072f6:	5c8a      	ldrb	r2, [r1, r2]
 80072f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072fc:	7b7a      	ldrb	r2, [r7, #13]
 80072fe:	4908      	ldr	r1, [pc, #32]	; (8007320 <UARTEx_SetNbDataToProcess+0x98>)
 8007300:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007302:	fb93 f3f2 	sdiv	r3, r3, r2
 8007306:	b29a      	uxth	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800730e:	bf00      	nop
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	08008a0c 	.word	0x08008a0c
 8007320:	08008a14 	.word	0x08008a14

08007324 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007324:	b084      	sub	sp, #16
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	f107 001c 	add.w	r0, r7, #28
 8007332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	2b01      	cmp	r3, #1
 800733a:	d120      	bne.n	800737e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007340:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	4b2a      	ldr	r3, [pc, #168]	; (80073f8 <USB_CoreInit+0xd4>)
 800734e:	4013      	ands	r3, r2
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007362:	2b01      	cmp	r3, #1
 8007364:	d105      	bne.n	8007372 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 faac 	bl	80078d0 <USB_CoreReset>
 8007378:	4603      	mov	r3, r0
 800737a:	73fb      	strb	r3, [r7, #15]
 800737c:	e01a      	b.n	80073b4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 faa0 	bl	80078d0 <USB_CoreReset>
 8007390:	4603      	mov	r3, r0
 8007392:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	639a      	str	r2, [r3, #56]	; 0x38
 80073a6:	e005      	b.n	80073b4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d116      	bne.n	80073e8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073be:	b29a      	uxth	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073c8:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <USB_CoreInit+0xd8>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f043 0206 	orr.w	r2, r3, #6
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f043 0220 	orr.w	r2, r3, #32
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073f4:	b004      	add	sp, #16
 80073f6:	4770      	bx	lr
 80073f8:	ffbdffbf 	.word	0xffbdffbf
 80073fc:	03ee0000 	.word	0x03ee0000

08007400 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f023 0201 	bic.w	r2, r3, #1
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	460b      	mov	r3, r1
 800742c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d115      	bne.n	8007470 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007450:	2001      	movs	r0, #1
 8007452:	f7fa f967 	bl	8001724 <HAL_Delay>
      ms++;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3301      	adds	r3, #1
 800745a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fa29 	bl	80078b4 <USB_GetMode>
 8007462:	4603      	mov	r3, r0
 8007464:	2b01      	cmp	r3, #1
 8007466:	d01e      	beq.n	80074a6 <USB_SetCurrentMode+0x84>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b31      	cmp	r3, #49	; 0x31
 800746c:	d9f0      	bls.n	8007450 <USB_SetCurrentMode+0x2e>
 800746e:	e01a      	b.n	80074a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d115      	bne.n	80074a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007482:	2001      	movs	r0, #1
 8007484:	f7fa f94e 	bl	8001724 <HAL_Delay>
      ms++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3301      	adds	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa10 	bl	80078b4 <USB_GetMode>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <USB_SetCurrentMode+0x84>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b31      	cmp	r3, #49	; 0x31
 800749e:	d9f0      	bls.n	8007482 <USB_SetCurrentMode+0x60>
 80074a0:	e001      	b.n	80074a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e005      	b.n	80074b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b32      	cmp	r3, #50	; 0x32
 80074aa:	d101      	bne.n	80074b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e000      	b.n	80074b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074bc:	b084      	sub	sp, #16
 80074be:	b580      	push	{r7, lr}
 80074c0:	b086      	sub	sp, #24
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80074ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80074d6:	2300      	movs	r3, #0
 80074d8:	613b      	str	r3, [r7, #16]
 80074da:	e009      	b.n	80074f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	3340      	adds	r3, #64	; 0x40
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	2200      	movs	r2, #0
 80074e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	3301      	adds	r3, #1
 80074ee:	613b      	str	r3, [r7, #16]
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	2b0e      	cmp	r3, #14
 80074f4:	d9f2      	bls.n	80074dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d11c      	bne.n	8007536 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800750a:	f043 0302 	orr.w	r3, r3, #2
 800750e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007514:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	e005      	b.n	8007542 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007548:	461a      	mov	r2, r3
 800754a:	2300      	movs	r3, #0
 800754c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007554:	4619      	mov	r1, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800755c:	461a      	mov	r2, r3
 800755e:	680b      	ldr	r3, [r1, #0]
 8007560:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007564:	2b01      	cmp	r3, #1
 8007566:	d10c      	bne.n	8007582 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d104      	bne.n	8007578 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800756e:	2100      	movs	r1, #0
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f965 	bl	8007840 <USB_SetDevSpeed>
 8007576:	e008      	b.n	800758a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007578:	2101      	movs	r1, #1
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f960 	bl	8007840 <USB_SetDevSpeed>
 8007580:	e003      	b.n	800758a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007582:	2103      	movs	r1, #3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f95b 	bl	8007840 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800758a:	2110      	movs	r1, #16
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f8f3 	bl	8007778 <USB_FlushTxFifo>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f91f 	bl	80077e0 <USB_FlushRxFifo>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b2:	461a      	mov	r2, r3
 80075b4:	2300      	movs	r3, #0
 80075b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075be:	461a      	mov	r2, r3
 80075c0:	2300      	movs	r3, #0
 80075c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ca:	461a      	mov	r2, r3
 80075cc:	2300      	movs	r3, #0
 80075ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075d0:	2300      	movs	r3, #0
 80075d2:	613b      	str	r3, [r7, #16]
 80075d4:	e043      	b.n	800765e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075ec:	d118      	bne.n	8007620 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007600:	461a      	mov	r2, r3
 8007602:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	e013      	b.n	8007632 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007616:	461a      	mov	r2, r3
 8007618:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800761c:	6013      	str	r3, [r2, #0]
 800761e:	e008      	b.n	8007632 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4413      	add	r3, r2
 8007628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762c:	461a      	mov	r2, r3
 800762e:	2300      	movs	r3, #0
 8007630:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	4413      	add	r3, r2
 800763a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763e:	461a      	mov	r2, r3
 8007640:	2300      	movs	r3, #0
 8007642:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007650:	461a      	mov	r2, r3
 8007652:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007656:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	3301      	adds	r3, #1
 800765c:	613b      	str	r3, [r7, #16]
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	429a      	cmp	r2, r3
 8007664:	d3b7      	bcc.n	80075d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007666:	2300      	movs	r3, #0
 8007668:	613b      	str	r3, [r7, #16]
 800766a:	e043      	b.n	80076f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800767e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007682:	d118      	bne.n	80076b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10a      	bne.n	80076a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007696:	461a      	mov	r2, r3
 8007698:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	e013      	b.n	80076c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ac:	461a      	mov	r2, r3
 80076ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	e008      	b.n	80076c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c2:	461a      	mov	r2, r3
 80076c4:	2300      	movs	r3, #0
 80076c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d4:	461a      	mov	r2, r3
 80076d6:	2300      	movs	r3, #0
 80076d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e6:	461a      	mov	r2, r3
 80076e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	3301      	adds	r3, #1
 80076f2:	613b      	str	r3, [r7, #16]
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d3b7      	bcc.n	800766c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800770a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800770e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800771c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	2b00      	cmp	r3, #0
 8007722:	d105      	bne.n	8007730 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	f043 0210 	orr.w	r2, r3, #16
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	699a      	ldr	r2, [r3, #24]
 8007734:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <USB_DevInit+0x2b4>)
 8007736:	4313      	orrs	r3, r2
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800773c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800773e:	2b00      	cmp	r3, #0
 8007740:	d005      	beq.n	800774e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	f043 0208 	orr.w	r2, r3, #8
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800774e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007750:	2b01      	cmp	r3, #1
 8007752:	d105      	bne.n	8007760 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	699a      	ldr	r2, [r3, #24]
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <USB_DevInit+0x2b8>)
 800775a:	4313      	orrs	r3, r2
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007760:	7dfb      	ldrb	r3, [r7, #23]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800776c:	b004      	add	sp, #16
 800776e:	4770      	bx	lr
 8007770:	803c3800 	.word	0x803c3800
 8007774:	40000004 	.word	0x40000004

08007778 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3301      	adds	r3, #1
 800778a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4a13      	ldr	r2, [pc, #76]	; (80077dc <USB_FlushTxFifo+0x64>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d901      	bls.n	8007798 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e01b      	b.n	80077d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	daf2      	bge.n	8007786 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	019b      	lsls	r3, r3, #6
 80077a8:	f043 0220 	orr.w	r2, r3, #32
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3301      	adds	r3, #1
 80077b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4a08      	ldr	r2, [pc, #32]	; (80077dc <USB_FlushTxFifo+0x64>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d901      	bls.n	80077c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e006      	b.n	80077d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	f003 0320 	and.w	r3, r3, #32
 80077ca:	2b20      	cmp	r3, #32
 80077cc:	d0f0      	beq.n	80077b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	00030d40 	.word	0x00030d40

080077e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	3301      	adds	r3, #1
 80077f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4a11      	ldr	r2, [pc, #68]	; (800783c <USB_FlushRxFifo+0x5c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d901      	bls.n	80077fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e018      	b.n	8007830 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	daf2      	bge.n	80077ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2210      	movs	r2, #16
 800780e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3301      	adds	r3, #1
 8007814:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	4a08      	ldr	r2, [pc, #32]	; (800783c <USB_FlushRxFifo+0x5c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d901      	bls.n	8007822 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e006      	b.n	8007830 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	f003 0310 	and.w	r3, r3, #16
 800782a:	2b10      	cmp	r3, #16
 800782c:	d0f0      	beq.n	8007810 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	00030d40 	.word	0x00030d40

08007840 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	78fb      	ldrb	r3, [r7, #3]
 800785a:	68f9      	ldr	r1, [r7, #12]
 800785c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007860:	4313      	orrs	r3, r2
 8007862:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007872:	b480      	push	{r7}
 8007874:	b085      	sub	sp, #20
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800788c:	f023 0303 	bic.w	r3, r3, #3
 8007890:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078a0:	f043 0302 	orr.w	r3, r3, #2
 80078a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	f003 0301 	and.w	r3, r3, #1
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3301      	adds	r3, #1
 80078e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4a13      	ldr	r2, [pc, #76]	; (8007934 <USB_CoreReset+0x64>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d901      	bls.n	80078ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e01b      	b.n	8007926 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	daf2      	bge.n	80078dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f043 0201 	orr.w	r2, r3, #1
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	3301      	adds	r3, #1
 800790a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4a09      	ldr	r2, [pc, #36]	; (8007934 <USB_CoreReset+0x64>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d901      	bls.n	8007918 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e006      	b.n	8007926 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b01      	cmp	r3, #1
 8007922:	d0f0      	beq.n	8007906 <USB_CoreReset+0x36>

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	00030d40 	.word	0x00030d40

08007938 <__errno>:
 8007938:	4b01      	ldr	r3, [pc, #4]	; (8007940 <__errno+0x8>)
 800793a:	6818      	ldr	r0, [r3, #0]
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	24000010 	.word	0x24000010

08007944 <__libc_init_array>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	4d0d      	ldr	r5, [pc, #52]	; (800797c <__libc_init_array+0x38>)
 8007948:	4c0d      	ldr	r4, [pc, #52]	; (8007980 <__libc_init_array+0x3c>)
 800794a:	1b64      	subs	r4, r4, r5
 800794c:	10a4      	asrs	r4, r4, #2
 800794e:	2600      	movs	r6, #0
 8007950:	42a6      	cmp	r6, r4
 8007952:	d109      	bne.n	8007968 <__libc_init_array+0x24>
 8007954:	4d0b      	ldr	r5, [pc, #44]	; (8007984 <__libc_init_array+0x40>)
 8007956:	4c0c      	ldr	r4, [pc, #48]	; (8007988 <__libc_init_array+0x44>)
 8007958:	f001 f824 	bl	80089a4 <_init>
 800795c:	1b64      	subs	r4, r4, r5
 800795e:	10a4      	asrs	r4, r4, #2
 8007960:	2600      	movs	r6, #0
 8007962:	42a6      	cmp	r6, r4
 8007964:	d105      	bne.n	8007972 <__libc_init_array+0x2e>
 8007966:	bd70      	pop	{r4, r5, r6, pc}
 8007968:	f855 3b04 	ldr.w	r3, [r5], #4
 800796c:	4798      	blx	r3
 800796e:	3601      	adds	r6, #1
 8007970:	e7ee      	b.n	8007950 <__libc_init_array+0xc>
 8007972:	f855 3b04 	ldr.w	r3, [r5], #4
 8007976:	4798      	blx	r3
 8007978:	3601      	adds	r6, #1
 800797a:	e7f2      	b.n	8007962 <__libc_init_array+0x1e>
 800797c:	08008abc 	.word	0x08008abc
 8007980:	08008abc 	.word	0x08008abc
 8007984:	08008abc 	.word	0x08008abc
 8007988:	08008ac0 	.word	0x08008ac0

0800798c <memset>:
 800798c:	4402      	add	r2, r0
 800798e:	4603      	mov	r3, r0
 8007990:	4293      	cmp	r3, r2
 8007992:	d100      	bne.n	8007996 <memset+0xa>
 8007994:	4770      	bx	lr
 8007996:	f803 1b01 	strb.w	r1, [r3], #1
 800799a:	e7f9      	b.n	8007990 <memset+0x4>

0800799c <iprintf>:
 800799c:	b40f      	push	{r0, r1, r2, r3}
 800799e:	4b0a      	ldr	r3, [pc, #40]	; (80079c8 <iprintf+0x2c>)
 80079a0:	b513      	push	{r0, r1, r4, lr}
 80079a2:	681c      	ldr	r4, [r3, #0]
 80079a4:	b124      	cbz	r4, 80079b0 <iprintf+0x14>
 80079a6:	69a3      	ldr	r3, [r4, #24]
 80079a8:	b913      	cbnz	r3, 80079b0 <iprintf+0x14>
 80079aa:	4620      	mov	r0, r4
 80079ac:	f000 fa5e 	bl	8007e6c <__sinit>
 80079b0:	ab05      	add	r3, sp, #20
 80079b2:	9a04      	ldr	r2, [sp, #16]
 80079b4:	68a1      	ldr	r1, [r4, #8]
 80079b6:	9301      	str	r3, [sp, #4]
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 fc67 	bl	800828c <_vfiprintf_r>
 80079be:	b002      	add	sp, #8
 80079c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c4:	b004      	add	sp, #16
 80079c6:	4770      	bx	lr
 80079c8:	24000010 	.word	0x24000010

080079cc <_puts_r>:
 80079cc:	b570      	push	{r4, r5, r6, lr}
 80079ce:	460e      	mov	r6, r1
 80079d0:	4605      	mov	r5, r0
 80079d2:	b118      	cbz	r0, 80079dc <_puts_r+0x10>
 80079d4:	6983      	ldr	r3, [r0, #24]
 80079d6:	b90b      	cbnz	r3, 80079dc <_puts_r+0x10>
 80079d8:	f000 fa48 	bl	8007e6c <__sinit>
 80079dc:	69ab      	ldr	r3, [r5, #24]
 80079de:	68ac      	ldr	r4, [r5, #8]
 80079e0:	b913      	cbnz	r3, 80079e8 <_puts_r+0x1c>
 80079e2:	4628      	mov	r0, r5
 80079e4:	f000 fa42 	bl	8007e6c <__sinit>
 80079e8:	4b2c      	ldr	r3, [pc, #176]	; (8007a9c <_puts_r+0xd0>)
 80079ea:	429c      	cmp	r4, r3
 80079ec:	d120      	bne.n	8007a30 <_puts_r+0x64>
 80079ee:	686c      	ldr	r4, [r5, #4]
 80079f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079f2:	07db      	lsls	r3, r3, #31
 80079f4:	d405      	bmi.n	8007a02 <_puts_r+0x36>
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	0598      	lsls	r0, r3, #22
 80079fa:	d402      	bmi.n	8007a02 <_puts_r+0x36>
 80079fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079fe:	f000 fad3 	bl	8007fa8 <__retarget_lock_acquire_recursive>
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	0719      	lsls	r1, r3, #28
 8007a06:	d51d      	bpl.n	8007a44 <_puts_r+0x78>
 8007a08:	6923      	ldr	r3, [r4, #16]
 8007a0a:	b1db      	cbz	r3, 8007a44 <_puts_r+0x78>
 8007a0c:	3e01      	subs	r6, #1
 8007a0e:	68a3      	ldr	r3, [r4, #8]
 8007a10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a14:	3b01      	subs	r3, #1
 8007a16:	60a3      	str	r3, [r4, #8]
 8007a18:	bb39      	cbnz	r1, 8007a6a <_puts_r+0x9e>
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	da38      	bge.n	8007a90 <_puts_r+0xc4>
 8007a1e:	4622      	mov	r2, r4
 8007a20:	210a      	movs	r1, #10
 8007a22:	4628      	mov	r0, r5
 8007a24:	f000 f848 	bl	8007ab8 <__swbuf_r>
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d011      	beq.n	8007a50 <_puts_r+0x84>
 8007a2c:	250a      	movs	r5, #10
 8007a2e:	e011      	b.n	8007a54 <_puts_r+0x88>
 8007a30:	4b1b      	ldr	r3, [pc, #108]	; (8007aa0 <_puts_r+0xd4>)
 8007a32:	429c      	cmp	r4, r3
 8007a34:	d101      	bne.n	8007a3a <_puts_r+0x6e>
 8007a36:	68ac      	ldr	r4, [r5, #8]
 8007a38:	e7da      	b.n	80079f0 <_puts_r+0x24>
 8007a3a:	4b1a      	ldr	r3, [pc, #104]	; (8007aa4 <_puts_r+0xd8>)
 8007a3c:	429c      	cmp	r4, r3
 8007a3e:	bf08      	it	eq
 8007a40:	68ec      	ldreq	r4, [r5, #12]
 8007a42:	e7d5      	b.n	80079f0 <_puts_r+0x24>
 8007a44:	4621      	mov	r1, r4
 8007a46:	4628      	mov	r0, r5
 8007a48:	f000 f888 	bl	8007b5c <__swsetup_r>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d0dd      	beq.n	8007a0c <_puts_r+0x40>
 8007a50:	f04f 35ff 	mov.w	r5, #4294967295
 8007a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a56:	07da      	lsls	r2, r3, #31
 8007a58:	d405      	bmi.n	8007a66 <_puts_r+0x9a>
 8007a5a:	89a3      	ldrh	r3, [r4, #12]
 8007a5c:	059b      	lsls	r3, r3, #22
 8007a5e:	d402      	bmi.n	8007a66 <_puts_r+0x9a>
 8007a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a62:	f000 faa2 	bl	8007faa <__retarget_lock_release_recursive>
 8007a66:	4628      	mov	r0, r5
 8007a68:	bd70      	pop	{r4, r5, r6, pc}
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	da04      	bge.n	8007a78 <_puts_r+0xac>
 8007a6e:	69a2      	ldr	r2, [r4, #24]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	dc06      	bgt.n	8007a82 <_puts_r+0xb6>
 8007a74:	290a      	cmp	r1, #10
 8007a76:	d004      	beq.n	8007a82 <_puts_r+0xb6>
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	6022      	str	r2, [r4, #0]
 8007a7e:	7019      	strb	r1, [r3, #0]
 8007a80:	e7c5      	b.n	8007a0e <_puts_r+0x42>
 8007a82:	4622      	mov	r2, r4
 8007a84:	4628      	mov	r0, r5
 8007a86:	f000 f817 	bl	8007ab8 <__swbuf_r>
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	d1bf      	bne.n	8007a0e <_puts_r+0x42>
 8007a8e:	e7df      	b.n	8007a50 <_puts_r+0x84>
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	250a      	movs	r5, #10
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	6022      	str	r2, [r4, #0]
 8007a98:	701d      	strb	r5, [r3, #0]
 8007a9a:	e7db      	b.n	8007a54 <_puts_r+0x88>
 8007a9c:	08008a40 	.word	0x08008a40
 8007aa0:	08008a60 	.word	0x08008a60
 8007aa4:	08008a20 	.word	0x08008a20

08007aa8 <puts>:
 8007aa8:	4b02      	ldr	r3, [pc, #8]	; (8007ab4 <puts+0xc>)
 8007aaa:	4601      	mov	r1, r0
 8007aac:	6818      	ldr	r0, [r3, #0]
 8007aae:	f7ff bf8d 	b.w	80079cc <_puts_r>
 8007ab2:	bf00      	nop
 8007ab4:	24000010 	.word	0x24000010

08007ab8 <__swbuf_r>:
 8007ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aba:	460e      	mov	r6, r1
 8007abc:	4614      	mov	r4, r2
 8007abe:	4605      	mov	r5, r0
 8007ac0:	b118      	cbz	r0, 8007aca <__swbuf_r+0x12>
 8007ac2:	6983      	ldr	r3, [r0, #24]
 8007ac4:	b90b      	cbnz	r3, 8007aca <__swbuf_r+0x12>
 8007ac6:	f000 f9d1 	bl	8007e6c <__sinit>
 8007aca:	4b21      	ldr	r3, [pc, #132]	; (8007b50 <__swbuf_r+0x98>)
 8007acc:	429c      	cmp	r4, r3
 8007ace:	d12b      	bne.n	8007b28 <__swbuf_r+0x70>
 8007ad0:	686c      	ldr	r4, [r5, #4]
 8007ad2:	69a3      	ldr	r3, [r4, #24]
 8007ad4:	60a3      	str	r3, [r4, #8]
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	071a      	lsls	r2, r3, #28
 8007ada:	d52f      	bpl.n	8007b3c <__swbuf_r+0x84>
 8007adc:	6923      	ldr	r3, [r4, #16]
 8007ade:	b36b      	cbz	r3, 8007b3c <__swbuf_r+0x84>
 8007ae0:	6923      	ldr	r3, [r4, #16]
 8007ae2:	6820      	ldr	r0, [r4, #0]
 8007ae4:	1ac0      	subs	r0, r0, r3
 8007ae6:	6963      	ldr	r3, [r4, #20]
 8007ae8:	b2f6      	uxtb	r6, r6
 8007aea:	4283      	cmp	r3, r0
 8007aec:	4637      	mov	r7, r6
 8007aee:	dc04      	bgt.n	8007afa <__swbuf_r+0x42>
 8007af0:	4621      	mov	r1, r4
 8007af2:	4628      	mov	r0, r5
 8007af4:	f000 f926 	bl	8007d44 <_fflush_r>
 8007af8:	bb30      	cbnz	r0, 8007b48 <__swbuf_r+0x90>
 8007afa:	68a3      	ldr	r3, [r4, #8]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	60a3      	str	r3, [r4, #8]
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	6022      	str	r2, [r4, #0]
 8007b06:	701e      	strb	r6, [r3, #0]
 8007b08:	6963      	ldr	r3, [r4, #20]
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	4283      	cmp	r3, r0
 8007b0e:	d004      	beq.n	8007b1a <__swbuf_r+0x62>
 8007b10:	89a3      	ldrh	r3, [r4, #12]
 8007b12:	07db      	lsls	r3, r3, #31
 8007b14:	d506      	bpl.n	8007b24 <__swbuf_r+0x6c>
 8007b16:	2e0a      	cmp	r6, #10
 8007b18:	d104      	bne.n	8007b24 <__swbuf_r+0x6c>
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f000 f911 	bl	8007d44 <_fflush_r>
 8007b22:	b988      	cbnz	r0, 8007b48 <__swbuf_r+0x90>
 8007b24:	4638      	mov	r0, r7
 8007b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b28:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <__swbuf_r+0x9c>)
 8007b2a:	429c      	cmp	r4, r3
 8007b2c:	d101      	bne.n	8007b32 <__swbuf_r+0x7a>
 8007b2e:	68ac      	ldr	r4, [r5, #8]
 8007b30:	e7cf      	b.n	8007ad2 <__swbuf_r+0x1a>
 8007b32:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <__swbuf_r+0xa0>)
 8007b34:	429c      	cmp	r4, r3
 8007b36:	bf08      	it	eq
 8007b38:	68ec      	ldreq	r4, [r5, #12]
 8007b3a:	e7ca      	b.n	8007ad2 <__swbuf_r+0x1a>
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f000 f80c 	bl	8007b5c <__swsetup_r>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d0cb      	beq.n	8007ae0 <__swbuf_r+0x28>
 8007b48:	f04f 37ff 	mov.w	r7, #4294967295
 8007b4c:	e7ea      	b.n	8007b24 <__swbuf_r+0x6c>
 8007b4e:	bf00      	nop
 8007b50:	08008a40 	.word	0x08008a40
 8007b54:	08008a60 	.word	0x08008a60
 8007b58:	08008a20 	.word	0x08008a20

08007b5c <__swsetup_r>:
 8007b5c:	4b32      	ldr	r3, [pc, #200]	; (8007c28 <__swsetup_r+0xcc>)
 8007b5e:	b570      	push	{r4, r5, r6, lr}
 8007b60:	681d      	ldr	r5, [r3, #0]
 8007b62:	4606      	mov	r6, r0
 8007b64:	460c      	mov	r4, r1
 8007b66:	b125      	cbz	r5, 8007b72 <__swsetup_r+0x16>
 8007b68:	69ab      	ldr	r3, [r5, #24]
 8007b6a:	b913      	cbnz	r3, 8007b72 <__swsetup_r+0x16>
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	f000 f97d 	bl	8007e6c <__sinit>
 8007b72:	4b2e      	ldr	r3, [pc, #184]	; (8007c2c <__swsetup_r+0xd0>)
 8007b74:	429c      	cmp	r4, r3
 8007b76:	d10f      	bne.n	8007b98 <__swsetup_r+0x3c>
 8007b78:	686c      	ldr	r4, [r5, #4]
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b80:	0719      	lsls	r1, r3, #28
 8007b82:	d42c      	bmi.n	8007bde <__swsetup_r+0x82>
 8007b84:	06dd      	lsls	r5, r3, #27
 8007b86:	d411      	bmi.n	8007bac <__swsetup_r+0x50>
 8007b88:	2309      	movs	r3, #9
 8007b8a:	6033      	str	r3, [r6, #0]
 8007b8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b90:	81a3      	strh	r3, [r4, #12]
 8007b92:	f04f 30ff 	mov.w	r0, #4294967295
 8007b96:	e03e      	b.n	8007c16 <__swsetup_r+0xba>
 8007b98:	4b25      	ldr	r3, [pc, #148]	; (8007c30 <__swsetup_r+0xd4>)
 8007b9a:	429c      	cmp	r4, r3
 8007b9c:	d101      	bne.n	8007ba2 <__swsetup_r+0x46>
 8007b9e:	68ac      	ldr	r4, [r5, #8]
 8007ba0:	e7eb      	b.n	8007b7a <__swsetup_r+0x1e>
 8007ba2:	4b24      	ldr	r3, [pc, #144]	; (8007c34 <__swsetup_r+0xd8>)
 8007ba4:	429c      	cmp	r4, r3
 8007ba6:	bf08      	it	eq
 8007ba8:	68ec      	ldreq	r4, [r5, #12]
 8007baa:	e7e6      	b.n	8007b7a <__swsetup_r+0x1e>
 8007bac:	0758      	lsls	r0, r3, #29
 8007bae:	d512      	bpl.n	8007bd6 <__swsetup_r+0x7a>
 8007bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bb2:	b141      	cbz	r1, 8007bc6 <__swsetup_r+0x6a>
 8007bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bb8:	4299      	cmp	r1, r3
 8007bba:	d002      	beq.n	8007bc2 <__swsetup_r+0x66>
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	f000 fa5b 	bl	8008078 <_free_r>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	6363      	str	r3, [r4, #52]	; 0x34
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bcc:	81a3      	strh	r3, [r4, #12]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	6063      	str	r3, [r4, #4]
 8007bd2:	6923      	ldr	r3, [r4, #16]
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	f043 0308 	orr.w	r3, r3, #8
 8007bdc:	81a3      	strh	r3, [r4, #12]
 8007bde:	6923      	ldr	r3, [r4, #16]
 8007be0:	b94b      	cbnz	r3, 8007bf6 <__swsetup_r+0x9a>
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bec:	d003      	beq.n	8007bf6 <__swsetup_r+0x9a>
 8007bee:	4621      	mov	r1, r4
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f000 fa01 	bl	8007ff8 <__smakebuf_r>
 8007bf6:	89a0      	ldrh	r0, [r4, #12]
 8007bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bfc:	f010 0301 	ands.w	r3, r0, #1
 8007c00:	d00a      	beq.n	8007c18 <__swsetup_r+0xbc>
 8007c02:	2300      	movs	r3, #0
 8007c04:	60a3      	str	r3, [r4, #8]
 8007c06:	6963      	ldr	r3, [r4, #20]
 8007c08:	425b      	negs	r3, r3
 8007c0a:	61a3      	str	r3, [r4, #24]
 8007c0c:	6923      	ldr	r3, [r4, #16]
 8007c0e:	b943      	cbnz	r3, 8007c22 <__swsetup_r+0xc6>
 8007c10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c14:	d1ba      	bne.n	8007b8c <__swsetup_r+0x30>
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	0781      	lsls	r1, r0, #30
 8007c1a:	bf58      	it	pl
 8007c1c:	6963      	ldrpl	r3, [r4, #20]
 8007c1e:	60a3      	str	r3, [r4, #8]
 8007c20:	e7f4      	b.n	8007c0c <__swsetup_r+0xb0>
 8007c22:	2000      	movs	r0, #0
 8007c24:	e7f7      	b.n	8007c16 <__swsetup_r+0xba>
 8007c26:	bf00      	nop
 8007c28:	24000010 	.word	0x24000010
 8007c2c:	08008a40 	.word	0x08008a40
 8007c30:	08008a60 	.word	0x08008a60
 8007c34:	08008a20 	.word	0x08008a20

08007c38 <__sflush_r>:
 8007c38:	898a      	ldrh	r2, [r1, #12]
 8007c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3e:	4605      	mov	r5, r0
 8007c40:	0710      	lsls	r0, r2, #28
 8007c42:	460c      	mov	r4, r1
 8007c44:	d458      	bmi.n	8007cf8 <__sflush_r+0xc0>
 8007c46:	684b      	ldr	r3, [r1, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	dc05      	bgt.n	8007c58 <__sflush_r+0x20>
 8007c4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	dc02      	bgt.n	8007c58 <__sflush_r+0x20>
 8007c52:	2000      	movs	r0, #0
 8007c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c5a:	2e00      	cmp	r6, #0
 8007c5c:	d0f9      	beq.n	8007c52 <__sflush_r+0x1a>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c64:	682f      	ldr	r7, [r5, #0]
 8007c66:	602b      	str	r3, [r5, #0]
 8007c68:	d032      	beq.n	8007cd0 <__sflush_r+0x98>
 8007c6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	075a      	lsls	r2, r3, #29
 8007c70:	d505      	bpl.n	8007c7e <__sflush_r+0x46>
 8007c72:	6863      	ldr	r3, [r4, #4]
 8007c74:	1ac0      	subs	r0, r0, r3
 8007c76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c78:	b10b      	cbz	r3, 8007c7e <__sflush_r+0x46>
 8007c7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c7c:	1ac0      	subs	r0, r0, r3
 8007c7e:	2300      	movs	r3, #0
 8007c80:	4602      	mov	r2, r0
 8007c82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c84:	6a21      	ldr	r1, [r4, #32]
 8007c86:	4628      	mov	r0, r5
 8007c88:	47b0      	blx	r6
 8007c8a:	1c43      	adds	r3, r0, #1
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	d106      	bne.n	8007c9e <__sflush_r+0x66>
 8007c90:	6829      	ldr	r1, [r5, #0]
 8007c92:	291d      	cmp	r1, #29
 8007c94:	d82c      	bhi.n	8007cf0 <__sflush_r+0xb8>
 8007c96:	4a2a      	ldr	r2, [pc, #168]	; (8007d40 <__sflush_r+0x108>)
 8007c98:	40ca      	lsrs	r2, r1
 8007c9a:	07d6      	lsls	r6, r2, #31
 8007c9c:	d528      	bpl.n	8007cf0 <__sflush_r+0xb8>
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	6062      	str	r2, [r4, #4]
 8007ca2:	04d9      	lsls	r1, r3, #19
 8007ca4:	6922      	ldr	r2, [r4, #16]
 8007ca6:	6022      	str	r2, [r4, #0]
 8007ca8:	d504      	bpl.n	8007cb4 <__sflush_r+0x7c>
 8007caa:	1c42      	adds	r2, r0, #1
 8007cac:	d101      	bne.n	8007cb2 <__sflush_r+0x7a>
 8007cae:	682b      	ldr	r3, [r5, #0]
 8007cb0:	b903      	cbnz	r3, 8007cb4 <__sflush_r+0x7c>
 8007cb2:	6560      	str	r0, [r4, #84]	; 0x54
 8007cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cb6:	602f      	str	r7, [r5, #0]
 8007cb8:	2900      	cmp	r1, #0
 8007cba:	d0ca      	beq.n	8007c52 <__sflush_r+0x1a>
 8007cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cc0:	4299      	cmp	r1, r3
 8007cc2:	d002      	beq.n	8007cca <__sflush_r+0x92>
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f000 f9d7 	bl	8008078 <_free_r>
 8007cca:	2000      	movs	r0, #0
 8007ccc:	6360      	str	r0, [r4, #52]	; 0x34
 8007cce:	e7c1      	b.n	8007c54 <__sflush_r+0x1c>
 8007cd0:	6a21      	ldr	r1, [r4, #32]
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	47b0      	blx	r6
 8007cd8:	1c41      	adds	r1, r0, #1
 8007cda:	d1c7      	bne.n	8007c6c <__sflush_r+0x34>
 8007cdc:	682b      	ldr	r3, [r5, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0c4      	beq.n	8007c6c <__sflush_r+0x34>
 8007ce2:	2b1d      	cmp	r3, #29
 8007ce4:	d001      	beq.n	8007cea <__sflush_r+0xb2>
 8007ce6:	2b16      	cmp	r3, #22
 8007ce8:	d101      	bne.n	8007cee <__sflush_r+0xb6>
 8007cea:	602f      	str	r7, [r5, #0]
 8007cec:	e7b1      	b.n	8007c52 <__sflush_r+0x1a>
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cf4:	81a3      	strh	r3, [r4, #12]
 8007cf6:	e7ad      	b.n	8007c54 <__sflush_r+0x1c>
 8007cf8:	690f      	ldr	r7, [r1, #16]
 8007cfa:	2f00      	cmp	r7, #0
 8007cfc:	d0a9      	beq.n	8007c52 <__sflush_r+0x1a>
 8007cfe:	0793      	lsls	r3, r2, #30
 8007d00:	680e      	ldr	r6, [r1, #0]
 8007d02:	bf08      	it	eq
 8007d04:	694b      	ldreq	r3, [r1, #20]
 8007d06:	600f      	str	r7, [r1, #0]
 8007d08:	bf18      	it	ne
 8007d0a:	2300      	movne	r3, #0
 8007d0c:	eba6 0807 	sub.w	r8, r6, r7
 8007d10:	608b      	str	r3, [r1, #8]
 8007d12:	f1b8 0f00 	cmp.w	r8, #0
 8007d16:	dd9c      	ble.n	8007c52 <__sflush_r+0x1a>
 8007d18:	6a21      	ldr	r1, [r4, #32]
 8007d1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d1c:	4643      	mov	r3, r8
 8007d1e:	463a      	mov	r2, r7
 8007d20:	4628      	mov	r0, r5
 8007d22:	47b0      	blx	r6
 8007d24:	2800      	cmp	r0, #0
 8007d26:	dc06      	bgt.n	8007d36 <__sflush_r+0xfe>
 8007d28:	89a3      	ldrh	r3, [r4, #12]
 8007d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d2e:	81a3      	strh	r3, [r4, #12]
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	e78e      	b.n	8007c54 <__sflush_r+0x1c>
 8007d36:	4407      	add	r7, r0
 8007d38:	eba8 0800 	sub.w	r8, r8, r0
 8007d3c:	e7e9      	b.n	8007d12 <__sflush_r+0xda>
 8007d3e:	bf00      	nop
 8007d40:	20400001 	.word	0x20400001

08007d44 <_fflush_r>:
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	690b      	ldr	r3, [r1, #16]
 8007d48:	4605      	mov	r5, r0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	b913      	cbnz	r3, 8007d54 <_fflush_r+0x10>
 8007d4e:	2500      	movs	r5, #0
 8007d50:	4628      	mov	r0, r5
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	b118      	cbz	r0, 8007d5e <_fflush_r+0x1a>
 8007d56:	6983      	ldr	r3, [r0, #24]
 8007d58:	b90b      	cbnz	r3, 8007d5e <_fflush_r+0x1a>
 8007d5a:	f000 f887 	bl	8007e6c <__sinit>
 8007d5e:	4b14      	ldr	r3, [pc, #80]	; (8007db0 <_fflush_r+0x6c>)
 8007d60:	429c      	cmp	r4, r3
 8007d62:	d11b      	bne.n	8007d9c <_fflush_r+0x58>
 8007d64:	686c      	ldr	r4, [r5, #4]
 8007d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d0ef      	beq.n	8007d4e <_fflush_r+0xa>
 8007d6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d70:	07d0      	lsls	r0, r2, #31
 8007d72:	d404      	bmi.n	8007d7e <_fflush_r+0x3a>
 8007d74:	0599      	lsls	r1, r3, #22
 8007d76:	d402      	bmi.n	8007d7e <_fflush_r+0x3a>
 8007d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d7a:	f000 f915 	bl	8007fa8 <__retarget_lock_acquire_recursive>
 8007d7e:	4628      	mov	r0, r5
 8007d80:	4621      	mov	r1, r4
 8007d82:	f7ff ff59 	bl	8007c38 <__sflush_r>
 8007d86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d88:	07da      	lsls	r2, r3, #31
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	d4e0      	bmi.n	8007d50 <_fflush_r+0xc>
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	059b      	lsls	r3, r3, #22
 8007d92:	d4dd      	bmi.n	8007d50 <_fflush_r+0xc>
 8007d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d96:	f000 f908 	bl	8007faa <__retarget_lock_release_recursive>
 8007d9a:	e7d9      	b.n	8007d50 <_fflush_r+0xc>
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <_fflush_r+0x70>)
 8007d9e:	429c      	cmp	r4, r3
 8007da0:	d101      	bne.n	8007da6 <_fflush_r+0x62>
 8007da2:	68ac      	ldr	r4, [r5, #8]
 8007da4:	e7df      	b.n	8007d66 <_fflush_r+0x22>
 8007da6:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <_fflush_r+0x74>)
 8007da8:	429c      	cmp	r4, r3
 8007daa:	bf08      	it	eq
 8007dac:	68ec      	ldreq	r4, [r5, #12]
 8007dae:	e7da      	b.n	8007d66 <_fflush_r+0x22>
 8007db0:	08008a40 	.word	0x08008a40
 8007db4:	08008a60 	.word	0x08008a60
 8007db8:	08008a20 	.word	0x08008a20

08007dbc <std>:
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	b510      	push	{r4, lr}
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8007dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dca:	6083      	str	r3, [r0, #8]
 8007dcc:	8181      	strh	r1, [r0, #12]
 8007dce:	6643      	str	r3, [r0, #100]	; 0x64
 8007dd0:	81c2      	strh	r2, [r0, #14]
 8007dd2:	6183      	str	r3, [r0, #24]
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	2208      	movs	r2, #8
 8007dd8:	305c      	adds	r0, #92	; 0x5c
 8007dda:	f7ff fdd7 	bl	800798c <memset>
 8007dde:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <std+0x38>)
 8007de0:	6263      	str	r3, [r4, #36]	; 0x24
 8007de2:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <std+0x3c>)
 8007de4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007de6:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <std+0x40>)
 8007de8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dea:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <std+0x44>)
 8007dec:	6224      	str	r4, [r4, #32]
 8007dee:	6323      	str	r3, [r4, #48]	; 0x30
 8007df0:	bd10      	pop	{r4, pc}
 8007df2:	bf00      	nop
 8007df4:	08008835 	.word	0x08008835
 8007df8:	08008857 	.word	0x08008857
 8007dfc:	0800888f 	.word	0x0800888f
 8007e00:	080088b3 	.word	0x080088b3

08007e04 <_cleanup_r>:
 8007e04:	4901      	ldr	r1, [pc, #4]	; (8007e0c <_cleanup_r+0x8>)
 8007e06:	f000 b8af 	b.w	8007f68 <_fwalk_reent>
 8007e0a:	bf00      	nop
 8007e0c:	08007d45 	.word	0x08007d45

08007e10 <__sfmoreglue>:
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	2268      	movs	r2, #104	; 0x68
 8007e14:	1e4d      	subs	r5, r1, #1
 8007e16:	4355      	muls	r5, r2
 8007e18:	460e      	mov	r6, r1
 8007e1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e1e:	f000 f997 	bl	8008150 <_malloc_r>
 8007e22:	4604      	mov	r4, r0
 8007e24:	b140      	cbz	r0, 8007e38 <__sfmoreglue+0x28>
 8007e26:	2100      	movs	r1, #0
 8007e28:	e9c0 1600 	strd	r1, r6, [r0]
 8007e2c:	300c      	adds	r0, #12
 8007e2e:	60a0      	str	r0, [r4, #8]
 8007e30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e34:	f7ff fdaa 	bl	800798c <memset>
 8007e38:	4620      	mov	r0, r4
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}

08007e3c <__sfp_lock_acquire>:
 8007e3c:	4801      	ldr	r0, [pc, #4]	; (8007e44 <__sfp_lock_acquire+0x8>)
 8007e3e:	f000 b8b3 	b.w	8007fa8 <__retarget_lock_acquire_recursive>
 8007e42:	bf00      	nop
 8007e44:	24000855 	.word	0x24000855

08007e48 <__sfp_lock_release>:
 8007e48:	4801      	ldr	r0, [pc, #4]	; (8007e50 <__sfp_lock_release+0x8>)
 8007e4a:	f000 b8ae 	b.w	8007faa <__retarget_lock_release_recursive>
 8007e4e:	bf00      	nop
 8007e50:	24000855 	.word	0x24000855

08007e54 <__sinit_lock_acquire>:
 8007e54:	4801      	ldr	r0, [pc, #4]	; (8007e5c <__sinit_lock_acquire+0x8>)
 8007e56:	f000 b8a7 	b.w	8007fa8 <__retarget_lock_acquire_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	24000856 	.word	0x24000856

08007e60 <__sinit_lock_release>:
 8007e60:	4801      	ldr	r0, [pc, #4]	; (8007e68 <__sinit_lock_release+0x8>)
 8007e62:	f000 b8a2 	b.w	8007faa <__retarget_lock_release_recursive>
 8007e66:	bf00      	nop
 8007e68:	24000856 	.word	0x24000856

08007e6c <__sinit>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	4604      	mov	r4, r0
 8007e70:	f7ff fff0 	bl	8007e54 <__sinit_lock_acquire>
 8007e74:	69a3      	ldr	r3, [r4, #24]
 8007e76:	b11b      	cbz	r3, 8007e80 <__sinit+0x14>
 8007e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e7c:	f7ff bff0 	b.w	8007e60 <__sinit_lock_release>
 8007e80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e84:	6523      	str	r3, [r4, #80]	; 0x50
 8007e86:	4b13      	ldr	r3, [pc, #76]	; (8007ed4 <__sinit+0x68>)
 8007e88:	4a13      	ldr	r2, [pc, #76]	; (8007ed8 <__sinit+0x6c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e8e:	42a3      	cmp	r3, r4
 8007e90:	bf04      	itt	eq
 8007e92:	2301      	moveq	r3, #1
 8007e94:	61a3      	streq	r3, [r4, #24]
 8007e96:	4620      	mov	r0, r4
 8007e98:	f000 f820 	bl	8007edc <__sfp>
 8007e9c:	6060      	str	r0, [r4, #4]
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f000 f81c 	bl	8007edc <__sfp>
 8007ea4:	60a0      	str	r0, [r4, #8]
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f000 f818 	bl	8007edc <__sfp>
 8007eac:	2200      	movs	r2, #0
 8007eae:	60e0      	str	r0, [r4, #12]
 8007eb0:	2104      	movs	r1, #4
 8007eb2:	6860      	ldr	r0, [r4, #4]
 8007eb4:	f7ff ff82 	bl	8007dbc <std>
 8007eb8:	68a0      	ldr	r0, [r4, #8]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	2109      	movs	r1, #9
 8007ebe:	f7ff ff7d 	bl	8007dbc <std>
 8007ec2:	68e0      	ldr	r0, [r4, #12]
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	2112      	movs	r1, #18
 8007ec8:	f7ff ff78 	bl	8007dbc <std>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	61a3      	str	r3, [r4, #24]
 8007ed0:	e7d2      	b.n	8007e78 <__sinit+0xc>
 8007ed2:	bf00      	nop
 8007ed4:	08008a1c 	.word	0x08008a1c
 8007ed8:	08007e05 	.word	0x08007e05

08007edc <__sfp>:
 8007edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ede:	4607      	mov	r7, r0
 8007ee0:	f7ff ffac 	bl	8007e3c <__sfp_lock_acquire>
 8007ee4:	4b1e      	ldr	r3, [pc, #120]	; (8007f60 <__sfp+0x84>)
 8007ee6:	681e      	ldr	r6, [r3, #0]
 8007ee8:	69b3      	ldr	r3, [r6, #24]
 8007eea:	b913      	cbnz	r3, 8007ef2 <__sfp+0x16>
 8007eec:	4630      	mov	r0, r6
 8007eee:	f7ff ffbd 	bl	8007e6c <__sinit>
 8007ef2:	3648      	adds	r6, #72	; 0x48
 8007ef4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	d503      	bpl.n	8007f04 <__sfp+0x28>
 8007efc:	6833      	ldr	r3, [r6, #0]
 8007efe:	b30b      	cbz	r3, 8007f44 <__sfp+0x68>
 8007f00:	6836      	ldr	r6, [r6, #0]
 8007f02:	e7f7      	b.n	8007ef4 <__sfp+0x18>
 8007f04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f08:	b9d5      	cbnz	r5, 8007f40 <__sfp+0x64>
 8007f0a:	4b16      	ldr	r3, [pc, #88]	; (8007f64 <__sfp+0x88>)
 8007f0c:	60e3      	str	r3, [r4, #12]
 8007f0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f12:	6665      	str	r5, [r4, #100]	; 0x64
 8007f14:	f000 f847 	bl	8007fa6 <__retarget_lock_init_recursive>
 8007f18:	f7ff ff96 	bl	8007e48 <__sfp_lock_release>
 8007f1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f24:	6025      	str	r5, [r4, #0]
 8007f26:	61a5      	str	r5, [r4, #24]
 8007f28:	2208      	movs	r2, #8
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f30:	f7ff fd2c 	bl	800798c <memset>
 8007f34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f40:	3468      	adds	r4, #104	; 0x68
 8007f42:	e7d9      	b.n	8007ef8 <__sfp+0x1c>
 8007f44:	2104      	movs	r1, #4
 8007f46:	4638      	mov	r0, r7
 8007f48:	f7ff ff62 	bl	8007e10 <__sfmoreglue>
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	6030      	str	r0, [r6, #0]
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d1d5      	bne.n	8007f00 <__sfp+0x24>
 8007f54:	f7ff ff78 	bl	8007e48 <__sfp_lock_release>
 8007f58:	230c      	movs	r3, #12
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	e7ee      	b.n	8007f3c <__sfp+0x60>
 8007f5e:	bf00      	nop
 8007f60:	08008a1c 	.word	0x08008a1c
 8007f64:	ffff0001 	.word	0xffff0001

08007f68 <_fwalk_reent>:
 8007f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f6c:	4606      	mov	r6, r0
 8007f6e:	4688      	mov	r8, r1
 8007f70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f74:	2700      	movs	r7, #0
 8007f76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f7a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f7e:	d505      	bpl.n	8007f8c <_fwalk_reent+0x24>
 8007f80:	6824      	ldr	r4, [r4, #0]
 8007f82:	2c00      	cmp	r4, #0
 8007f84:	d1f7      	bne.n	8007f76 <_fwalk_reent+0xe>
 8007f86:	4638      	mov	r0, r7
 8007f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f8c:	89ab      	ldrh	r3, [r5, #12]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d907      	bls.n	8007fa2 <_fwalk_reent+0x3a>
 8007f92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f96:	3301      	adds	r3, #1
 8007f98:	d003      	beq.n	8007fa2 <_fwalk_reent+0x3a>
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	47c0      	blx	r8
 8007fa0:	4307      	orrs	r7, r0
 8007fa2:	3568      	adds	r5, #104	; 0x68
 8007fa4:	e7e9      	b.n	8007f7a <_fwalk_reent+0x12>

08007fa6 <__retarget_lock_init_recursive>:
 8007fa6:	4770      	bx	lr

08007fa8 <__retarget_lock_acquire_recursive>:
 8007fa8:	4770      	bx	lr

08007faa <__retarget_lock_release_recursive>:
 8007faa:	4770      	bx	lr

08007fac <__swhatbuf_r>:
 8007fac:	b570      	push	{r4, r5, r6, lr}
 8007fae:	460e      	mov	r6, r1
 8007fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb4:	2900      	cmp	r1, #0
 8007fb6:	b096      	sub	sp, #88	; 0x58
 8007fb8:	4614      	mov	r4, r2
 8007fba:	461d      	mov	r5, r3
 8007fbc:	da08      	bge.n	8007fd0 <__swhatbuf_r+0x24>
 8007fbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	602a      	str	r2, [r5, #0]
 8007fc6:	061a      	lsls	r2, r3, #24
 8007fc8:	d410      	bmi.n	8007fec <__swhatbuf_r+0x40>
 8007fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fce:	e00e      	b.n	8007fee <__swhatbuf_r+0x42>
 8007fd0:	466a      	mov	r2, sp
 8007fd2:	f000 fc95 	bl	8008900 <_fstat_r>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	dbf1      	blt.n	8007fbe <__swhatbuf_r+0x12>
 8007fda:	9a01      	ldr	r2, [sp, #4]
 8007fdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fe0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fe4:	425a      	negs	r2, r3
 8007fe6:	415a      	adcs	r2, r3
 8007fe8:	602a      	str	r2, [r5, #0]
 8007fea:	e7ee      	b.n	8007fca <__swhatbuf_r+0x1e>
 8007fec:	2340      	movs	r3, #64	; 0x40
 8007fee:	2000      	movs	r0, #0
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	b016      	add	sp, #88	; 0x58
 8007ff4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ff8 <__smakebuf_r>:
 8007ff8:	898b      	ldrh	r3, [r1, #12]
 8007ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ffc:	079d      	lsls	r5, r3, #30
 8007ffe:	4606      	mov	r6, r0
 8008000:	460c      	mov	r4, r1
 8008002:	d507      	bpl.n	8008014 <__smakebuf_r+0x1c>
 8008004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	6123      	str	r3, [r4, #16]
 800800c:	2301      	movs	r3, #1
 800800e:	6163      	str	r3, [r4, #20]
 8008010:	b002      	add	sp, #8
 8008012:	bd70      	pop	{r4, r5, r6, pc}
 8008014:	ab01      	add	r3, sp, #4
 8008016:	466a      	mov	r2, sp
 8008018:	f7ff ffc8 	bl	8007fac <__swhatbuf_r>
 800801c:	9900      	ldr	r1, [sp, #0]
 800801e:	4605      	mov	r5, r0
 8008020:	4630      	mov	r0, r6
 8008022:	f000 f895 	bl	8008150 <_malloc_r>
 8008026:	b948      	cbnz	r0, 800803c <__smakebuf_r+0x44>
 8008028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800802c:	059a      	lsls	r2, r3, #22
 800802e:	d4ef      	bmi.n	8008010 <__smakebuf_r+0x18>
 8008030:	f023 0303 	bic.w	r3, r3, #3
 8008034:	f043 0302 	orr.w	r3, r3, #2
 8008038:	81a3      	strh	r3, [r4, #12]
 800803a:	e7e3      	b.n	8008004 <__smakebuf_r+0xc>
 800803c:	4b0d      	ldr	r3, [pc, #52]	; (8008074 <__smakebuf_r+0x7c>)
 800803e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008040:	89a3      	ldrh	r3, [r4, #12]
 8008042:	6020      	str	r0, [r4, #0]
 8008044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008048:	81a3      	strh	r3, [r4, #12]
 800804a:	9b00      	ldr	r3, [sp, #0]
 800804c:	6163      	str	r3, [r4, #20]
 800804e:	9b01      	ldr	r3, [sp, #4]
 8008050:	6120      	str	r0, [r4, #16]
 8008052:	b15b      	cbz	r3, 800806c <__smakebuf_r+0x74>
 8008054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008058:	4630      	mov	r0, r6
 800805a:	f000 fc63 	bl	8008924 <_isatty_r>
 800805e:	b128      	cbz	r0, 800806c <__smakebuf_r+0x74>
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	f023 0303 	bic.w	r3, r3, #3
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	81a3      	strh	r3, [r4, #12]
 800806c:	89a0      	ldrh	r0, [r4, #12]
 800806e:	4305      	orrs	r5, r0
 8008070:	81a5      	strh	r5, [r4, #12]
 8008072:	e7cd      	b.n	8008010 <__smakebuf_r+0x18>
 8008074:	08007e05 	.word	0x08007e05

08008078 <_free_r>:
 8008078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800807a:	2900      	cmp	r1, #0
 800807c:	d044      	beq.n	8008108 <_free_r+0x90>
 800807e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008082:	9001      	str	r0, [sp, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	f1a1 0404 	sub.w	r4, r1, #4
 800808a:	bfb8      	it	lt
 800808c:	18e4      	addlt	r4, r4, r3
 800808e:	f000 fc6b 	bl	8008968 <__malloc_lock>
 8008092:	4a1e      	ldr	r2, [pc, #120]	; (800810c <_free_r+0x94>)
 8008094:	9801      	ldr	r0, [sp, #4]
 8008096:	6813      	ldr	r3, [r2, #0]
 8008098:	b933      	cbnz	r3, 80080a8 <_free_r+0x30>
 800809a:	6063      	str	r3, [r4, #4]
 800809c:	6014      	str	r4, [r2, #0]
 800809e:	b003      	add	sp, #12
 80080a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080a4:	f000 bc66 	b.w	8008974 <__malloc_unlock>
 80080a8:	42a3      	cmp	r3, r4
 80080aa:	d908      	bls.n	80080be <_free_r+0x46>
 80080ac:	6825      	ldr	r5, [r4, #0]
 80080ae:	1961      	adds	r1, r4, r5
 80080b0:	428b      	cmp	r3, r1
 80080b2:	bf01      	itttt	eq
 80080b4:	6819      	ldreq	r1, [r3, #0]
 80080b6:	685b      	ldreq	r3, [r3, #4]
 80080b8:	1949      	addeq	r1, r1, r5
 80080ba:	6021      	streq	r1, [r4, #0]
 80080bc:	e7ed      	b.n	800809a <_free_r+0x22>
 80080be:	461a      	mov	r2, r3
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	b10b      	cbz	r3, 80080c8 <_free_r+0x50>
 80080c4:	42a3      	cmp	r3, r4
 80080c6:	d9fa      	bls.n	80080be <_free_r+0x46>
 80080c8:	6811      	ldr	r1, [r2, #0]
 80080ca:	1855      	adds	r5, r2, r1
 80080cc:	42a5      	cmp	r5, r4
 80080ce:	d10b      	bne.n	80080e8 <_free_r+0x70>
 80080d0:	6824      	ldr	r4, [r4, #0]
 80080d2:	4421      	add	r1, r4
 80080d4:	1854      	adds	r4, r2, r1
 80080d6:	42a3      	cmp	r3, r4
 80080d8:	6011      	str	r1, [r2, #0]
 80080da:	d1e0      	bne.n	800809e <_free_r+0x26>
 80080dc:	681c      	ldr	r4, [r3, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	6053      	str	r3, [r2, #4]
 80080e2:	4421      	add	r1, r4
 80080e4:	6011      	str	r1, [r2, #0]
 80080e6:	e7da      	b.n	800809e <_free_r+0x26>
 80080e8:	d902      	bls.n	80080f0 <_free_r+0x78>
 80080ea:	230c      	movs	r3, #12
 80080ec:	6003      	str	r3, [r0, #0]
 80080ee:	e7d6      	b.n	800809e <_free_r+0x26>
 80080f0:	6825      	ldr	r5, [r4, #0]
 80080f2:	1961      	adds	r1, r4, r5
 80080f4:	428b      	cmp	r3, r1
 80080f6:	bf04      	itt	eq
 80080f8:	6819      	ldreq	r1, [r3, #0]
 80080fa:	685b      	ldreq	r3, [r3, #4]
 80080fc:	6063      	str	r3, [r4, #4]
 80080fe:	bf04      	itt	eq
 8008100:	1949      	addeq	r1, r1, r5
 8008102:	6021      	streq	r1, [r4, #0]
 8008104:	6054      	str	r4, [r2, #4]
 8008106:	e7ca      	b.n	800809e <_free_r+0x26>
 8008108:	b003      	add	sp, #12
 800810a:	bd30      	pop	{r4, r5, pc}
 800810c:	24000858 	.word	0x24000858

08008110 <sbrk_aligned>:
 8008110:	b570      	push	{r4, r5, r6, lr}
 8008112:	4e0e      	ldr	r6, [pc, #56]	; (800814c <sbrk_aligned+0x3c>)
 8008114:	460c      	mov	r4, r1
 8008116:	6831      	ldr	r1, [r6, #0]
 8008118:	4605      	mov	r5, r0
 800811a:	b911      	cbnz	r1, 8008122 <sbrk_aligned+0x12>
 800811c:	f000 fb7a 	bl	8008814 <_sbrk_r>
 8008120:	6030      	str	r0, [r6, #0]
 8008122:	4621      	mov	r1, r4
 8008124:	4628      	mov	r0, r5
 8008126:	f000 fb75 	bl	8008814 <_sbrk_r>
 800812a:	1c43      	adds	r3, r0, #1
 800812c:	d00a      	beq.n	8008144 <sbrk_aligned+0x34>
 800812e:	1cc4      	adds	r4, r0, #3
 8008130:	f024 0403 	bic.w	r4, r4, #3
 8008134:	42a0      	cmp	r0, r4
 8008136:	d007      	beq.n	8008148 <sbrk_aligned+0x38>
 8008138:	1a21      	subs	r1, r4, r0
 800813a:	4628      	mov	r0, r5
 800813c:	f000 fb6a 	bl	8008814 <_sbrk_r>
 8008140:	3001      	adds	r0, #1
 8008142:	d101      	bne.n	8008148 <sbrk_aligned+0x38>
 8008144:	f04f 34ff 	mov.w	r4, #4294967295
 8008148:	4620      	mov	r0, r4
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	2400085c 	.word	0x2400085c

08008150 <_malloc_r>:
 8008150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008154:	1ccd      	adds	r5, r1, #3
 8008156:	f025 0503 	bic.w	r5, r5, #3
 800815a:	3508      	adds	r5, #8
 800815c:	2d0c      	cmp	r5, #12
 800815e:	bf38      	it	cc
 8008160:	250c      	movcc	r5, #12
 8008162:	2d00      	cmp	r5, #0
 8008164:	4607      	mov	r7, r0
 8008166:	db01      	blt.n	800816c <_malloc_r+0x1c>
 8008168:	42a9      	cmp	r1, r5
 800816a:	d905      	bls.n	8008178 <_malloc_r+0x28>
 800816c:	230c      	movs	r3, #12
 800816e:	603b      	str	r3, [r7, #0]
 8008170:	2600      	movs	r6, #0
 8008172:	4630      	mov	r0, r6
 8008174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008178:	4e2e      	ldr	r6, [pc, #184]	; (8008234 <_malloc_r+0xe4>)
 800817a:	f000 fbf5 	bl	8008968 <__malloc_lock>
 800817e:	6833      	ldr	r3, [r6, #0]
 8008180:	461c      	mov	r4, r3
 8008182:	bb34      	cbnz	r4, 80081d2 <_malloc_r+0x82>
 8008184:	4629      	mov	r1, r5
 8008186:	4638      	mov	r0, r7
 8008188:	f7ff ffc2 	bl	8008110 <sbrk_aligned>
 800818c:	1c43      	adds	r3, r0, #1
 800818e:	4604      	mov	r4, r0
 8008190:	d14d      	bne.n	800822e <_malloc_r+0xde>
 8008192:	6834      	ldr	r4, [r6, #0]
 8008194:	4626      	mov	r6, r4
 8008196:	2e00      	cmp	r6, #0
 8008198:	d140      	bne.n	800821c <_malloc_r+0xcc>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	4631      	mov	r1, r6
 800819e:	4638      	mov	r0, r7
 80081a0:	eb04 0803 	add.w	r8, r4, r3
 80081a4:	f000 fb36 	bl	8008814 <_sbrk_r>
 80081a8:	4580      	cmp	r8, r0
 80081aa:	d13a      	bne.n	8008222 <_malloc_r+0xd2>
 80081ac:	6821      	ldr	r1, [r4, #0]
 80081ae:	3503      	adds	r5, #3
 80081b0:	1a6d      	subs	r5, r5, r1
 80081b2:	f025 0503 	bic.w	r5, r5, #3
 80081b6:	3508      	adds	r5, #8
 80081b8:	2d0c      	cmp	r5, #12
 80081ba:	bf38      	it	cc
 80081bc:	250c      	movcc	r5, #12
 80081be:	4629      	mov	r1, r5
 80081c0:	4638      	mov	r0, r7
 80081c2:	f7ff ffa5 	bl	8008110 <sbrk_aligned>
 80081c6:	3001      	adds	r0, #1
 80081c8:	d02b      	beq.n	8008222 <_malloc_r+0xd2>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	442b      	add	r3, r5
 80081ce:	6023      	str	r3, [r4, #0]
 80081d0:	e00e      	b.n	80081f0 <_malloc_r+0xa0>
 80081d2:	6822      	ldr	r2, [r4, #0]
 80081d4:	1b52      	subs	r2, r2, r5
 80081d6:	d41e      	bmi.n	8008216 <_malloc_r+0xc6>
 80081d8:	2a0b      	cmp	r2, #11
 80081da:	d916      	bls.n	800820a <_malloc_r+0xba>
 80081dc:	1961      	adds	r1, r4, r5
 80081de:	42a3      	cmp	r3, r4
 80081e0:	6025      	str	r5, [r4, #0]
 80081e2:	bf18      	it	ne
 80081e4:	6059      	strne	r1, [r3, #4]
 80081e6:	6863      	ldr	r3, [r4, #4]
 80081e8:	bf08      	it	eq
 80081ea:	6031      	streq	r1, [r6, #0]
 80081ec:	5162      	str	r2, [r4, r5]
 80081ee:	604b      	str	r3, [r1, #4]
 80081f0:	4638      	mov	r0, r7
 80081f2:	f104 060b 	add.w	r6, r4, #11
 80081f6:	f000 fbbd 	bl	8008974 <__malloc_unlock>
 80081fa:	f026 0607 	bic.w	r6, r6, #7
 80081fe:	1d23      	adds	r3, r4, #4
 8008200:	1af2      	subs	r2, r6, r3
 8008202:	d0b6      	beq.n	8008172 <_malloc_r+0x22>
 8008204:	1b9b      	subs	r3, r3, r6
 8008206:	50a3      	str	r3, [r4, r2]
 8008208:	e7b3      	b.n	8008172 <_malloc_r+0x22>
 800820a:	6862      	ldr	r2, [r4, #4]
 800820c:	42a3      	cmp	r3, r4
 800820e:	bf0c      	ite	eq
 8008210:	6032      	streq	r2, [r6, #0]
 8008212:	605a      	strne	r2, [r3, #4]
 8008214:	e7ec      	b.n	80081f0 <_malloc_r+0xa0>
 8008216:	4623      	mov	r3, r4
 8008218:	6864      	ldr	r4, [r4, #4]
 800821a:	e7b2      	b.n	8008182 <_malloc_r+0x32>
 800821c:	4634      	mov	r4, r6
 800821e:	6876      	ldr	r6, [r6, #4]
 8008220:	e7b9      	b.n	8008196 <_malloc_r+0x46>
 8008222:	230c      	movs	r3, #12
 8008224:	603b      	str	r3, [r7, #0]
 8008226:	4638      	mov	r0, r7
 8008228:	f000 fba4 	bl	8008974 <__malloc_unlock>
 800822c:	e7a1      	b.n	8008172 <_malloc_r+0x22>
 800822e:	6025      	str	r5, [r4, #0]
 8008230:	e7de      	b.n	80081f0 <_malloc_r+0xa0>
 8008232:	bf00      	nop
 8008234:	24000858 	.word	0x24000858

08008238 <__sfputc_r>:
 8008238:	6893      	ldr	r3, [r2, #8]
 800823a:	3b01      	subs	r3, #1
 800823c:	2b00      	cmp	r3, #0
 800823e:	b410      	push	{r4}
 8008240:	6093      	str	r3, [r2, #8]
 8008242:	da08      	bge.n	8008256 <__sfputc_r+0x1e>
 8008244:	6994      	ldr	r4, [r2, #24]
 8008246:	42a3      	cmp	r3, r4
 8008248:	db01      	blt.n	800824e <__sfputc_r+0x16>
 800824a:	290a      	cmp	r1, #10
 800824c:	d103      	bne.n	8008256 <__sfputc_r+0x1e>
 800824e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008252:	f7ff bc31 	b.w	8007ab8 <__swbuf_r>
 8008256:	6813      	ldr	r3, [r2, #0]
 8008258:	1c58      	adds	r0, r3, #1
 800825a:	6010      	str	r0, [r2, #0]
 800825c:	7019      	strb	r1, [r3, #0]
 800825e:	4608      	mov	r0, r1
 8008260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008264:	4770      	bx	lr

08008266 <__sfputs_r>:
 8008266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008268:	4606      	mov	r6, r0
 800826a:	460f      	mov	r7, r1
 800826c:	4614      	mov	r4, r2
 800826e:	18d5      	adds	r5, r2, r3
 8008270:	42ac      	cmp	r4, r5
 8008272:	d101      	bne.n	8008278 <__sfputs_r+0x12>
 8008274:	2000      	movs	r0, #0
 8008276:	e007      	b.n	8008288 <__sfputs_r+0x22>
 8008278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800827c:	463a      	mov	r2, r7
 800827e:	4630      	mov	r0, r6
 8008280:	f7ff ffda 	bl	8008238 <__sfputc_r>
 8008284:	1c43      	adds	r3, r0, #1
 8008286:	d1f3      	bne.n	8008270 <__sfputs_r+0xa>
 8008288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800828c <_vfiprintf_r>:
 800828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	460d      	mov	r5, r1
 8008292:	b09d      	sub	sp, #116	; 0x74
 8008294:	4614      	mov	r4, r2
 8008296:	4698      	mov	r8, r3
 8008298:	4606      	mov	r6, r0
 800829a:	b118      	cbz	r0, 80082a4 <_vfiprintf_r+0x18>
 800829c:	6983      	ldr	r3, [r0, #24]
 800829e:	b90b      	cbnz	r3, 80082a4 <_vfiprintf_r+0x18>
 80082a0:	f7ff fde4 	bl	8007e6c <__sinit>
 80082a4:	4b89      	ldr	r3, [pc, #548]	; (80084cc <_vfiprintf_r+0x240>)
 80082a6:	429d      	cmp	r5, r3
 80082a8:	d11b      	bne.n	80082e2 <_vfiprintf_r+0x56>
 80082aa:	6875      	ldr	r5, [r6, #4]
 80082ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082ae:	07d9      	lsls	r1, r3, #31
 80082b0:	d405      	bmi.n	80082be <_vfiprintf_r+0x32>
 80082b2:	89ab      	ldrh	r3, [r5, #12]
 80082b4:	059a      	lsls	r2, r3, #22
 80082b6:	d402      	bmi.n	80082be <_vfiprintf_r+0x32>
 80082b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082ba:	f7ff fe75 	bl	8007fa8 <__retarget_lock_acquire_recursive>
 80082be:	89ab      	ldrh	r3, [r5, #12]
 80082c0:	071b      	lsls	r3, r3, #28
 80082c2:	d501      	bpl.n	80082c8 <_vfiprintf_r+0x3c>
 80082c4:	692b      	ldr	r3, [r5, #16]
 80082c6:	b9eb      	cbnz	r3, 8008304 <_vfiprintf_r+0x78>
 80082c8:	4629      	mov	r1, r5
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7ff fc46 	bl	8007b5c <__swsetup_r>
 80082d0:	b1c0      	cbz	r0, 8008304 <_vfiprintf_r+0x78>
 80082d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082d4:	07dc      	lsls	r4, r3, #31
 80082d6:	d50e      	bpl.n	80082f6 <_vfiprintf_r+0x6a>
 80082d8:	f04f 30ff 	mov.w	r0, #4294967295
 80082dc:	b01d      	add	sp, #116	; 0x74
 80082de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e2:	4b7b      	ldr	r3, [pc, #492]	; (80084d0 <_vfiprintf_r+0x244>)
 80082e4:	429d      	cmp	r5, r3
 80082e6:	d101      	bne.n	80082ec <_vfiprintf_r+0x60>
 80082e8:	68b5      	ldr	r5, [r6, #8]
 80082ea:	e7df      	b.n	80082ac <_vfiprintf_r+0x20>
 80082ec:	4b79      	ldr	r3, [pc, #484]	; (80084d4 <_vfiprintf_r+0x248>)
 80082ee:	429d      	cmp	r5, r3
 80082f0:	bf08      	it	eq
 80082f2:	68f5      	ldreq	r5, [r6, #12]
 80082f4:	e7da      	b.n	80082ac <_vfiprintf_r+0x20>
 80082f6:	89ab      	ldrh	r3, [r5, #12]
 80082f8:	0598      	lsls	r0, r3, #22
 80082fa:	d4ed      	bmi.n	80082d8 <_vfiprintf_r+0x4c>
 80082fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082fe:	f7ff fe54 	bl	8007faa <__retarget_lock_release_recursive>
 8008302:	e7e9      	b.n	80082d8 <_vfiprintf_r+0x4c>
 8008304:	2300      	movs	r3, #0
 8008306:	9309      	str	r3, [sp, #36]	; 0x24
 8008308:	2320      	movs	r3, #32
 800830a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800830e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008312:	2330      	movs	r3, #48	; 0x30
 8008314:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80084d8 <_vfiprintf_r+0x24c>
 8008318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800831c:	f04f 0901 	mov.w	r9, #1
 8008320:	4623      	mov	r3, r4
 8008322:	469a      	mov	sl, r3
 8008324:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008328:	b10a      	cbz	r2, 800832e <_vfiprintf_r+0xa2>
 800832a:	2a25      	cmp	r2, #37	; 0x25
 800832c:	d1f9      	bne.n	8008322 <_vfiprintf_r+0x96>
 800832e:	ebba 0b04 	subs.w	fp, sl, r4
 8008332:	d00b      	beq.n	800834c <_vfiprintf_r+0xc0>
 8008334:	465b      	mov	r3, fp
 8008336:	4622      	mov	r2, r4
 8008338:	4629      	mov	r1, r5
 800833a:	4630      	mov	r0, r6
 800833c:	f7ff ff93 	bl	8008266 <__sfputs_r>
 8008340:	3001      	adds	r0, #1
 8008342:	f000 80aa 	beq.w	800849a <_vfiprintf_r+0x20e>
 8008346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008348:	445a      	add	r2, fp
 800834a:	9209      	str	r2, [sp, #36]	; 0x24
 800834c:	f89a 3000 	ldrb.w	r3, [sl]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 80a2 	beq.w	800849a <_vfiprintf_r+0x20e>
 8008356:	2300      	movs	r3, #0
 8008358:	f04f 32ff 	mov.w	r2, #4294967295
 800835c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008360:	f10a 0a01 	add.w	sl, sl, #1
 8008364:	9304      	str	r3, [sp, #16]
 8008366:	9307      	str	r3, [sp, #28]
 8008368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800836c:	931a      	str	r3, [sp, #104]	; 0x68
 800836e:	4654      	mov	r4, sl
 8008370:	2205      	movs	r2, #5
 8008372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008376:	4858      	ldr	r0, [pc, #352]	; (80084d8 <_vfiprintf_r+0x24c>)
 8008378:	f7f7 ffb2 	bl	80002e0 <memchr>
 800837c:	9a04      	ldr	r2, [sp, #16]
 800837e:	b9d8      	cbnz	r0, 80083b8 <_vfiprintf_r+0x12c>
 8008380:	06d1      	lsls	r1, r2, #27
 8008382:	bf44      	itt	mi
 8008384:	2320      	movmi	r3, #32
 8008386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800838a:	0713      	lsls	r3, r2, #28
 800838c:	bf44      	itt	mi
 800838e:	232b      	movmi	r3, #43	; 0x2b
 8008390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008394:	f89a 3000 	ldrb.w	r3, [sl]
 8008398:	2b2a      	cmp	r3, #42	; 0x2a
 800839a:	d015      	beq.n	80083c8 <_vfiprintf_r+0x13c>
 800839c:	9a07      	ldr	r2, [sp, #28]
 800839e:	4654      	mov	r4, sl
 80083a0:	2000      	movs	r0, #0
 80083a2:	f04f 0c0a 	mov.w	ip, #10
 80083a6:	4621      	mov	r1, r4
 80083a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083ac:	3b30      	subs	r3, #48	; 0x30
 80083ae:	2b09      	cmp	r3, #9
 80083b0:	d94e      	bls.n	8008450 <_vfiprintf_r+0x1c4>
 80083b2:	b1b0      	cbz	r0, 80083e2 <_vfiprintf_r+0x156>
 80083b4:	9207      	str	r2, [sp, #28]
 80083b6:	e014      	b.n	80083e2 <_vfiprintf_r+0x156>
 80083b8:	eba0 0308 	sub.w	r3, r0, r8
 80083bc:	fa09 f303 	lsl.w	r3, r9, r3
 80083c0:	4313      	orrs	r3, r2
 80083c2:	9304      	str	r3, [sp, #16]
 80083c4:	46a2      	mov	sl, r4
 80083c6:	e7d2      	b.n	800836e <_vfiprintf_r+0xe2>
 80083c8:	9b03      	ldr	r3, [sp, #12]
 80083ca:	1d19      	adds	r1, r3, #4
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	9103      	str	r1, [sp, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	bfbb      	ittet	lt
 80083d4:	425b      	neglt	r3, r3
 80083d6:	f042 0202 	orrlt.w	r2, r2, #2
 80083da:	9307      	strge	r3, [sp, #28]
 80083dc:	9307      	strlt	r3, [sp, #28]
 80083de:	bfb8      	it	lt
 80083e0:	9204      	strlt	r2, [sp, #16]
 80083e2:	7823      	ldrb	r3, [r4, #0]
 80083e4:	2b2e      	cmp	r3, #46	; 0x2e
 80083e6:	d10c      	bne.n	8008402 <_vfiprintf_r+0x176>
 80083e8:	7863      	ldrb	r3, [r4, #1]
 80083ea:	2b2a      	cmp	r3, #42	; 0x2a
 80083ec:	d135      	bne.n	800845a <_vfiprintf_r+0x1ce>
 80083ee:	9b03      	ldr	r3, [sp, #12]
 80083f0:	1d1a      	adds	r2, r3, #4
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	9203      	str	r2, [sp, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	bfb8      	it	lt
 80083fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80083fe:	3402      	adds	r4, #2
 8008400:	9305      	str	r3, [sp, #20]
 8008402:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80084e8 <_vfiprintf_r+0x25c>
 8008406:	7821      	ldrb	r1, [r4, #0]
 8008408:	2203      	movs	r2, #3
 800840a:	4650      	mov	r0, sl
 800840c:	f7f7 ff68 	bl	80002e0 <memchr>
 8008410:	b140      	cbz	r0, 8008424 <_vfiprintf_r+0x198>
 8008412:	2340      	movs	r3, #64	; 0x40
 8008414:	eba0 000a 	sub.w	r0, r0, sl
 8008418:	fa03 f000 	lsl.w	r0, r3, r0
 800841c:	9b04      	ldr	r3, [sp, #16]
 800841e:	4303      	orrs	r3, r0
 8008420:	3401      	adds	r4, #1
 8008422:	9304      	str	r3, [sp, #16]
 8008424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008428:	482c      	ldr	r0, [pc, #176]	; (80084dc <_vfiprintf_r+0x250>)
 800842a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800842e:	2206      	movs	r2, #6
 8008430:	f7f7 ff56 	bl	80002e0 <memchr>
 8008434:	2800      	cmp	r0, #0
 8008436:	d03f      	beq.n	80084b8 <_vfiprintf_r+0x22c>
 8008438:	4b29      	ldr	r3, [pc, #164]	; (80084e0 <_vfiprintf_r+0x254>)
 800843a:	bb1b      	cbnz	r3, 8008484 <_vfiprintf_r+0x1f8>
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	3307      	adds	r3, #7
 8008440:	f023 0307 	bic.w	r3, r3, #7
 8008444:	3308      	adds	r3, #8
 8008446:	9303      	str	r3, [sp, #12]
 8008448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800844a:	443b      	add	r3, r7
 800844c:	9309      	str	r3, [sp, #36]	; 0x24
 800844e:	e767      	b.n	8008320 <_vfiprintf_r+0x94>
 8008450:	fb0c 3202 	mla	r2, ip, r2, r3
 8008454:	460c      	mov	r4, r1
 8008456:	2001      	movs	r0, #1
 8008458:	e7a5      	b.n	80083a6 <_vfiprintf_r+0x11a>
 800845a:	2300      	movs	r3, #0
 800845c:	3401      	adds	r4, #1
 800845e:	9305      	str	r3, [sp, #20]
 8008460:	4619      	mov	r1, r3
 8008462:	f04f 0c0a 	mov.w	ip, #10
 8008466:	4620      	mov	r0, r4
 8008468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800846c:	3a30      	subs	r2, #48	; 0x30
 800846e:	2a09      	cmp	r2, #9
 8008470:	d903      	bls.n	800847a <_vfiprintf_r+0x1ee>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d0c5      	beq.n	8008402 <_vfiprintf_r+0x176>
 8008476:	9105      	str	r1, [sp, #20]
 8008478:	e7c3      	b.n	8008402 <_vfiprintf_r+0x176>
 800847a:	fb0c 2101 	mla	r1, ip, r1, r2
 800847e:	4604      	mov	r4, r0
 8008480:	2301      	movs	r3, #1
 8008482:	e7f0      	b.n	8008466 <_vfiprintf_r+0x1da>
 8008484:	ab03      	add	r3, sp, #12
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	462a      	mov	r2, r5
 800848a:	4b16      	ldr	r3, [pc, #88]	; (80084e4 <_vfiprintf_r+0x258>)
 800848c:	a904      	add	r1, sp, #16
 800848e:	4630      	mov	r0, r6
 8008490:	f3af 8000 	nop.w
 8008494:	4607      	mov	r7, r0
 8008496:	1c78      	adds	r0, r7, #1
 8008498:	d1d6      	bne.n	8008448 <_vfiprintf_r+0x1bc>
 800849a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800849c:	07d9      	lsls	r1, r3, #31
 800849e:	d405      	bmi.n	80084ac <_vfiprintf_r+0x220>
 80084a0:	89ab      	ldrh	r3, [r5, #12]
 80084a2:	059a      	lsls	r2, r3, #22
 80084a4:	d402      	bmi.n	80084ac <_vfiprintf_r+0x220>
 80084a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084a8:	f7ff fd7f 	bl	8007faa <__retarget_lock_release_recursive>
 80084ac:	89ab      	ldrh	r3, [r5, #12]
 80084ae:	065b      	lsls	r3, r3, #25
 80084b0:	f53f af12 	bmi.w	80082d8 <_vfiprintf_r+0x4c>
 80084b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084b6:	e711      	b.n	80082dc <_vfiprintf_r+0x50>
 80084b8:	ab03      	add	r3, sp, #12
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	462a      	mov	r2, r5
 80084be:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <_vfiprintf_r+0x258>)
 80084c0:	a904      	add	r1, sp, #16
 80084c2:	4630      	mov	r0, r6
 80084c4:	f000 f880 	bl	80085c8 <_printf_i>
 80084c8:	e7e4      	b.n	8008494 <_vfiprintf_r+0x208>
 80084ca:	bf00      	nop
 80084cc:	08008a40 	.word	0x08008a40
 80084d0:	08008a60 	.word	0x08008a60
 80084d4:	08008a20 	.word	0x08008a20
 80084d8:	08008a80 	.word	0x08008a80
 80084dc:	08008a8a 	.word	0x08008a8a
 80084e0:	00000000 	.word	0x00000000
 80084e4:	08008267 	.word	0x08008267
 80084e8:	08008a86 	.word	0x08008a86

080084ec <_printf_common>:
 80084ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f0:	4616      	mov	r6, r2
 80084f2:	4699      	mov	r9, r3
 80084f4:	688a      	ldr	r2, [r1, #8]
 80084f6:	690b      	ldr	r3, [r1, #16]
 80084f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084fc:	4293      	cmp	r3, r2
 80084fe:	bfb8      	it	lt
 8008500:	4613      	movlt	r3, r2
 8008502:	6033      	str	r3, [r6, #0]
 8008504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008508:	4607      	mov	r7, r0
 800850a:	460c      	mov	r4, r1
 800850c:	b10a      	cbz	r2, 8008512 <_printf_common+0x26>
 800850e:	3301      	adds	r3, #1
 8008510:	6033      	str	r3, [r6, #0]
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	0699      	lsls	r1, r3, #26
 8008516:	bf42      	ittt	mi
 8008518:	6833      	ldrmi	r3, [r6, #0]
 800851a:	3302      	addmi	r3, #2
 800851c:	6033      	strmi	r3, [r6, #0]
 800851e:	6825      	ldr	r5, [r4, #0]
 8008520:	f015 0506 	ands.w	r5, r5, #6
 8008524:	d106      	bne.n	8008534 <_printf_common+0x48>
 8008526:	f104 0a19 	add.w	sl, r4, #25
 800852a:	68e3      	ldr	r3, [r4, #12]
 800852c:	6832      	ldr	r2, [r6, #0]
 800852e:	1a9b      	subs	r3, r3, r2
 8008530:	42ab      	cmp	r3, r5
 8008532:	dc26      	bgt.n	8008582 <_printf_common+0x96>
 8008534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008538:	1e13      	subs	r3, r2, #0
 800853a:	6822      	ldr	r2, [r4, #0]
 800853c:	bf18      	it	ne
 800853e:	2301      	movne	r3, #1
 8008540:	0692      	lsls	r2, r2, #26
 8008542:	d42b      	bmi.n	800859c <_printf_common+0xb0>
 8008544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008548:	4649      	mov	r1, r9
 800854a:	4638      	mov	r0, r7
 800854c:	47c0      	blx	r8
 800854e:	3001      	adds	r0, #1
 8008550:	d01e      	beq.n	8008590 <_printf_common+0xa4>
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	68e5      	ldr	r5, [r4, #12]
 8008556:	6832      	ldr	r2, [r6, #0]
 8008558:	f003 0306 	and.w	r3, r3, #6
 800855c:	2b04      	cmp	r3, #4
 800855e:	bf08      	it	eq
 8008560:	1aad      	subeq	r5, r5, r2
 8008562:	68a3      	ldr	r3, [r4, #8]
 8008564:	6922      	ldr	r2, [r4, #16]
 8008566:	bf0c      	ite	eq
 8008568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800856c:	2500      	movne	r5, #0
 800856e:	4293      	cmp	r3, r2
 8008570:	bfc4      	itt	gt
 8008572:	1a9b      	subgt	r3, r3, r2
 8008574:	18ed      	addgt	r5, r5, r3
 8008576:	2600      	movs	r6, #0
 8008578:	341a      	adds	r4, #26
 800857a:	42b5      	cmp	r5, r6
 800857c:	d11a      	bne.n	80085b4 <_printf_common+0xc8>
 800857e:	2000      	movs	r0, #0
 8008580:	e008      	b.n	8008594 <_printf_common+0xa8>
 8008582:	2301      	movs	r3, #1
 8008584:	4652      	mov	r2, sl
 8008586:	4649      	mov	r1, r9
 8008588:	4638      	mov	r0, r7
 800858a:	47c0      	blx	r8
 800858c:	3001      	adds	r0, #1
 800858e:	d103      	bne.n	8008598 <_printf_common+0xac>
 8008590:	f04f 30ff 	mov.w	r0, #4294967295
 8008594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008598:	3501      	adds	r5, #1
 800859a:	e7c6      	b.n	800852a <_printf_common+0x3e>
 800859c:	18e1      	adds	r1, r4, r3
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	2030      	movs	r0, #48	; 0x30
 80085a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085a6:	4422      	add	r2, r4
 80085a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085b0:	3302      	adds	r3, #2
 80085b2:	e7c7      	b.n	8008544 <_printf_common+0x58>
 80085b4:	2301      	movs	r3, #1
 80085b6:	4622      	mov	r2, r4
 80085b8:	4649      	mov	r1, r9
 80085ba:	4638      	mov	r0, r7
 80085bc:	47c0      	blx	r8
 80085be:	3001      	adds	r0, #1
 80085c0:	d0e6      	beq.n	8008590 <_printf_common+0xa4>
 80085c2:	3601      	adds	r6, #1
 80085c4:	e7d9      	b.n	800857a <_printf_common+0x8e>
	...

080085c8 <_printf_i>:
 80085c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085cc:	7e0f      	ldrb	r7, [r1, #24]
 80085ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085d0:	2f78      	cmp	r7, #120	; 0x78
 80085d2:	4691      	mov	r9, r2
 80085d4:	4680      	mov	r8, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	469a      	mov	sl, r3
 80085da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085de:	d807      	bhi.n	80085f0 <_printf_i+0x28>
 80085e0:	2f62      	cmp	r7, #98	; 0x62
 80085e2:	d80a      	bhi.n	80085fa <_printf_i+0x32>
 80085e4:	2f00      	cmp	r7, #0
 80085e6:	f000 80d8 	beq.w	800879a <_printf_i+0x1d2>
 80085ea:	2f58      	cmp	r7, #88	; 0x58
 80085ec:	f000 80a3 	beq.w	8008736 <_printf_i+0x16e>
 80085f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085f8:	e03a      	b.n	8008670 <_printf_i+0xa8>
 80085fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085fe:	2b15      	cmp	r3, #21
 8008600:	d8f6      	bhi.n	80085f0 <_printf_i+0x28>
 8008602:	a101      	add	r1, pc, #4	; (adr r1, 8008608 <_printf_i+0x40>)
 8008604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008608:	08008661 	.word	0x08008661
 800860c:	08008675 	.word	0x08008675
 8008610:	080085f1 	.word	0x080085f1
 8008614:	080085f1 	.word	0x080085f1
 8008618:	080085f1 	.word	0x080085f1
 800861c:	080085f1 	.word	0x080085f1
 8008620:	08008675 	.word	0x08008675
 8008624:	080085f1 	.word	0x080085f1
 8008628:	080085f1 	.word	0x080085f1
 800862c:	080085f1 	.word	0x080085f1
 8008630:	080085f1 	.word	0x080085f1
 8008634:	08008781 	.word	0x08008781
 8008638:	080086a5 	.word	0x080086a5
 800863c:	08008763 	.word	0x08008763
 8008640:	080085f1 	.word	0x080085f1
 8008644:	080085f1 	.word	0x080085f1
 8008648:	080087a3 	.word	0x080087a3
 800864c:	080085f1 	.word	0x080085f1
 8008650:	080086a5 	.word	0x080086a5
 8008654:	080085f1 	.word	0x080085f1
 8008658:	080085f1 	.word	0x080085f1
 800865c:	0800876b 	.word	0x0800876b
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	1d1a      	adds	r2, r3, #4
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	602a      	str	r2, [r5, #0]
 8008668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800866c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008670:	2301      	movs	r3, #1
 8008672:	e0a3      	b.n	80087bc <_printf_i+0x1f4>
 8008674:	6820      	ldr	r0, [r4, #0]
 8008676:	6829      	ldr	r1, [r5, #0]
 8008678:	0606      	lsls	r6, r0, #24
 800867a:	f101 0304 	add.w	r3, r1, #4
 800867e:	d50a      	bpl.n	8008696 <_printf_i+0xce>
 8008680:	680e      	ldr	r6, [r1, #0]
 8008682:	602b      	str	r3, [r5, #0]
 8008684:	2e00      	cmp	r6, #0
 8008686:	da03      	bge.n	8008690 <_printf_i+0xc8>
 8008688:	232d      	movs	r3, #45	; 0x2d
 800868a:	4276      	negs	r6, r6
 800868c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008690:	485e      	ldr	r0, [pc, #376]	; (800880c <_printf_i+0x244>)
 8008692:	230a      	movs	r3, #10
 8008694:	e019      	b.n	80086ca <_printf_i+0x102>
 8008696:	680e      	ldr	r6, [r1, #0]
 8008698:	602b      	str	r3, [r5, #0]
 800869a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800869e:	bf18      	it	ne
 80086a0:	b236      	sxthne	r6, r6
 80086a2:	e7ef      	b.n	8008684 <_printf_i+0xbc>
 80086a4:	682b      	ldr	r3, [r5, #0]
 80086a6:	6820      	ldr	r0, [r4, #0]
 80086a8:	1d19      	adds	r1, r3, #4
 80086aa:	6029      	str	r1, [r5, #0]
 80086ac:	0601      	lsls	r1, r0, #24
 80086ae:	d501      	bpl.n	80086b4 <_printf_i+0xec>
 80086b0:	681e      	ldr	r6, [r3, #0]
 80086b2:	e002      	b.n	80086ba <_printf_i+0xf2>
 80086b4:	0646      	lsls	r6, r0, #25
 80086b6:	d5fb      	bpl.n	80086b0 <_printf_i+0xe8>
 80086b8:	881e      	ldrh	r6, [r3, #0]
 80086ba:	4854      	ldr	r0, [pc, #336]	; (800880c <_printf_i+0x244>)
 80086bc:	2f6f      	cmp	r7, #111	; 0x6f
 80086be:	bf0c      	ite	eq
 80086c0:	2308      	moveq	r3, #8
 80086c2:	230a      	movne	r3, #10
 80086c4:	2100      	movs	r1, #0
 80086c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086ca:	6865      	ldr	r5, [r4, #4]
 80086cc:	60a5      	str	r5, [r4, #8]
 80086ce:	2d00      	cmp	r5, #0
 80086d0:	bfa2      	ittt	ge
 80086d2:	6821      	ldrge	r1, [r4, #0]
 80086d4:	f021 0104 	bicge.w	r1, r1, #4
 80086d8:	6021      	strge	r1, [r4, #0]
 80086da:	b90e      	cbnz	r6, 80086e0 <_printf_i+0x118>
 80086dc:	2d00      	cmp	r5, #0
 80086de:	d04d      	beq.n	800877c <_printf_i+0x1b4>
 80086e0:	4615      	mov	r5, r2
 80086e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80086e6:	fb03 6711 	mls	r7, r3, r1, r6
 80086ea:	5dc7      	ldrb	r7, [r0, r7]
 80086ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086f0:	4637      	mov	r7, r6
 80086f2:	42bb      	cmp	r3, r7
 80086f4:	460e      	mov	r6, r1
 80086f6:	d9f4      	bls.n	80086e2 <_printf_i+0x11a>
 80086f8:	2b08      	cmp	r3, #8
 80086fa:	d10b      	bne.n	8008714 <_printf_i+0x14c>
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	07de      	lsls	r6, r3, #31
 8008700:	d508      	bpl.n	8008714 <_printf_i+0x14c>
 8008702:	6923      	ldr	r3, [r4, #16]
 8008704:	6861      	ldr	r1, [r4, #4]
 8008706:	4299      	cmp	r1, r3
 8008708:	bfde      	ittt	le
 800870a:	2330      	movle	r3, #48	; 0x30
 800870c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008710:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008714:	1b52      	subs	r2, r2, r5
 8008716:	6122      	str	r2, [r4, #16]
 8008718:	f8cd a000 	str.w	sl, [sp]
 800871c:	464b      	mov	r3, r9
 800871e:	aa03      	add	r2, sp, #12
 8008720:	4621      	mov	r1, r4
 8008722:	4640      	mov	r0, r8
 8008724:	f7ff fee2 	bl	80084ec <_printf_common>
 8008728:	3001      	adds	r0, #1
 800872a:	d14c      	bne.n	80087c6 <_printf_i+0x1fe>
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	b004      	add	sp, #16
 8008732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008736:	4835      	ldr	r0, [pc, #212]	; (800880c <_printf_i+0x244>)
 8008738:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800873c:	6829      	ldr	r1, [r5, #0]
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	f851 6b04 	ldr.w	r6, [r1], #4
 8008744:	6029      	str	r1, [r5, #0]
 8008746:	061d      	lsls	r5, r3, #24
 8008748:	d514      	bpl.n	8008774 <_printf_i+0x1ac>
 800874a:	07df      	lsls	r7, r3, #31
 800874c:	bf44      	itt	mi
 800874e:	f043 0320 	orrmi.w	r3, r3, #32
 8008752:	6023      	strmi	r3, [r4, #0]
 8008754:	b91e      	cbnz	r6, 800875e <_printf_i+0x196>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	f023 0320 	bic.w	r3, r3, #32
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	2310      	movs	r3, #16
 8008760:	e7b0      	b.n	80086c4 <_printf_i+0xfc>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	f043 0320 	orr.w	r3, r3, #32
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	2378      	movs	r3, #120	; 0x78
 800876c:	4828      	ldr	r0, [pc, #160]	; (8008810 <_printf_i+0x248>)
 800876e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008772:	e7e3      	b.n	800873c <_printf_i+0x174>
 8008774:	0659      	lsls	r1, r3, #25
 8008776:	bf48      	it	mi
 8008778:	b2b6      	uxthmi	r6, r6
 800877a:	e7e6      	b.n	800874a <_printf_i+0x182>
 800877c:	4615      	mov	r5, r2
 800877e:	e7bb      	b.n	80086f8 <_printf_i+0x130>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	6826      	ldr	r6, [r4, #0]
 8008784:	6961      	ldr	r1, [r4, #20]
 8008786:	1d18      	adds	r0, r3, #4
 8008788:	6028      	str	r0, [r5, #0]
 800878a:	0635      	lsls	r5, r6, #24
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	d501      	bpl.n	8008794 <_printf_i+0x1cc>
 8008790:	6019      	str	r1, [r3, #0]
 8008792:	e002      	b.n	800879a <_printf_i+0x1d2>
 8008794:	0670      	lsls	r0, r6, #25
 8008796:	d5fb      	bpl.n	8008790 <_printf_i+0x1c8>
 8008798:	8019      	strh	r1, [r3, #0]
 800879a:	2300      	movs	r3, #0
 800879c:	6123      	str	r3, [r4, #16]
 800879e:	4615      	mov	r5, r2
 80087a0:	e7ba      	b.n	8008718 <_printf_i+0x150>
 80087a2:	682b      	ldr	r3, [r5, #0]
 80087a4:	1d1a      	adds	r2, r3, #4
 80087a6:	602a      	str	r2, [r5, #0]
 80087a8:	681d      	ldr	r5, [r3, #0]
 80087aa:	6862      	ldr	r2, [r4, #4]
 80087ac:	2100      	movs	r1, #0
 80087ae:	4628      	mov	r0, r5
 80087b0:	f7f7 fd96 	bl	80002e0 <memchr>
 80087b4:	b108      	cbz	r0, 80087ba <_printf_i+0x1f2>
 80087b6:	1b40      	subs	r0, r0, r5
 80087b8:	6060      	str	r0, [r4, #4]
 80087ba:	6863      	ldr	r3, [r4, #4]
 80087bc:	6123      	str	r3, [r4, #16]
 80087be:	2300      	movs	r3, #0
 80087c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c4:	e7a8      	b.n	8008718 <_printf_i+0x150>
 80087c6:	6923      	ldr	r3, [r4, #16]
 80087c8:	462a      	mov	r2, r5
 80087ca:	4649      	mov	r1, r9
 80087cc:	4640      	mov	r0, r8
 80087ce:	47d0      	blx	sl
 80087d0:	3001      	adds	r0, #1
 80087d2:	d0ab      	beq.n	800872c <_printf_i+0x164>
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	079b      	lsls	r3, r3, #30
 80087d8:	d413      	bmi.n	8008802 <_printf_i+0x23a>
 80087da:	68e0      	ldr	r0, [r4, #12]
 80087dc:	9b03      	ldr	r3, [sp, #12]
 80087de:	4298      	cmp	r0, r3
 80087e0:	bfb8      	it	lt
 80087e2:	4618      	movlt	r0, r3
 80087e4:	e7a4      	b.n	8008730 <_printf_i+0x168>
 80087e6:	2301      	movs	r3, #1
 80087e8:	4632      	mov	r2, r6
 80087ea:	4649      	mov	r1, r9
 80087ec:	4640      	mov	r0, r8
 80087ee:	47d0      	blx	sl
 80087f0:	3001      	adds	r0, #1
 80087f2:	d09b      	beq.n	800872c <_printf_i+0x164>
 80087f4:	3501      	adds	r5, #1
 80087f6:	68e3      	ldr	r3, [r4, #12]
 80087f8:	9903      	ldr	r1, [sp, #12]
 80087fa:	1a5b      	subs	r3, r3, r1
 80087fc:	42ab      	cmp	r3, r5
 80087fe:	dcf2      	bgt.n	80087e6 <_printf_i+0x21e>
 8008800:	e7eb      	b.n	80087da <_printf_i+0x212>
 8008802:	2500      	movs	r5, #0
 8008804:	f104 0619 	add.w	r6, r4, #25
 8008808:	e7f5      	b.n	80087f6 <_printf_i+0x22e>
 800880a:	bf00      	nop
 800880c:	08008a91 	.word	0x08008a91
 8008810:	08008aa2 	.word	0x08008aa2

08008814 <_sbrk_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4d06      	ldr	r5, [pc, #24]	; (8008830 <_sbrk_r+0x1c>)
 8008818:	2300      	movs	r3, #0
 800881a:	4604      	mov	r4, r0
 800881c:	4608      	mov	r0, r1
 800881e:	602b      	str	r3, [r5, #0]
 8008820:	f7f8 fe8e 	bl	8001540 <_sbrk>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d102      	bne.n	800882e <_sbrk_r+0x1a>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	b103      	cbz	r3, 800882e <_sbrk_r+0x1a>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	24000860 	.word	0x24000860

08008834 <__sread>:
 8008834:	b510      	push	{r4, lr}
 8008836:	460c      	mov	r4, r1
 8008838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883c:	f000 f8a0 	bl	8008980 <_read_r>
 8008840:	2800      	cmp	r0, #0
 8008842:	bfab      	itete	ge
 8008844:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008846:	89a3      	ldrhlt	r3, [r4, #12]
 8008848:	181b      	addge	r3, r3, r0
 800884a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800884e:	bfac      	ite	ge
 8008850:	6563      	strge	r3, [r4, #84]	; 0x54
 8008852:	81a3      	strhlt	r3, [r4, #12]
 8008854:	bd10      	pop	{r4, pc}

08008856 <__swrite>:
 8008856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885a:	461f      	mov	r7, r3
 800885c:	898b      	ldrh	r3, [r1, #12]
 800885e:	05db      	lsls	r3, r3, #23
 8008860:	4605      	mov	r5, r0
 8008862:	460c      	mov	r4, r1
 8008864:	4616      	mov	r6, r2
 8008866:	d505      	bpl.n	8008874 <__swrite+0x1e>
 8008868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886c:	2302      	movs	r3, #2
 800886e:	2200      	movs	r2, #0
 8008870:	f000 f868 	bl	8008944 <_lseek_r>
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800887a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800887e:	81a3      	strh	r3, [r4, #12]
 8008880:	4632      	mov	r2, r6
 8008882:	463b      	mov	r3, r7
 8008884:	4628      	mov	r0, r5
 8008886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800888a:	f000 b817 	b.w	80088bc <_write_r>

0800888e <__sseek>:
 800888e:	b510      	push	{r4, lr}
 8008890:	460c      	mov	r4, r1
 8008892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008896:	f000 f855 	bl	8008944 <_lseek_r>
 800889a:	1c43      	adds	r3, r0, #1
 800889c:	89a3      	ldrh	r3, [r4, #12]
 800889e:	bf15      	itete	ne
 80088a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80088a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088aa:	81a3      	strheq	r3, [r4, #12]
 80088ac:	bf18      	it	ne
 80088ae:	81a3      	strhne	r3, [r4, #12]
 80088b0:	bd10      	pop	{r4, pc}

080088b2 <__sclose>:
 80088b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b6:	f000 b813 	b.w	80088e0 <_close_r>
	...

080088bc <_write_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4d07      	ldr	r5, [pc, #28]	; (80088dc <_write_r+0x20>)
 80088c0:	4604      	mov	r4, r0
 80088c2:	4608      	mov	r0, r1
 80088c4:	4611      	mov	r1, r2
 80088c6:	2200      	movs	r2, #0
 80088c8:	602a      	str	r2, [r5, #0]
 80088ca:	461a      	mov	r2, r3
 80088cc:	f7f8 fde7 	bl	800149e <_write>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d102      	bne.n	80088da <_write_r+0x1e>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	b103      	cbz	r3, 80088da <_write_r+0x1e>
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	24000860 	.word	0x24000860

080088e0 <_close_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	4d06      	ldr	r5, [pc, #24]	; (80088fc <_close_r+0x1c>)
 80088e4:	2300      	movs	r3, #0
 80088e6:	4604      	mov	r4, r0
 80088e8:	4608      	mov	r0, r1
 80088ea:	602b      	str	r3, [r5, #0]
 80088ec:	f7f8 fdf3 	bl	80014d6 <_close>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d102      	bne.n	80088fa <_close_r+0x1a>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	b103      	cbz	r3, 80088fa <_close_r+0x1a>
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	24000860 	.word	0x24000860

08008900 <_fstat_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	4d07      	ldr	r5, [pc, #28]	; (8008920 <_fstat_r+0x20>)
 8008904:	2300      	movs	r3, #0
 8008906:	4604      	mov	r4, r0
 8008908:	4608      	mov	r0, r1
 800890a:	4611      	mov	r1, r2
 800890c:	602b      	str	r3, [r5, #0]
 800890e:	f7f8 fdee 	bl	80014ee <_fstat>
 8008912:	1c43      	adds	r3, r0, #1
 8008914:	d102      	bne.n	800891c <_fstat_r+0x1c>
 8008916:	682b      	ldr	r3, [r5, #0]
 8008918:	b103      	cbz	r3, 800891c <_fstat_r+0x1c>
 800891a:	6023      	str	r3, [r4, #0]
 800891c:	bd38      	pop	{r3, r4, r5, pc}
 800891e:	bf00      	nop
 8008920:	24000860 	.word	0x24000860

08008924 <_isatty_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4d06      	ldr	r5, [pc, #24]	; (8008940 <_isatty_r+0x1c>)
 8008928:	2300      	movs	r3, #0
 800892a:	4604      	mov	r4, r0
 800892c:	4608      	mov	r0, r1
 800892e:	602b      	str	r3, [r5, #0]
 8008930:	f7f8 fded 	bl	800150e <_isatty>
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	d102      	bne.n	800893e <_isatty_r+0x1a>
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	b103      	cbz	r3, 800893e <_isatty_r+0x1a>
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	bd38      	pop	{r3, r4, r5, pc}
 8008940:	24000860 	.word	0x24000860

08008944 <_lseek_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4d07      	ldr	r5, [pc, #28]	; (8008964 <_lseek_r+0x20>)
 8008948:	4604      	mov	r4, r0
 800894a:	4608      	mov	r0, r1
 800894c:	4611      	mov	r1, r2
 800894e:	2200      	movs	r2, #0
 8008950:	602a      	str	r2, [r5, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	f7f8 fde6 	bl	8001524 <_lseek>
 8008958:	1c43      	adds	r3, r0, #1
 800895a:	d102      	bne.n	8008962 <_lseek_r+0x1e>
 800895c:	682b      	ldr	r3, [r5, #0]
 800895e:	b103      	cbz	r3, 8008962 <_lseek_r+0x1e>
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	bd38      	pop	{r3, r4, r5, pc}
 8008964:	24000860 	.word	0x24000860

08008968 <__malloc_lock>:
 8008968:	4801      	ldr	r0, [pc, #4]	; (8008970 <__malloc_lock+0x8>)
 800896a:	f7ff bb1d 	b.w	8007fa8 <__retarget_lock_acquire_recursive>
 800896e:	bf00      	nop
 8008970:	24000854 	.word	0x24000854

08008974 <__malloc_unlock>:
 8008974:	4801      	ldr	r0, [pc, #4]	; (800897c <__malloc_unlock+0x8>)
 8008976:	f7ff bb18 	b.w	8007faa <__retarget_lock_release_recursive>
 800897a:	bf00      	nop
 800897c:	24000854 	.word	0x24000854

08008980 <_read_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d07      	ldr	r5, [pc, #28]	; (80089a0 <_read_r+0x20>)
 8008984:	4604      	mov	r4, r0
 8008986:	4608      	mov	r0, r1
 8008988:	4611      	mov	r1, r2
 800898a:	2200      	movs	r2, #0
 800898c:	602a      	str	r2, [r5, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	f7f8 fd68 	bl	8001464 <_read>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_read_r+0x1e>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b103      	cbz	r3, 800899e <_read_r+0x1e>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	24000860 	.word	0x24000860

080089a4 <_init>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	bf00      	nop
 80089a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089aa:	bc08      	pop	{r3}
 80089ac:	469e      	mov	lr, r3
 80089ae:	4770      	bx	lr

080089b0 <_fini>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	bf00      	nop
 80089b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b6:	bc08      	pop	{r3}
 80089b8:	469e      	mov	lr, r3
 80089ba:	4770      	bx	lr
