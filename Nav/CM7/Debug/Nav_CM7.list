
Nav_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0b4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800a34c  0800a34c  0001a34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a458  0800a458  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a458  0800a458  0001a458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a460  0800a460  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a460  0800a460  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a464  0800a464  0001a464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  0800a468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400007c  0800a4e4  0002007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000dc  0800a544  000200dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000894  2400013c  0800a5a4  0002013c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240009d0  0800a5a4  000209d0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026b4b  00000000  00000000  0002016a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000039c0  00000000  00000000  00046cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a98  00000000  00000000  0004a678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001948  00000000  00000000  0004c110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ea82  00000000  00000000  0004da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020141  00000000  00000000  0008c4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0019c464  00000000  00000000  000ac61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00248a7f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007a64  00000000  00000000  00248ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400013c 	.word	0x2400013c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a334 	.word	0x0800a334

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000140 	.word	0x24000140
 80002d4:	0800a334 	.word	0x0800a334

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000708:	b480      	push	{r7}
 800070a:	b08b      	sub	sp, #44	; 0x2c
 800070c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;
  float_t fracn1, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800070e:	4bb1      	ldr	r3, [pc, #708]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 8000710:	691b      	ldr	r3, [r3, #16]
 8000712:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000716:	2b18      	cmp	r3, #24
 8000718:	f200 812e 	bhi.w	8000978 <SystemCoreClockUpdate+0x270>
 800071c:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <SystemCoreClockUpdate+0x1c>)
 800071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000722:	bf00      	nop
 8000724:	08000789 	.word	0x08000789
 8000728:	08000979 	.word	0x08000979
 800072c:	08000979 	.word	0x08000979
 8000730:	08000979 	.word	0x08000979
 8000734:	08000979 	.word	0x08000979
 8000738:	08000979 	.word	0x08000979
 800073c:	08000979 	.word	0x08000979
 8000740:	08000979 	.word	0x08000979
 8000744:	0800079d 	.word	0x0800079d
 8000748:	08000979 	.word	0x08000979
 800074c:	08000979 	.word	0x08000979
 8000750:	08000979 	.word	0x08000979
 8000754:	08000979 	.word	0x08000979
 8000758:	08000979 	.word	0x08000979
 800075c:	08000979 	.word	0x08000979
 8000760:	08000979 	.word	0x08000979
 8000764:	080007a3 	.word	0x080007a3
 8000768:	08000979 	.word	0x08000979
 800076c:	08000979 	.word	0x08000979
 8000770:	08000979 	.word	0x08000979
 8000774:	08000979 	.word	0x08000979
 8000778:	08000979 	.word	0x08000979
 800077c:	08000979 	.word	0x08000979
 8000780:	08000979 	.word	0x08000979
 8000784:	080007a9 	.word	0x080007a9
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 8000788:	4b92      	ldr	r3, [pc, #584]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	f003 0303 	and.w	r3, r3, #3
 8000792:	4a91      	ldr	r2, [pc, #580]	; (80009d8 <SystemCoreClockUpdate+0x2d0>)
 8000794:	fa22 f303 	lsr.w	r3, r2, r3
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800079a:	e0f7      	b.n	800098c <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    common_system_clock = CSI_VALUE;
 800079c:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <SystemCoreClockUpdate+0x2d4>)
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80007a0:	e0f4      	b.n	800098c <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    common_system_clock = HSE_VALUE;
 80007a2:	4b8f      	ldr	r3, [pc, #572]	; (80009e0 <SystemCoreClockUpdate+0x2d8>)
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80007a6:	e0f1      	b.n	800098c <SystemCoreClockUpdate+0x284>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80007a8:	4b8a      	ldr	r3, [pc, #552]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 80007aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ac:	f003 0303 	and.w	r3, r3, #3
 80007b0:	61fb      	str	r3, [r7, #28]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80007b2:	4b88      	ldr	r3, [pc, #544]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 80007b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b6:	091b      	lsrs	r3, r3, #4
 80007b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007bc:	61bb      	str	r3, [r7, #24]
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80007be:	4b85      	ldr	r3, [pc, #532]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 80007c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80007c8:	4b82      	ldr	r3, [pc, #520]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 80007ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007cc:	08db      	lsrs	r3, r3, #3
 80007ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	fb02 f303 	mul.w	r3, r2, r3
 80007d8:	ee07 3a90 	vmov	s15, r3
 80007dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007e0:	edc7 7a04 	vstr	s15, [r7, #16]

    if (pllm != 0U)
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	f000 80c3 	beq.w	8000972 <SystemCoreClockUpdate+0x26a>
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d059      	beq.n	80008a6 <SystemCoreClockUpdate+0x19e>
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d878      	bhi.n	80008ea <SystemCoreClockUpdate+0x1e2>
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d003      	beq.n	8000806 <SystemCoreClockUpdate+0xfe>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d02e      	beq.n	8000862 <SystemCoreClockUpdate+0x15a>
 8000804:	e071      	b.n	80008ea <SystemCoreClockUpdate+0x1e2>
    {
      switch (pllsource)
      {
        case RCC_PLLCKSELR_PLLSRC_HSI:  /* HSI used as PLL clock source */

        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8000806:	4b73      	ldr	r3, [pc, #460]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	4a71      	ldr	r2, [pc, #452]	; (80009d8 <SystemCoreClockUpdate+0x2d0>)
 8000812:	fa22 f303 	lsr.w	r3, r2, r3
 8000816:	60fb      	str	r3, [r7, #12]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	ee07 3a90 	vmov	s15, r3
 800081e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	ee07 3a90 	vmov	s15, r3
 8000828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800082c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000830:	4b68      	ldr	r3, [pc, #416]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000838:	ee07 3a90 	vmov	s15, r3
 800083c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000840:	ed97 6a04 	vldr	s12, [r7, #16]
 8000844:	eddf 5a67 	vldr	s11, [pc, #412]	; 80009e4 <SystemCoreClockUpdate+0x2dc>
 8000848:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800084c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000850:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000854:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085c:	edc7 7a08 	vstr	s15, [r7, #32]

        break;
 8000860:	e071      	b.n	8000946 <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	ee07 3a90 	vmov	s15, r3
 8000868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800086c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80009e8 <SystemCoreClockUpdate+0x2e0>
 8000870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000874:	4b57      	ldr	r3, [pc, #348]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800087c:	ee07 3a90 	vmov	s15, r3
 8000880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000884:	ed97 6a04 	vldr	s12, [r7, #16]
 8000888:	eddf 5a56 	vldr	s11, [pc, #344]	; 80009e4 <SystemCoreClockUpdate+0x2dc>
 800088c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000890:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000894:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800089c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a0:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 80008a4:	e04f      	b.n	8000946 <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008b0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80009ec <SystemCoreClockUpdate+0x2e4>
 80008b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008b8:	4b46      	ldr	r3, [pc, #280]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80008c0:	ee07 3a90 	vmov	s15, r3
 80008c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80008c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80008cc:	eddf 5a45 	vldr	s11, [pc, #276]	; 80009e4 <SystemCoreClockUpdate+0x2dc>
 80008d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80008d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80008d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80008dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80008e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e4:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 80008e8:	e02d      	b.n	8000946 <SystemCoreClockUpdate+0x23e>

      default:
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 80008ea:	4b3a      	ldr	r3, [pc, #232]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	08db      	lsrs	r3, r3, #3
 80008f0:	f003 0303 	and.w	r3, r3, #3
 80008f4:	4a38      	ldr	r2, [pc, #224]	; (80009d8 <SystemCoreClockUpdate+0x2d0>)
 80008f6:	fa22 f303 	lsr.w	r3, r2, r3
 80008fa:	60fb      	str	r3, [r7, #12]
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	ee07 3a90 	vmov	s15, r3
 8000902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	ee07 3a90 	vmov	s15, r3
 800090c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000914:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800091c:	ee07 3a90 	vmov	s15, r3
 8000920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000924:	ed97 6a04 	vldr	s12, [r7, #16]
 8000928:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80009e4 <SystemCoreClockUpdate+0x2dc>
 800092c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000934:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800093c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000940:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 8000944:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8000946:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000950:	3301      	adds	r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	ee07 3a90 	vmov	s15, r3
 800095a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800095e:	edd7 6a08 	vldr	s13, [r7, #32]
 8000962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800096a:	ee17 3a90 	vmov	r3, s15
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    else
    {
      common_system_clock = 0U;
    }
    break;
 8000970:	e00c      	b.n	800098c <SystemCoreClockUpdate+0x284>
      common_system_clock = 0U;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000976:	e009      	b.n	800098c <SystemCoreClockUpdate+0x284>

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	08db      	lsrs	r3, r3, #3
 800097e:	f003 0303 	and.w	r3, r3, #3
 8000982:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <SystemCoreClockUpdate+0x2d0>)
 8000984:	fa22 f303 	lsr.w	r3, r2, r3
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800098a:	bf00      	nop
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	f003 030f 	and.w	r3, r3, #15
 8000996:	4a16      	ldr	r2, [pc, #88]	; (80009f0 <SystemCoreClockUpdate+0x2e8>)
 8000998:	5cd3      	ldrb	r3, [r2, r3]
 800099a:	607b      	str	r3, [r7, #4]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
 800099c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	fa22 f303 	lsr.w	r3, r2, r3
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <SystemCoreClockUpdate+0x2cc>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f003 030f 	and.w	r3, r3, #15
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <SystemCoreClockUpdate+0x2e8>)
 80009b0:	5cd3      	ldrb	r3, [r2, r3]
 80009b2:	f003 031f 	and.w	r3, r3, #31
 80009b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009b8:	fa22 f303 	lsr.w	r3, r2, r3
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <SystemCoreClockUpdate+0x2ec>)
 80009be:	6013      	str	r3, [r2, #0]

#if defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <SystemCoreClockUpdate+0x2f0>)
 80009c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c4:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */
}
 80009c6:	bf00      	nop
 80009c8:	372c      	adds	r7, #44	; 0x2c
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	58024400 	.word	0x58024400
 80009d8:	03d09000 	.word	0x03d09000
 80009dc:	003d0900 	.word	0x003d0900
 80009e0:	007a1200 	.word	0x007a1200
 80009e4:	46000000 	.word	0x46000000
 80009e8:	4a742400 	.word	0x4a742400
 80009ec:	4af42400 	.word	0x4af42400
 80009f0:	0800a3ac 	.word	0x0800a3ac
 80009f4:	24000004 	.word	0x24000004
 80009f8:	24000000 	.word	0x24000000

080009fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	b08d      	sub	sp, #52	; 0x34
 8000a00:	af0a      	add	r7, sp, #40	; 0x28
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a06:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a08:	bf00      	nop
 8000a0a:	4b5f      	ldr	r3, [pc, #380]	; (8000b88 <main+0x18c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d004      	beq.n	8000a20 <main+0x24>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	dcf4      	bgt.n	8000a0a <main+0xe>
  if ( timeout < 0 )
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	da01      	bge.n	8000a2a <main+0x2e>
  {
  Error_Handler();
 8000a26:	f000 fc6d 	bl	8001304 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2a:	f001 fbc5 	bl	80021b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  SystemCoreClockUpdate();  // 🔁 Actualiza el valor global correcto del reloj
 8000a2e:	f7ff fe6b 	bl	8000708 <SystemCoreClockUpdate>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a32:	f000 f8bb 	bl	8000bac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a36:	4b54      	ldr	r3, [pc, #336]	; (8000b88 <main+0x18c>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a52      	ldr	r2, [pc, #328]	; (8000b88 <main+0x18c>)
 8000a3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b50      	ldr	r3, [pc, #320]	; (8000b88 <main+0x18c>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f003 fd81 	bl	800455c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f003 fd97 	bl	8004590 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a66:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a68:	bf00      	nop
 8000a6a:	4b47      	ldr	r3, [pc, #284]	; (8000b88 <main+0x18c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d104      	bne.n	8000a80 <main+0x84>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	1e5a      	subs	r2, r3, #1
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	dcf4      	bgt.n	8000a6a <main+0x6e>
if ( timeout < 0 )
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	da01      	bge.n	8000a8a <main+0x8e>
{
Error_Handler();
 8000a86:	f000 fc3d 	bl	8001304 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fb11 	bl	80010b0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a8e:	f000 f909 	bl	8000ca4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a92:	f000 f9c9 	bl	8000e28 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a96:	f000 fad9 	bl	800104c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000a9a:	f000 f94f 	bl	8000d3c <MX_TIM1_Init>
  MX_FDCAN1_Init();
 8000a9e:	f000 fa0f 	bl	8000ec0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  printf("Initializing...\r\n");
 8000aa2:	483a      	ldr	r0, [pc, #232]	; (8000b8c <main+0x190>)
 8000aa4:	f008 ffb6 	bl	8009a14 <puts>
  sr04.trig_port = GPIOE;
 8000aa8:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <main+0x194>)
 8000aaa:	4a3a      	ldr	r2, [pc, #232]	; (8000b94 <main+0x198>)
 8000aac:	601a      	str	r2, [r3, #0]
  sr04.trig_pin = GPIO_PIN_11;
 8000aae:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <main+0x194>)
 8000ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ab4:	809a      	strh	r2, [r3, #4]
  sr04.echo_htim = &htim1;
 8000ab6:	4b36      	ldr	r3, [pc, #216]	; (8000b90 <main+0x194>)
 8000ab8:	4a37      	ldr	r2, [pc, #220]	; (8000b98 <main+0x19c>)
 8000aba:	609a      	str	r2, [r3, #8]
  sr04.echo_channel = TIM_CHANNEL_1;
 8000abc:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <main+0x194>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	819a      	strh	r2, [r3, #12]
  sr04_init(&sr04);
 8000ac2:	4833      	ldr	r0, [pc, #204]	; (8000b90 <main+0x194>)
 8000ac4:	f000 fc36 	bl	8001334 <sr04_init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);     // Captura con interrupción
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4833      	ldr	r0, [pc, #204]	; (8000b98 <main+0x19c>)
 8000acc:	f006 fb7a 	bl	80071c4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);                  // Base del timer con interrupción (para detectar overflow)
 8000ad0:	4831      	ldr	r0, [pc, #196]	; (8000b98 <main+0x19c>)
 8000ad2:	f006 fa9d 	bl	8007010 <HAL_TIM_Base_Start_IT>
  AXIS0.AXIS_ID = 0x010;
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <main+0x1a0>)
 8000ad8:	2210      	movs	r2, #16
 8000ada:	601a      	str	r2, [r3, #0]
  AXIS0.hfdcan = &hfdcan1;
 8000adc:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <main+0x1a0>)
 8000ade:	4a30      	ldr	r2, [pc, #192]	; (8000ba0 <main+0x1a4>)
 8000ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  // Configurar ODrive sobre FDCAN
  CAN_Setup(&hfdcan1, CAN_BAUDRATE_250_KBPS);
 8000ae2:	4930      	ldr	r1, [pc, #192]	; (8000ba4 <main+0x1a8>)
 8000ae4:	482e      	ldr	r0, [pc, #184]	; (8000ba0 <main+0x1a4>)
 8000ae6:	f000 fddf 	bl	80016a8 <CAN_Setup>
  HAL_Delay(100);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f001 fbf6 	bl	80022dc <HAL_Delay>

  // Comandos de prueba al ODrive
  Set_Controller_Modes(AXIS0, VELOCITY_CONTROL, PASSTHROUGH);
 8000af0:	4e2a      	ldr	r6, [pc, #168]	; (8000b9c <main+0x1a0>)
 8000af2:	2301      	movs	r3, #1
 8000af4:	9309      	str	r3, [sp, #36]	; 0x24
 8000af6:	2302      	movs	r3, #2
 8000af8:	9308      	str	r3, [sp, #32]
 8000afa:	466d      	mov	r5, sp
 8000afc:	f106 0410 	add.w	r4, r6, #16
 8000b00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b04:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b08:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b0c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b10:	f000 fe60 	bl	80017d4 <Set_Controller_Modes>
  Set_Axis_Requested_State(AXIS0, CLOSED_LOOP_CONTROL);
 8000b14:	4e21      	ldr	r6, [pc, #132]	; (8000b9c <main+0x1a0>)
 8000b16:	2308      	movs	r3, #8
 8000b18:	9308      	str	r3, [sp, #32]
 8000b1a:	466d      	mov	r5, sp
 8000b1c:	f106 0410 	add.w	r4, r6, #16
 8000b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b28:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b2c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b30:	f000 fe8c 	bl	800184c <Set_Axis_Requested_State>
  Set_Input_Vel(AXIS0, 2, 0);
 8000b34:	4e19      	ldr	r6, [pc, #100]	; (8000b9c <main+0x1a0>)
 8000b36:	466d      	mov	r5, sp
 8000b38:	f106 0410 	add.w	r4, r6, #16
 8000b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b44:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b48:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b4c:	eddf 0a16 	vldr	s1, [pc, #88]	; 8000ba8 <main+0x1ac>
 8000b50:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000b54:	f000 feae 	bl	80018b4 <Set_Input_Vel>
  HAL_Delay(1000);
 8000b58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b5c:	f001 fbbe 	bl	80022dc <HAL_Delay>
  Set_Input_Vel(AXIS0, 0, 0);
 8000b60:	4e0e      	ldr	r6, [pc, #56]	; (8000b9c <main+0x1a0>)
 8000b62:	466d      	mov	r5, sp
 8000b64:	f106 0410 	add.w	r4, r6, #16
 8000b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b70:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b74:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b78:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000ba8 <main+0x1ac>
 8000b7c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000ba8 <main+0x1ac>
 8000b80:	f000 fe98 	bl	80018b4 <Set_Input_Vel>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <main+0x188>
 8000b86:	bf00      	nop
 8000b88:	58024400 	.word	0x58024400
 8000b8c:	0800a34c 	.word	0x0800a34c
 8000b90:	24000828 	.word	0x24000828
 8000b94:	58021000 	.word	0x58021000
 8000b98:	24000240 	.word	0x24000240
 8000b9c:	2400084c 	.word	0x2400084c
 8000ba0:	2400087c 	.word	0x2400087c
 8000ba4:	0004001f 	.word	0x0004001f
 8000ba8:	00000000 	.word	0x00000000

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b09c      	sub	sp, #112	; 0x70
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	224c      	movs	r2, #76	; 0x4c
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f008 feb4 	bl	8009928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f008 feae 	bl	8009928 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bcc:	2004      	movs	r0, #4
 8000bce:	f003 fe3b 	bl	8004848 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <SystemClock_Config+0xf0>)
 8000bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bda:	4a30      	ldr	r2, [pc, #192]	; (8000c9c <SystemClock_Config+0xf0>)
 8000bdc:	f023 0301 	bic.w	r3, r3, #1
 8000be0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000be2:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <SystemClock_Config+0xf0>)
 8000be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <SystemClock_Config+0xf4>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bf4:	4a2a      	ldr	r2, [pc, #168]	; (8000ca0 <SystemClock_Config+0xf4>)
 8000bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <SystemClock_Config+0xf4>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c08:	bf00      	nop
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <SystemClock_Config+0xf4>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c16:	d1f8      	bne.n	8000c0a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c1c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	2302      	movs	r3, #2
 8000c28:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000c2e:	2314      	movs	r3, #20
 8000c30:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c36:	2304      	movs	r3, #4
 8000c38:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000c42:	2302      	movs	r3, #2
 8000c44:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 fe64 	bl	800491c <HAL_RCC_OscConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000c5a:	f000 fb53 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5e:	233f      	movs	r3, #63	; 0x3f
 8000c60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c62:	2303      	movs	r3, #3
 8000c64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c72:	2340      	movs	r3, #64	; 0x40
 8000c74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2101      	movs	r1, #1
 8000c82:	4618      	mov	r0, r3
 8000c84:	f004 fa78 	bl	8005178 <HAL_RCC_ClockConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000c8e:	f000 fb39 	bl	8001304 <Error_Handler>
  }
}
 8000c92:	bf00      	nop
 8000c94:	3770      	adds	r7, #112	; 0x70
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	58000400 	.word	0x58000400
 8000ca0:	58024800 	.word	0x58024800

08000ca4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <MX_ETH_Init+0x80>)
 8000caa:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <MX_ETH_Init+0x84>)
 8000cac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cb6:	2280      	movs	r2, #128	; 0x80
 8000cb8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cbc:	22e1      	movs	r2, #225	; 0xe1
 8000cbe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_ETH_Init+0x80>)
 8000cd4:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cd6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_ETH_Init+0x80>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_ETH_Init+0x80>)
 8000ce0:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <MX_ETH_Init+0x8c>)
 8000ce2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_ETH_Init+0x80>)
 8000ce6:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <MX_ETH_Init+0x90>)
 8000ce8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_ETH_Init+0x80>)
 8000cec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000cf0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cf2:	480c      	ldr	r0, [pc, #48]	; (8000d24 <MX_ETH_Init+0x80>)
 8000cf4:	f001 fc46 	bl	8002584 <HAL_ETH_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000cfe:	f000 fb01 	bl	8001304 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d02:	2238      	movs	r2, #56	; 0x38
 8000d04:	2100      	movs	r1, #0
 8000d06:	480c      	ldr	r0, [pc, #48]	; (8000d38 <MX_ETH_Init+0x94>)
 8000d08:	f008 fe0e 	bl	8009928 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <MX_ETH_Init+0x94>)
 8000d0e:	2221      	movs	r2, #33	; 0x21
 8000d10:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_ETH_Init+0x94>)
 8000d14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d18:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_ETH_Init+0x94>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	24000190 	.word	0x24000190
 8000d28:	40028000 	.word	0x40028000
 8000d2c:	24000990 	.word	0x24000990
 8000d30:	240000dc 	.word	0x240000dc
 8000d34:	2400007c 	.word	0x2400007c
 8000d38:	24000158 	.word	0x24000158

08000d3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	; 0x30
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <MX_TIM1_Init+0xe4>)
 8000d6a:	4a2e      	ldr	r2, [pc, #184]	; (8000e24 <MX_TIM1_Init+0xe8>)
 8000d6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8000d6e:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <MX_TIM1_Init+0xe4>)
 8000d70:	2248      	movs	r2, #72	; 0x48
 8000d72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <MX_TIM1_Init+0xe4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d7a:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <MX_TIM1_Init+0xe4>)
 8000d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d82:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <MX_TIM1_Init+0xe4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d88:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <MX_TIM1_Init+0xe4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <MX_TIM1_Init+0xe4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d94:	4822      	ldr	r0, [pc, #136]	; (8000e20 <MX_TIM1_Init+0xe4>)
 8000d96:	f006 f8e3 	bl	8006f60 <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000da0:	f000 fab0 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000daa:	f107 0320 	add.w	r3, r7, #32
 8000dae:	4619      	mov	r1, r3
 8000db0:	481b      	ldr	r0, [pc, #108]	; (8000e20 <MX_TIM1_Init+0xe4>)
 8000db2:	f006 fd13 	bl	80077dc <HAL_TIM_ConfigClockSource>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000dbc:	f000 faa2 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000dc0:	4817      	ldr	r0, [pc, #92]	; (8000e20 <MX_TIM1_Init+0xe4>)
 8000dc2:	f006 f99d 	bl	8007100 <HAL_TIM_IC_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000dcc:	f000 fa9a 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	480f      	ldr	r0, [pc, #60]	; (8000e20 <MX_TIM1_Init+0xe4>)
 8000de4:	f007 f8ac 	bl	8007f40 <HAL_TIMEx_MasterConfigSynchronization>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000dee:	f000 fa89 	bl	8001304 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000df6:	2301      	movs	r3, #1
 8000df8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2200      	movs	r2, #0
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_TIM1_Init+0xe4>)
 8000e0a:	f006 fc4a 	bl	80076a2 <HAL_TIM_IC_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000e14:	f000 fa76 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3730      	adds	r7, #48	; 0x30
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	24000240 	.word	0x24000240
 8000e24:	40010000 	.word	0x40010000

08000e28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e2c:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <MX_USART3_UART_Init+0x90>)
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <MX_USART3_UART_Init+0x94>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <MX_USART3_UART_Init+0x90>)
 8000e34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_USART3_UART_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <MX_USART3_UART_Init+0x90>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_USART3_UART_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_USART3_UART_Init+0x90>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <MX_USART3_UART_Init+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MX_USART3_UART_Init+0x90>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_USART3_UART_Init+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_USART3_UART_Init+0x90>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_USART3_UART_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e70:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <MX_USART3_UART_Init+0x90>)
 8000e72:	f007 f911 	bl	8008098 <HAL_UART_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e7c:	f000 fa42 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e80:	2100      	movs	r1, #0
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <MX_USART3_UART_Init+0x90>)
 8000e84:	f008 f944 	bl	8009110 <HAL_UARTEx_SetTxFifoThreshold>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e8e:	f000 fa39 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e92:	2100      	movs	r1, #0
 8000e94:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <MX_USART3_UART_Init+0x90>)
 8000e96:	f008 f979 	bl	800918c <HAL_UARTEx_SetRxFifoThreshold>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ea0:	f000 fa30 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <MX_USART3_UART_Init+0x90>)
 8000ea6:	f008 f8fa 	bl	800909e <HAL_UARTEx_DisableFifoMode>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000eb0:	f000 fa28 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2400028c 	.word	0x2400028c
 8000ebc:	40004800 	.word	0x40004800

08000ec0 <MX_FDCAN1_Init>:

static void MX_FDCAN1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af02      	add	r7, sp, #8
  hfdcan1.Instance = FDCAN1;
 8000ec6:	4b5d      	ldr	r3, [pc, #372]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000ec8:	4a5d      	ldr	r2, [pc, #372]	; (8001040 <MX_FDCAN1_Init+0x180>)
 8000eca:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ecc:	4b5b      	ldr	r3, [pc, #364]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ed2:	4b5a      	ldr	r3, [pc, #360]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ed8:	4b58      	ldr	r3, [pc, #352]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ede:	4b57      	ldr	r3, [pc, #348]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000ee4:	4b55      	ldr	r3, [pc, #340]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000eea:	4b54      	ldr	r3, [pc, #336]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000eec:	2202      	movs	r2, #2
 8000eee:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000ef0:	4b52      	ldr	r3, [pc, #328]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000ef2:	2208      	movs	r2, #8
 8000ef4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 8000ef6:	4b51      	ldr	r3, [pc, #324]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000ef8:	221f      	movs	r2, #31
 8000efa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000efc:	4b4f      	ldr	r3, [pc, #316]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000efe:	2208      	movs	r2, #8
 8000f00:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f02:	4b4e      	ldr	r3, [pc, #312]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f08:	4b4c      	ldr	r3, [pc, #304]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f0e:	4b4b      	ldr	r3, [pc, #300]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f14:	4b49      	ldr	r3, [pc, #292]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000f1a:	4b48      	ldr	r3, [pc, #288]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000f20:	4b46      	ldr	r3, [pc, #280]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f26:	4b45      	ldr	r3, [pc, #276]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000f2c:	4b43      	ldr	r3, [pc, #268]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f32:	4b42      	ldr	r3, [pc, #264]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f34:	2204      	movs	r2, #4
 8000f36:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000f38:	4b40      	ldr	r3, [pc, #256]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f3e:	4b3f      	ldr	r3, [pc, #252]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f40:	2204      	movs	r2, #4
 8000f42:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000f44:	4b3d      	ldr	r3, [pc, #244]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f4a:	4b3c      	ldr	r3, [pc, #240]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000f50:	4b3a      	ldr	r3, [pc, #232]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000f56:	4b39      	ldr	r3, [pc, #228]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000f5c:	4b37      	ldr	r3, [pc, #220]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f62:	4b36      	ldr	r3, [pc, #216]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f68:	4b34      	ldr	r3, [pc, #208]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f6e:	4833      	ldr	r0, [pc, #204]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000f70:	f001 ff2c 	bl	8002dcc <HAL_FDCAN_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000f7a:	f000 f9c3 	bl	8001304 <Error_Handler>
  }

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000f7e:	4b31      	ldr	r3, [pc, #196]	; (8001044 <MX_FDCAN1_Init+0x184>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8000f84:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <MX_FDCAN1_Init+0x184>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000f8a:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <MX_FDCAN1_Init+0x184>)
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000f90:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <MX_FDCAN1_Init+0x184>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x000;
 8000f96:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <MX_FDCAN1_Init+0x184>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x000;
 8000f9c:	4b29      	ldr	r3, [pc, #164]	; (8001044 <MX_FDCAN1_Init+0x184>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]

  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	2202      	movs	r2, #2
 8000faa:	2102      	movs	r1, #2
 8000fac:	4823      	ldr	r0, [pc, #140]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000fae:	f002 f961 	bl	8003274 <HAL_FDCAN_ConfigGlobalFilter>

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000fb2:	4924      	ldr	r1, [pc, #144]	; (8001044 <MX_FDCAN1_Init+0x184>)
 8000fb4:	4821      	ldr	r0, [pc, #132]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000fb6:	f002 f8e7 	bl	8003188 <HAL_FDCAN_ConfigFilter>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_FDCAN1_Init+0x104>
  {
    Error_Handler();
 8000fc0:	f000 f9a0 	bl	8001304 <Error_Handler>
  }

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000fc4:	481d      	ldr	r0, [pc, #116]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000fc6:	f002 f982 	bl	80032ce <HAL_FDCAN_Start>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_FDCAN1_Init+0x114>
  {
    Error_Handler();
 8000fd0:	f000 f998 	bl	8001304 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4818      	ldr	r0, [pc, #96]	; (800103c <MX_FDCAN1_Init+0x17c>)
 8000fda:	f002 fb6d 	bl	80036b8 <HAL_FDCAN_ActivateNotification>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_FDCAN1_Init+0x128>
  {
    Error_Handler();
 8000fe4:	f000 f98e 	bl	8001304 <Error_Handler>
  }

  TxHeader.Identifier = 0x111;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_FDCAN1_Init+0x188>)
 8000fea:	f240 1211 	movw	r2, #273	; 0x111
 8000fee:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_FDCAN1_Init+0x188>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_FDCAN1_Init+0x188>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <MX_FDCAN1_Init+0x188>)
 8000ffe:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001002:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <MX_FDCAN1_Init+0x188>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_FDCAN1_Init+0x188>)
 800100c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001010:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <MX_FDCAN1_Init+0x188>)
 8001014:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001018:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_FDCAN1_Init+0x188>)
 800101c:	2200      	movs	r2, #0
 800101e:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0x00;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_FDCAN1_Init+0x188>)
 8001022:	2200      	movs	r2, #0
 8001024:	621a      	str	r2, [r3, #32]
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2013      	movs	r0, #19
 800102c:	f001 fa75 	bl	800251a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001030:	2013      	movs	r0, #19
 8001032:	f001 fa8c 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2400087c 	.word	0x2400087c
 8001040:	4000a000 	.word	0x4000a000
 8001044:	2400091c 	.word	0x2400091c
 8001048:	2400093c 	.word	0x2400093c

0800104c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001052:	4a16      	ldr	r2, [pc, #88]	; (80010ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001054:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001058:	2209      	movs	r2, #9
 800105a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800105e:	2202      	movs	r2, #2
 8001060:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800106a:	2202      	movs	r2, #2
 800106c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001082:	2201      	movs	r2, #1
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001088:	2201      	movs	r2, #1
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800108e:	2200      	movs	r2, #0
 8001090:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001094:	f003 fa90 	bl	80045b8 <HAL_PCD_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800109e:	f000 f931 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2400031c 	.word	0x2400031c
 80010ac:	40080000 	.word	0x40080000

080010b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	; 0x30
 80010b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <MX_GPIO_Init+0x1c4>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	4a69      	ldr	r2, [pc, #420]	; (8001274 <MX_GPIO_Init+0x1c4>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d6:	4b67      	ldr	r3, [pc, #412]	; (8001274 <MX_GPIO_Init+0x1c4>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e4:	4b63      	ldr	r3, [pc, #396]	; (8001274 <MX_GPIO_Init+0x1c4>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	4a62      	ldr	r2, [pc, #392]	; (8001274 <MX_GPIO_Init+0x1c4>)
 80010ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f4:	4b5f      	ldr	r3, [pc, #380]	; (8001274 <MX_GPIO_Init+0x1c4>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b5c      	ldr	r3, [pc, #368]	; (8001274 <MX_GPIO_Init+0x1c4>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	4a5a      	ldr	r2, [pc, #360]	; (8001274 <MX_GPIO_Init+0x1c4>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001112:	4b58      	ldr	r3, [pc, #352]	; (8001274 <MX_GPIO_Init+0x1c4>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001120:	4b54      	ldr	r3, [pc, #336]	; (8001274 <MX_GPIO_Init+0x1c4>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	4a53      	ldr	r2, [pc, #332]	; (8001274 <MX_GPIO_Init+0x1c4>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001130:	4b50      	ldr	r3, [pc, #320]	; (8001274 <MX_GPIO_Init+0x1c4>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800113e:	4b4d      	ldr	r3, [pc, #308]	; (8001274 <MX_GPIO_Init+0x1c4>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	4a4b      	ldr	r2, [pc, #300]	; (8001274 <MX_GPIO_Init+0x1c4>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114e:	4b49      	ldr	r3, [pc, #292]	; (8001274 <MX_GPIO_Init+0x1c4>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115c:	4b45      	ldr	r3, [pc, #276]	; (8001274 <MX_GPIO_Init+0x1c4>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001162:	4a44      	ldr	r2, [pc, #272]	; (8001274 <MX_GPIO_Init+0x1c4>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116c:	4b41      	ldr	r3, [pc, #260]	; (8001274 <MX_GPIO_Init+0x1c4>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800117a:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <MX_GPIO_Init+0x1c4>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	4a3c      	ldr	r2, [pc, #240]	; (8001274 <MX_GPIO_Init+0x1c4>)
 8001182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118a:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <MX_GPIO_Init+0x1c4>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	f244 0101 	movw	r1, #16385	; 0x4001
 800119e:	4836      	ldr	r0, [pc, #216]	; (8001278 <MX_GPIO_Init+0x1c8>)
 80011a0:	f003 f9c2 	bl	8004528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f640 0102 	movw	r1, #2050	; 0x802
 80011aa:	4834      	ldr	r0, [pc, #208]	; (800127c <MX_GPIO_Init+0x1cc>)
 80011ac:	f003 f9bc 	bl	8004528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b6:	4832      	ldr	r0, [pc, #200]	; (8001280 <MX_GPIO_Init+0x1d0>)
 80011b8:	f003 f9b6 	bl	8004528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	482c      	ldr	r0, [pc, #176]	; (8001284 <MX_GPIO_Init+0x1d4>)
 80011d2:	f002 fff9 	bl	80041c8 <HAL_GPIO_Init>

  /* Configure CAN1 TX (PA12) and RX (PA11) */
  GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80011d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80011e8:	2309      	movs	r3, #9
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4825      	ldr	r0, [pc, #148]	; (8001288 <MX_GPIO_Init+0x1d8>)
 80011f4:	f002 ffe8 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80011f8:	f244 0301 	movw	r3, #16385	; 0x4001
 80011fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	4819      	ldr	r0, [pc, #100]	; (8001278 <MX_GPIO_Init+0x1c8>)
 8001212:	f002 ffd9 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin LD2_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|LD2_Pin;
 8001216:	f640 0302 	movw	r3, #2050	; 0x802
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	4813      	ldr	r0, [pc, #76]	; (800127c <MX_GPIO_Init+0x1cc>)
 8001230:	f002 ffca 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <MX_GPIO_Init+0x1d0>)
 800124e:	f002 ffbb 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001256:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	4809      	ldr	r0, [pc, #36]	; (800128c <MX_GPIO_Init+0x1dc>)
 8001268:	f002 ffae 	bl	80041c8 <HAL_GPIO_Init>

}
 800126c:	bf00      	nop
 800126e:	3730      	adds	r7, #48	; 0x30
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	58024400 	.word	0x58024400
 8001278:	58020400 	.word	0x58020400
 800127c:	58021000 	.word	0x58021000
 8001280:	58020c00 	.word	0x58020c00
 8001284:	58020800 	.word	0x58020800
 8001288:	58020000 	.word	0x58020000
 800128c:	58021800 	.word	0x58021800

08001290 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b090      	sub	sp, #64	; 0x40
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d027      	beq.n	80012f4 <HAL_FDCAN_RxFifo0Callback+0x64>
    {
        FDCAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80012a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012a8:	f107 020c 	add.w	r2, r7, #12
 80012ac:	2140      	movs	r1, #64	; 0x40
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f002 f894 	bl	80033dc <HAL_FDCAN_GetRxMessage>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d11c      	bne.n	80012f4 <HAL_FDCAN_RxFifo0Callback+0x64>
        {
        	extern CAN_RX_Typedef RX;
            RX.ID = RxHeader.Identifier;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <HAL_FDCAN_RxFifo0Callback+0x6c>)
 80012be:	61d3      	str	r3, [r2, #28]
            RX.data_length = 8;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_FDCAN_RxFifo0Callback+0x6c>)
 80012c2:	2208      	movs	r2, #8
 80012c4:	605a      	str	r2, [r3, #4]
            for (int i = 0; i < 8; i++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012ca:	e00d      	b.n	80012e8 <HAL_FDCAN_RxFifo0Callback+0x58>
                RX.data[i] = RxData[i];
 80012cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80012d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012d2:	4413      	add	r3, r2
 80012d4:	7819      	ldrb	r1, [r3, #0]
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <HAL_FDCAN_RxFifo0Callback+0x6c>)
 80012d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012da:	4413      	add	r3, r2
 80012dc:	3308      	adds	r3, #8
 80012de:	460a      	mov	r2, r1
 80012e0:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 8; i++)
 80012e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012e4:	3301      	adds	r3, #1
 80012e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ea:	2b07      	cmp	r3, #7
 80012ec:	ddee      	ble.n	80012cc <HAL_FDCAN_RxFifo0Callback+0x3c>

            // Simulas el CAN_Get_Packet y ODrive_RX_CallBack manualmente
            ODrive_RX_CallBack(&AXIS0);
 80012ee:	4804      	ldr	r0, [pc, #16]	; (8001300 <HAL_FDCAN_RxFifo0Callback+0x70>)
 80012f0:	f000 fb1a 	bl	8001928 <ODrive_RX_CallBack>
        }
    }
}
 80012f4:	bf00      	nop
 80012f6:	3740      	adds	r7, #64	; 0x40
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	24000998 	.word	0x24000998
 8001300:	2400084c 	.word	0x2400084c

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001318:	1d39      	adds	r1, r7, #4
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	2201      	movs	r2, #1
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <__io_putchar+0x20>)
 8001322:	f006 ff09 	bl	8008138 <HAL_UART_Transmit>
  return ch;
 8001326:	687b      	ldr	r3, [r7, #4]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2400028c 	.word	0x2400028c

08001334 <sr04_init>:
#include "hcsr04.h"
#define DISTANCE_LIMIT 5000

void sr04_init(sr04_t *sr04_struct){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  // Enable trigger pin
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	889b      	ldrh	r3, [r3, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	4619      	mov	r1, r3
 8001348:	f003 f8ee 	bl	8004528 <HAL_GPIO_WritePin>
  // Set input capture edge to rising
  __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	899b      	ldrh	r3, [r3, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10a      	bne.n	800136a <sr04_init+0x36>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6a1a      	ldr	r2, [r3, #32]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 020a 	bic.w	r2, r2, #10
 8001366:	621a      	str	r2, [r3, #32]
 8001368:	e027      	b.n	80013ba <sr04_init+0x86>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	899b      	ldrh	r3, [r3, #12]
 800136e:	2b04      	cmp	r3, #4
 8001370:	d10a      	bne.n	8001388 <sr04_init+0x54>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6892      	ldr	r2, [r2, #8]
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001384:	6213      	str	r3, [r2, #32]
 8001386:	e018      	b.n	80013ba <sr04_init+0x86>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	899b      	ldrh	r3, [r3, #12]
 800138c:	2b08      	cmp	r3, #8
 800138e:	d10a      	bne.n	80013a6 <sr04_init+0x72>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6892      	ldr	r2, [r2, #8]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80013a2:	6213      	str	r3, [r2, #32]
 80013a4:	e009      	b.n	80013ba <sr04_init+0x86>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6892      	ldr	r2, [r2, #8]
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80013b8:	6213      	str	r3, [r2, #32]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	899b      	ldrh	r3, [r3, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d108      	bne.n	80013d4 <sr04_init+0xa0>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6a12      	ldr	r2, [r2, #32]
 80013d0:	621a      	str	r2, [r3, #32]
 80013d2:	e021      	b.n	8001418 <sr04_init+0xe4>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	899b      	ldrh	r3, [r3, #12]
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d108      	bne.n	80013ee <sr04_init+0xba>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6892      	ldr	r2, [r2, #8]
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	6213      	str	r3, [r2, #32]
 80013ec:	e014      	b.n	8001418 <sr04_init+0xe4>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	899b      	ldrh	r3, [r3, #12]
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d108      	bne.n	8001408 <sr04_init+0xd4>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6892      	ldr	r2, [r2, #8]
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	6213      	str	r3, [r2, #32]
 8001406:	e007      	b.n	8001418 <sr04_init+0xe4>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6892      	ldr	r2, [r2, #8]
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	6213      	str	r3, [r2, #32]
  // Set capture flag to 0
  sr04_struct->capture_flag = 0;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	739a      	strb	r2, [r3, #14]
  // Enable echo pin
  HAL_TIM_IC_Start_IT(sr04_struct->echo_htim, sr04_struct->echo_channel);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	899b      	ldrh	r3, [r3, #12]
 8001426:	4619      	mov	r1, r3
 8001428:	4610      	mov	r0, r2
 800142a:	f005 fecb 	bl	80071c4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(sr04_struct->echo_htim);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	4618      	mov	r0, r3
 8001434:	f005 fdec 	bl	8007010 <HAL_TIM_Base_Start_IT>
  //printf(">> HCSR04 initialized\r\n");
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <sr04_read_distance>:
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
  //printf(">> Sent trigger\r\n");

}

void sr04_read_distance(sr04_t *sr04_struct){
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  // This function should be called in the timer input capture callback
  switch (sr04_struct->capture_flag){
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7b9b      	ldrb	r3, [r3, #14]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <sr04_read_distance+0x16>
 8001450:	2b01      	cmp	r3, #1
 8001452:	d07b      	beq.n	800154c <sr04_read_distance+0x10c>
      sr04_struct->last_distance = sr04_struct->distance;
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
      //printf(">> Case 1\r\n");
      break;
  }
}
 8001454:	e11e      	b.n	8001694 <sr04_read_distance+0x254>
      sr04_struct->start_counter = __HAL_TIM_GET_COUNTER(sr04_struct->echo_htim);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	611a      	str	r2, [r3, #16]
      sr04_struct->capture_flag = 1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	739a      	strb	r2, [r3, #14]
      sr04_struct->tim_update_count = 0;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	841a      	strh	r2, [r3, #32]
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	899b      	ldrh	r3, [r3, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10a      	bne.n	800148c <sr04_read_distance+0x4c>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6a1a      	ldr	r2, [r3, #32]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 020a 	bic.w	r2, r2, #10
 8001488:	621a      	str	r2, [r3, #32]
 800148a:	e027      	b.n	80014dc <sr04_read_distance+0x9c>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	899b      	ldrh	r3, [r3, #12]
 8001490:	2b04      	cmp	r3, #4
 8001492:	d10a      	bne.n	80014aa <sr04_read_distance+0x6a>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6892      	ldr	r2, [r2, #8]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80014a6:	6213      	str	r3, [r2, #32]
 80014a8:	e018      	b.n	80014dc <sr04_read_distance+0x9c>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	899b      	ldrh	r3, [r3, #12]
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d10a      	bne.n	80014c8 <sr04_read_distance+0x88>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6892      	ldr	r2, [r2, #8]
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80014c4:	6213      	str	r3, [r2, #32]
 80014c6:	e009      	b.n	80014dc <sr04_read_distance+0x9c>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6892      	ldr	r2, [r2, #8]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80014da:	6213      	str	r3, [r2, #32]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	899b      	ldrh	r3, [r3, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10a      	bne.n	80014fa <sr04_read_distance+0xba>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6a1a      	ldr	r2, [r3, #32]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0202 	orr.w	r2, r2, #2
 80014f6:	621a      	str	r2, [r3, #32]
      break;
 80014f8:	e0cc      	b.n	8001694 <sr04_read_distance+0x254>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	899b      	ldrh	r3, [r3, #12]
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d10a      	bne.n	8001518 <sr04_read_distance+0xd8>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6892      	ldr	r2, [r2, #8]
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	f043 0320 	orr.w	r3, r3, #32
 8001514:	6213      	str	r3, [r2, #32]
      break;
 8001516:	e0bd      	b.n	8001694 <sr04_read_distance+0x254>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	899b      	ldrh	r3, [r3, #12]
 800151c:	2b08      	cmp	r3, #8
 800151e:	d10a      	bne.n	8001536 <sr04_read_distance+0xf6>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6892      	ldr	r2, [r2, #8]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001532:	6213      	str	r3, [r2, #32]
      break;
 8001534:	e0ae      	b.n	8001694 <sr04_read_distance+0x254>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6892      	ldr	r2, [r2, #8]
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001548:	6213      	str	r3, [r2, #32]
      break;
 800154a:	e0a3      	b.n	8001694 <sr04_read_distance+0x254>
      sr04_struct->end_counter = __HAL_TIM_GET_COUNTER(sr04_struct->echo_htim) + sr04_struct->tim_update_count * sr04_struct->echo_htim->Init.Period;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	8c1b      	ldrh	r3, [r3, #32]
 8001558:	4619      	mov	r1, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	fb01 f303 	mul.w	r3, r1, r3
 8001564:	441a      	add	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	615a      	str	r2, [r3, #20]
      sr04_struct->capture_flag = 0;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	739a      	strb	r2, [r3, #14]
      sr04_struct->distance = (sr04_struct->end_counter - sr04_struct->start_counter) * 340 / (SystemCoreClock / 1000000) / 2 / (1000 / sr04_struct->echo_htim->Init.Prescaler);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	695a      	ldr	r2, [r3, #20]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800157e:	fb03 f202 	mul.w	r2, r3, r2
 8001582:	4b47      	ldr	r3, [pc, #284]	; (80016a0 <sr04_read_distance+0x260>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4947      	ldr	r1, [pc, #284]	; (80016a4 <sr04_read_distance+0x264>)
 8001588:	fba1 1303 	umull	r1, r3, r1, r3
 800158c:	0c9b      	lsrs	r3, r3, #18
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	085a      	lsrs	r2, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800159e:	fbb1 f3f3 	udiv	r3, r1, r3
 80015a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	619a      	str	r2, [r3, #24]
      if(sr04_struct->distance > DISTANCE_LIMIT){
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d903      	bls.n	80015be <sr04_read_distance+0x17e>
        sr04_struct->distance = sr04_struct->last_distance;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	619a      	str	r2, [r3, #24]
      sr04_struct->last_distance = sr04_struct->distance;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	61da      	str	r2, [r3, #28]
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	899b      	ldrh	r3, [r3, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10a      	bne.n	80015e4 <sr04_read_distance+0x1a4>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6a1a      	ldr	r2, [r3, #32]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 020a 	bic.w	r2, r2, #10
 80015e0:	621a      	str	r2, [r3, #32]
 80015e2:	e027      	b.n	8001634 <sr04_read_distance+0x1f4>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	899b      	ldrh	r3, [r3, #12]
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d10a      	bne.n	8001602 <sr04_read_distance+0x1c2>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6892      	ldr	r2, [r2, #8]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80015fe:	6213      	str	r3, [r2, #32]
 8001600:	e018      	b.n	8001634 <sr04_read_distance+0x1f4>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	899b      	ldrh	r3, [r3, #12]
 8001606:	2b08      	cmp	r3, #8
 8001608:	d10a      	bne.n	8001620 <sr04_read_distance+0x1e0>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6892      	ldr	r2, [r2, #8]
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800161c:	6213      	str	r3, [r2, #32]
 800161e:	e009      	b.n	8001634 <sr04_read_distance+0x1f4>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6892      	ldr	r2, [r2, #8]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	899b      	ldrh	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d108      	bne.n	800164e <sr04_read_distance+0x20e>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6a12      	ldr	r2, [r2, #32]
 800164a:	621a      	str	r2, [r3, #32]
      break;
 800164c:	e021      	b.n	8001692 <sr04_read_distance+0x252>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	899b      	ldrh	r3, [r3, #12]
 8001652:	2b04      	cmp	r3, #4
 8001654:	d108      	bne.n	8001668 <sr04_read_distance+0x228>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6892      	ldr	r2, [r2, #8]
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	6213      	str	r3, [r2, #32]
      break;
 8001666:	e014      	b.n	8001692 <sr04_read_distance+0x252>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	899b      	ldrh	r3, [r3, #12]
 800166c:	2b08      	cmp	r3, #8
 800166e:	d108      	bne.n	8001682 <sr04_read_distance+0x242>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6892      	ldr	r2, [r2, #8]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	6213      	str	r3, [r2, #32]
      break;
 8001680:	e007      	b.n	8001692 <sr04_read_distance+0x252>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6892      	ldr	r2, [r2, #8]
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	6213      	str	r3, [r2, #32]
      break;
 8001692:	bf00      	nop
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	24000000 	.word	0x24000000
 80016a4:	431bde83 	.word	0x431bde83

080016a8 <CAN_Setup>:
 */

#include "ODrive.h"
CAN_RX_Typedef RX;

void CAN_Setup(FDCAN_HandleTypeDef *hfdcan, int32_t baudrate_prescaler) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
    hfdcan->Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
    hfdcan->Init.Mode = FDCAN_MODE_NORMAL;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
    hfdcan->Init.AutoRetransmission = DISABLE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	741a      	strb	r2, [r3, #16]
    hfdcan->Init.TransmitPause = DISABLE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	745a      	strb	r2, [r3, #17]
    hfdcan->Init.ProtocolException = ENABLE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	749a      	strb	r2, [r3, #18]
    hfdcan->Init.NominalPrescaler = baudrate_prescaler;
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	615a      	str	r2, [r3, #20]
    hfdcan->Init.NominalSyncJumpWidth = 8;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2208      	movs	r2, #8
 80016da:	619a      	str	r2, [r3, #24]
    hfdcan->Init.NominalTimeSeg1 = 0x1F;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	221f      	movs	r2, #31
 80016e0:	61da      	str	r2, [r3, #28]
    hfdcan->Init.NominalTimeSeg2 = 8;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2208      	movs	r2, #8
 80016e6:	621a      	str	r2, [r3, #32]
    hfdcan->Init.DataPrescaler = 1;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
    hfdcan->Init.DataSyncJumpWidth = 1;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
    hfdcan->Init.DataTimeSeg1 = 1;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hfdcan->Init.DataTimeSeg2 = 1;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	631a      	str	r2, [r3, #48]	; 0x30
    hfdcan->Init.StdFiltersNbr = 1;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	639a      	str	r2, [r3, #56]	; 0x38
    hfdcan->Init.ExtFiltersNbr = 0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	63da      	str	r2, [r3, #60]	; 0x3c
    hfdcan->Init.RxFifo0ElmtsNbr = 1;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
    hfdcan->Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2204      	movs	r2, #4
 8001716:	645a      	str	r2, [r3, #68]	; 0x44
    hfdcan->Init.TxFifoQueueElmtsNbr = 1;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	661a      	str	r2, [r3, #96]	; 0x60
    hfdcan->Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2204      	movs	r2, #4
 8001722:	669a      	str	r2, [r3, #104]	; 0x68

    if (HAL_FDCAN_Init(hfdcan) != HAL_OK) {
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f001 fb51 	bl	8002dcc <HAL_FDCAN_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <CAN_Setup+0x8c>
        Error_Handler();
 8001730:	f7ff fde8 	bl	8001304 <Error_Handler>
    }

    FDCAN_FilterTypeDef sFilterConfig;
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIndex = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800173c:	2302      	movs	r3, #2
 800173e:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001740:	2301      	movs	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterID1 = 0x000;
 8001744:	2300      	movs	r3, #0
 8001746:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterID2 = 0x000;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]

    HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig);
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	4619      	mov	r1, r3
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f001 fd18 	bl	8003188 <HAL_FDCAN_ConfigFilter>
    HAL_FDCAN_Start(hfdcan);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f001 fdb8 	bl	80032ce <HAL_FDCAN_Start>
    HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2101      	movs	r1, #1
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f001 ffa8 	bl	80036b8 <HAL_FDCAN_ActivateNotification>
}
 8001768:	bf00      	nop
 800176a:	3728      	adds	r7, #40	; 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <Set_TX_Header>:

void Set_TX_Header(Axis Axis, uint32_t command, uint8_t len, uint32_t frame_type) {
 8001770:	b084      	sub	sp, #16
 8001772:	b490      	push	{r4, r7}
 8001774:	af00      	add	r7, sp, #0
 8001776:	f107 0408 	add.w	r4, r7, #8
 800177a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    TxHeader.Identifier = (Axis.AXIS_ID << 5) | command;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	015b      	lsls	r3, r3, #5
 8001782:	461a      	mov	r2, r3
 8001784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001786:	4313      	orrs	r3, r2
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <Set_TX_Header+0x60>)
 800178a:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <Set_TX_Header+0x60>)
 800178e:	2200      	movs	r2, #0
 8001790:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = frame_type;
 8001792:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <Set_TX_Header+0x60>)
 8001794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001796:	6093      	str	r3, [r2, #8]
    TxHeader.DataLength = (len << 16);
 8001798:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800179c:	041b      	lsls	r3, r3, #16
 800179e:	461a      	mov	r2, r3
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <Set_TX_Header+0x60>)
 80017a2:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <Set_TX_Header+0x60>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <Set_TX_Header+0x60>)
 80017ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017b0:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <Set_TX_Header+0x60>)
 80017b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017b8:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <Set_TX_Header+0x60>)
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <Set_TX_Header+0x60>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc90      	pop	{r4, r7}
 80017cc:	b004      	add	sp, #16
 80017ce:	4770      	bx	lr
 80017d0:	2400093c 	.word	0x2400093c

080017d4 <Set_Controller_Modes>:

void Set_Controller_Modes(Axis Axis, Control_Mode ControlMode, Input_Mode InputMode) {
 80017d4:	b084      	sub	sp, #16
 80017d6:	b5b0      	push	{r4, r5, r7, lr}
 80017d8:	b08c      	sub	sp, #48	; 0x30
 80017da:	af0c      	add	r7, sp, #48	; 0x30
 80017dc:	f107 0410 	add.w	r4, r7, #16
 80017e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Set_TX_Header(Axis, SET_CONTROLLER_MODES, 8, FDCAN_DATA_FRAME);
 80017e4:	2300      	movs	r3, #0
 80017e6:	930a      	str	r3, [sp, #40]	; 0x28
 80017e8:	2308      	movs	r3, #8
 80017ea:	9309      	str	r3, [sp, #36]	; 0x24
 80017ec:	230b      	movs	r3, #11
 80017ee:	9308      	str	r3, [sp, #32]
 80017f0:	466d      	mov	r5, sp
 80017f2:	f107 0420 	add.w	r4, r7, #32
 80017f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001802:	f107 0310 	add.w	r3, r7, #16
 8001806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001808:	f7ff ffb2 	bl	8001770 <Set_TX_Header>
    memcpy(TxData, &ControlMode, 4);
 800180c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001810:	2204      	movs	r2, #4
 8001812:	4619      	mov	r1, r3
 8001814:	480a      	ldr	r0, [pc, #40]	; (8001840 <Set_Controller_Modes+0x6c>)
 8001816:	f008 f879 	bl	800990c <memcpy>
    memcpy(TxData + 4, &InputMode, 4);
 800181a:	480a      	ldr	r0, [pc, #40]	; (8001844 <Set_Controller_Modes+0x70>)
 800181c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001820:	2204      	movs	r2, #4
 8001822:	4619      	mov	r1, r3
 8001824:	f008 f872 	bl	800990c <memcpy>
    HAL_FDCAN_AddMessageToTxFifoQ(Axis.hfdcan, &TxHeader, TxData);
 8001828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800182a:	4a05      	ldr	r2, [pc, #20]	; (8001840 <Set_Controller_Modes+0x6c>)
 800182c:	4906      	ldr	r1, [pc, #24]	; (8001848 <Set_Controller_Modes+0x74>)
 800182e:	4618      	mov	r0, r3
 8001830:	f001 fd78 	bl	8003324 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800183c:	b004      	add	sp, #16
 800183e:	4770      	bx	lr
 8001840:	24000008 	.word	0x24000008
 8001844:	2400000c 	.word	0x2400000c
 8001848:	2400093c 	.word	0x2400093c

0800184c <Set_Axis_Requested_State>:

void Set_Axis_Requested_State(Axis Axis, Axis_State state) {
 800184c:	b084      	sub	sp, #16
 800184e:	b5b0      	push	{r4, r5, r7, lr}
 8001850:	b08c      	sub	sp, #48	; 0x30
 8001852:	af0c      	add	r7, sp, #48	; 0x30
 8001854:	f107 0410 	add.w	r4, r7, #16
 8001858:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Set_TX_Header(Axis, SET_AXIS_REQUESTED_STATE, 4, FDCAN_DATA_FRAME);
 800185c:	2300      	movs	r3, #0
 800185e:	930a      	str	r3, [sp, #40]	; 0x28
 8001860:	2304      	movs	r3, #4
 8001862:	9309      	str	r3, [sp, #36]	; 0x24
 8001864:	2307      	movs	r3, #7
 8001866:	9308      	str	r3, [sp, #32]
 8001868:	466d      	mov	r5, sp
 800186a:	f107 0420 	add.w	r4, r7, #32
 800186e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001872:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001876:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001880:	f7ff ff76 	bl	8001770 <Set_TX_Header>
    memcpy(TxData, &state, 4);
 8001884:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001888:	2204      	movs	r2, #4
 800188a:	4619      	mov	r1, r3
 800188c:	4807      	ldr	r0, [pc, #28]	; (80018ac <Set_Axis_Requested_State+0x60>)
 800188e:	f008 f83d 	bl	800990c <memcpy>
    HAL_FDCAN_AddMessageToTxFifoQ(Axis.hfdcan, &TxHeader, TxData);
 8001892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001894:	4a05      	ldr	r2, [pc, #20]	; (80018ac <Set_Axis_Requested_State+0x60>)
 8001896:	4906      	ldr	r1, [pc, #24]	; (80018b0 <Set_Axis_Requested_State+0x64>)
 8001898:	4618      	mov	r0, r3
 800189a:	f001 fd43 	bl	8003324 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80018a6:	b004      	add	sp, #16
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	24000008 	.word	0x24000008
 80018b0:	2400093c 	.word	0x2400093c

080018b4 <Set_Input_Vel>:

void Set_Input_Vel(Axis Axis, float vel, float torqueff) {
 80018b4:	b084      	sub	sp, #16
 80018b6:	b5b0      	push	{r4, r5, r7, lr}
 80018b8:	b08e      	sub	sp, #56	; 0x38
 80018ba:	af0c      	add	r7, sp, #48	; 0x30
 80018bc:	f107 0418 	add.w	r4, r7, #24
 80018c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018c4:	ed87 0a01 	vstr	s0, [r7, #4]
 80018c8:	edc7 0a00 	vstr	s1, [r7]
    Set_TX_Header(Axis, SET_INPUT_VEL, 8, FDCAN_DATA_FRAME);
 80018cc:	2300      	movs	r3, #0
 80018ce:	930a      	str	r3, [sp, #40]	; 0x28
 80018d0:	2308      	movs	r3, #8
 80018d2:	9309      	str	r3, [sp, #36]	; 0x24
 80018d4:	230d      	movs	r3, #13
 80018d6:	9308      	str	r3, [sp, #32]
 80018d8:	466d      	mov	r5, sp
 80018da:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80018de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018ea:	f107 0318 	add.w	r3, r7, #24
 80018ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f0:	f7ff ff3e 	bl	8001770 <Set_TX_Header>
 80018f4:	687b      	ldr	r3, [r7, #4]
    memcpy(TxData, &vel, 4);
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <Set_Input_Vel+0x68>)
 80018f8:	6013      	str	r3, [r2, #0]
    memcpy(TxData + 4, &torqueff, 4);
 80018fa:	4a09      	ldr	r2, [pc, #36]	; (8001920 <Set_Input_Vel+0x6c>)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6013      	str	r3, [r2, #0]
    HAL_FDCAN_AddMessageToTxFifoQ(Axis.hfdcan, &TxHeader, TxData);
 8001900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001902:	4a06      	ldr	r2, [pc, #24]	; (800191c <Set_Input_Vel+0x68>)
 8001904:	4907      	ldr	r1, [pc, #28]	; (8001924 <Set_Input_Vel+0x70>)
 8001906:	4618      	mov	r0, r3
 8001908:	f001 fd0c 	bl	8003324 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001916:	b004      	add	sp, #16
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	24000008 	.word	0x24000008
 8001920:	2400000c 	.word	0x2400000c
 8001924:	2400093c 	.word	0x2400093c

08001928 <ODrive_RX_CallBack>:
void Clear_Errors(Axis Axis) {
    Set_TX_Header(Axis, CLEAR_ERRORS, 0, FDCAN_DATA_FRAME);
    HAL_FDCAN_AddMessageToTxFifoQ(Axis.hfdcan, &TxHeader, TxData);
}

void ODrive_RX_CallBack(Axis *AXIS) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    if (HAL_FDCAN_GetRxMessage(AXIS->hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <ODrive_RX_CallBack+0x88>)
 8001936:	4a1f      	ldr	r2, [pc, #124]	; (80019b4 <ODrive_RX_CallBack+0x8c>)
 8001938:	2140      	movs	r1, #64	; 0x40
 800193a:	f001 fd4f 	bl	80033dc <HAL_FDCAN_GetRxMessage>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d130      	bne.n	80019a6 <ODrive_RX_CallBack+0x7e>
        uint32_t ID = RxHeader.Identifier;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <ODrive_RX_CallBack+0x8c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	617b      	str	r3, [r7, #20]
        uint32_t NODE_ID = (ID >> 5);
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	095b      	lsrs	r3, r3, #5
 800194e:	613b      	str	r3, [r7, #16]
        uint32_t CMD_ID = (ID & 0x1F);
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 031f 	and.w	r3, r3, #31
 8001956:	60fb      	str	r3, [r7, #12]

        if (NODE_ID == AXIS->AXIS_ID) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	429a      	cmp	r2, r3
 8001960:	d121      	bne.n	80019a6 <ODrive_RX_CallBack+0x7e>
            switch (CMD_ID) {
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d003      	beq.n	8001970 <ODrive_RX_CallBack+0x48>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b09      	cmp	r3, #9
 800196c:	d010      	beq.n	8001990 <ODrive_RX_CallBack+0x68>
                    memcpy(&AXIS->AXIS_Encoder_Vel, &RxData[4], 4);
                    break;
            }
        }
    }
}
 800196e:	e01b      	b.n	80019a8 <ODrive_RX_CallBack+0x80>
                    memcpy(&AXIS->AXIS_Error, &RxData[0], 4);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3324      	adds	r3, #36	; 0x24
 8001974:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <ODrive_RX_CallBack+0x88>)
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	601a      	str	r2, [r3, #0]
                    AXIS->AXIS_Current_State = RxData[4];
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <ODrive_RX_CallBack+0x88>)
 800197c:	791a      	ldrb	r2, [r3, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                    AXIS->Controller_Status = RxData[5];
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <ODrive_RX_CallBack+0x88>)
 8001986:	795a      	ldrb	r2, [r3, #5]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                    break;
 800198e:	e00b      	b.n	80019a8 <ODrive_RX_CallBack+0x80>
                    memcpy(&AXIS->AXIS_Encoder_Pos, &RxData[0], 4);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3304      	adds	r3, #4
 8001994:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <ODrive_RX_CallBack+0x88>)
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	601a      	str	r2, [r3, #0]
                    memcpy(&AXIS->AXIS_Encoder_Vel, &RxData[4], 4);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3308      	adds	r3, #8
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <ODrive_RX_CallBack+0x88>)
 80019a0:	6852      	ldr	r2, [r2, #4]
 80019a2:	601a      	str	r2, [r3, #0]
                    break;
 80019a4:	e000      	b.n	80019a8 <ODrive_RX_CallBack+0x80>
        }
 80019a6:	bf00      	nop
}
 80019a8:	bf00      	nop
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	24000988 	.word	0x24000988
 80019b4:	24000960 	.word	0x24000960

080019b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_MspInit+0x30>)
 80019c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019c4:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_MspInit+0x30>)
 80019c6:	f043 0302 	orr.w	r3, r3, #2
 80019ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_MspInit+0x30>)
 80019d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	58024400 	.word	0x58024400

080019ec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08e      	sub	sp, #56	; 0x38
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a59      	ldr	r2, [pc, #356]	; (8001b70 <HAL_ETH_MspInit+0x184>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	f040 80ab 	bne.w	8001b66 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001a10:	4b58      	ldr	r3, [pc, #352]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001a12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a16:	4a57      	ldr	r2, [pc, #348]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a1c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a20:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001a22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a2a:	623b      	str	r3, [r7, #32]
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001a2e:	4b51      	ldr	r3, [pc, #324]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001a30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a34:	4a4f      	ldr	r2, [pc, #316]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a3e:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001a40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001a4c:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001a4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a52:	4a48      	ldr	r2, [pc, #288]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a5c:	4b45      	ldr	r3, [pc, #276]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001a5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6a:	4b42      	ldr	r3, [pc, #264]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a70:	4a40      	ldr	r2, [pc, #256]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8e:	4a39      	ldr	r2, [pc, #228]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aac:	4a31      	ldr	r2, [pc, #196]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001aae:	f043 0302 	orr.w	r3, r3, #2
 8001ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab6:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aca:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_ETH_MspInit+0x188>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001ae2:	2332      	movs	r3, #50	; 0x32
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001af2:	230b      	movs	r3, #11
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afa:	4619      	mov	r1, r3
 8001afc:	481e      	ldr	r0, [pc, #120]	; (8001b78 <HAL_ETH_MspInit+0x18c>)
 8001afe:	f002 fb63 	bl	80041c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001b02:	2386      	movs	r3, #134	; 0x86
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b12:	230b      	movs	r3, #11
 8001b14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4817      	ldr	r0, [pc, #92]	; (8001b7c <HAL_ETH_MspInit+0x190>)
 8001b1e:	f002 fb53 	bl	80041c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b34:	230b      	movs	r3, #11
 8001b36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4810      	ldr	r0, [pc, #64]	; (8001b80 <HAL_ETH_MspInit+0x194>)
 8001b40:	f002 fb42 	bl	80041c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001b44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b56:	230b      	movs	r3, #11
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4808      	ldr	r0, [pc, #32]	; (8001b84 <HAL_ETH_MspInit+0x198>)
 8001b62:	f002 fb31 	bl	80041c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3738      	adds	r7, #56	; 0x38
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40028000 	.word	0x40028000
 8001b74:	58024400 	.word	0x58024400
 8001b78:	58020800 	.word	0x58020800
 8001b7c:	58020000 	.word	0x58020000
 8001b80:	58020400 	.word	0x58020400
 8001b84:	58021800 	.word	0x58021800

08001b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a2a      	ldr	r2, [pc, #168]	; (8001c50 <HAL_TIM_Base_MspInit+0xc8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d14e      	bne.n	8001c48 <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001baa:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_TIM_Base_MspInit+0xcc>)
 8001bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bb0:	4a28      	ldr	r2, [pc, #160]	; (8001c54 <HAL_TIM_Base_MspInit+0xcc>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <HAL_TIM_Base_MspInit+0xcc>)
 8001bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HAL_TIM_Base_MspInit+0xcc>)
 8001bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bce:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <HAL_TIM_Base_MspInit+0xcc>)
 8001bd0:	f043 0310 	orr.w	r3, r3, #16
 8001bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_TIM_Base_MspInit+0xcc>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8001be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	4619      	mov	r1, r3
 8001c02:	4815      	ldr	r0, [pc, #84]	; (8001c58 <HAL_TIM_Base_MspInit+0xd0>)
 8001c04:	f002 fae0 	bl	80041c8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2018      	movs	r0, #24
 8001c0e:	f000 fc84 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001c12:	2018      	movs	r0, #24
 8001c14:	f000 fc9b 	bl	800254e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	2019      	movs	r0, #25
 8001c1e:	f000 fc7c 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001c22:	2019      	movs	r0, #25
 8001c24:	f000 fc93 	bl	800254e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	201a      	movs	r0, #26
 8001c2e:	f000 fc74 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001c32:	201a      	movs	r0, #26
 8001c34:	f000 fc8b 	bl	800254e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	201b      	movs	r0, #27
 8001c3e:	f000 fc6c 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c42:	201b      	movs	r0, #27
 8001c44:	f000 fc83 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c48:	bf00      	nop
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40010000 	.word	0x40010000
 8001c54:	58024400 	.word	0x58024400
 8001c58:	58021000 	.word	0x58021000

08001c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b0b8      	sub	sp, #224	; 0xe0
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	22bc      	movs	r2, #188	; 0xbc
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f007 fe53 	bl	8009928 <memset>
  if(huart->Instance==USART3)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a25      	ldr	r2, [pc, #148]	; (8001d1c <HAL_UART_MspInit+0xc0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d142      	bne.n	8001d12 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c96:	f107 0310 	add.w	r3, r7, #16
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 fdf8 	bl	8005890 <HAL_RCCEx_PeriphCLKConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ca6:	f7ff fb2d 	bl	8001304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_UART_MspInit+0xc4>)
 8001cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cb0:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_UART_MspInit+0xc4>)
 8001cb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_UART_MspInit+0xc4>)
 8001cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_UART_MspInit+0xc4>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cce:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <HAL_UART_MspInit+0xc4>)
 8001cd0:	f043 0308 	orr.w	r3, r3, #8
 8001cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_UART_MspInit+0xc4>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001ce6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d00:	2307      	movs	r3, #7
 8001d02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d06:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <HAL_UART_MspInit+0xc8>)
 8001d0e:	f002 fa5b 	bl	80041c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	37e0      	adds	r7, #224	; 0xe0
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40004800 	.word	0x40004800
 8001d20:	58024400 	.word	0x58024400
 8001d24:	58020c00 	.word	0x58020c00

08001d28 <HAL_FDCAN_MspInit>:
  /* USER CODE END USART3_MspDeInit 1 */
  }

}
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0b8      	sub	sp, #224	; 0xe0
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	22bc      	movs	r2, #188	; 0xbc
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f007 fded 	bl	8009928 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a2f      	ldr	r2, [pc, #188]	; (8001e10 <HAL_FDCAN_MspInit+0xe8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d157      	bne.n	8001e08 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001d5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d62:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f003 fd91 	bl	8005890 <HAL_RCCEx_PeriphCLKConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001d74:	f7ff fac6 	bl	8001304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_FDCAN_MspInit+0xec>)
 8001d7a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d7e:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <HAL_FDCAN_MspInit+0xec>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_FDCAN_MspInit+0xec>)
 8001d8a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d96:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <HAL_FDCAN_MspInit+0xec>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <HAL_FDCAN_MspInit+0xec>)
 8001d9e:	f043 0308 	orr.w	r3, r3, #8
 8001da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da6:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <HAL_FDCAN_MspInit+0xec>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin;
 8001db4:	2301      	movs	r3, #1
 8001db6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001dcc:	2309      	movs	r3, #9
 8001dce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(FDCAN1_RX_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480f      	ldr	r0, [pc, #60]	; (8001e18 <HAL_FDCAN_MspInit+0xf0>)
 8001dda:	f002 f9f5 	bl	80041c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FDCAN1_TX_Pin;
 8001dde:	2302      	movs	r3, #2
 8001de0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001df6:	2309      	movs	r3, #9
 8001df8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(FDCAN1_TX_GPIO_Port, &GPIO_InitStruct);
 8001dfc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e00:	4619      	mov	r1, r3
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <HAL_FDCAN_MspInit+0xf0>)
 8001e04:	f002 f9e0 	bl	80041c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001e08:	bf00      	nop
 8001e0a:	37e0      	adds	r7, #224	; 0xe0
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	4000a000 	.word	0x4000a000
 8001e14:	58024400 	.word	0x58024400
 8001e18:	58020c00 	.word	0x58020c00

08001e1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b0b8      	sub	sp, #224	; 0xe0
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	22bc      	movs	r2, #188	; 0xbc
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f007 fd73 	bl	8009928 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a2f      	ldr	r2, [pc, #188]	; (8001f04 <HAL_PCD_MspInit+0xe8>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d156      	bne.n	8001efa <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e50:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001e52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f003 fd16 	bl	8005890 <HAL_RCCEx_PeriphCLKConfig>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001e6a:	f7ff fa4b 	bl	8001304 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001e6e:	f002 fd45 	bl	80048fc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <HAL_PCD_MspInit+0xec>)
 8001e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e78:	4a23      	ldr	r2, [pc, #140]	; (8001f08 <HAL_PCD_MspInit+0xec>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <HAL_PCD_MspInit+0xec>)
 8001e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001e90:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001e94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001eaa:	230a      	movs	r3, #10
 8001eac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4815      	ldr	r0, [pc, #84]	; (8001f0c <HAL_PCD_MspInit+0xf0>)
 8001eb8:	f002 f986 	bl	80041c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480d      	ldr	r0, [pc, #52]	; (8001f0c <HAL_PCD_MspInit+0xf0>)
 8001ed8:	f002 f976 	bl	80041c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_PCD_MspInit+0xec>)
 8001ede:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_PCD_MspInit+0xec>)
 8001ee4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ee8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_PCD_MspInit+0xec>)
 8001eee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001efa:	bf00      	nop
 8001efc:	37e0      	adds	r7, #224	; 0xe0
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40080000 	.word	0x40080000
 8001f08:	58024400 	.word	0x58024400
 8001f0c:	58020000 	.word	0x58020000

08001f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <NMI_Handler+0x4>

08001f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <HardFault_Handler+0x4>

08001f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <MemManage_Handler+0x4>

08001f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <BusFault_Handler+0x4>

08001f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <UsageFault_Handler+0x4>

08001f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f5c:	f000 f99e 	bl	800229c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <TIM1_BRK_IRQHandler+0x10>)
 8001f6a:	f005 fa7b 	bl	8007464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	24000240 	.word	0x24000240

08001f78 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
  // Update interrupt handling
  if (__HAL_TIM_GET_FLAG(sr04.echo_htim, TIM_FLAG_UPDATE) != RESET)
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <TIM1_UP_IRQHandler+0x3c>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10d      	bne.n	8001fa8 <TIM1_UP_IRQHandler+0x30>
  {
      if (__HAL_TIM_GET_IT_SOURCE(sr04.echo_htim, TIM_IT_UPDATE) != RESET)
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <TIM1_UP_IRQHandler+0x3c>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d105      	bne.n	8001fa8 <TIM1_UP_IRQHandler+0x30>
      {
          sr04.tim_update_count++;
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <TIM1_UP_IRQHandler+0x3c>)
 8001f9e:	8c1b      	ldrh	r3, [r3, #32]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <TIM1_UP_IRQHandler+0x3c>)
 8001fa6:	841a      	strh	r2, [r3, #32]
      }
  }
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <TIM1_UP_IRQHandler+0x40>)
 8001faa:	f005 fa5b 	bl	8007464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	24000828 	.word	0x24000828
 8001fb8:	24000240 	.word	0x24000240

08001fbc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <TIM1_TRG_COM_IRQHandler+0x10>)
 8001fc2:	f005 fa4f 	bl	8007464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	24000240 	.word	0x24000240

08001fd0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
  // Capture interrupt handling
  if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC1) != RESET)
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <TIM1_CC_IRQHandler+0x30>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d109      	bne.n	8001ff6 <TIM1_CC_IRQHandler+0x26>
  {
      if (__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_CC1) != RESET)
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <TIM1_CC_IRQHandler+0x30>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d102      	bne.n	8001ff6 <TIM1_CC_IRQHandler+0x26>
      {
    	  //printf(">> Captura recibida\r\n");
          sr04_read_distance(&sr04);
 8001ff0:	4804      	ldr	r0, [pc, #16]	; (8002004 <TIM1_CC_IRQHandler+0x34>)
 8001ff2:	f7ff fa25 	bl	8001440 <sr04_read_distance>
      }
  }
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ff6:	4802      	ldr	r0, [pc, #8]	; (8002000 <TIM1_CC_IRQHandler+0x30>)
 8001ff8:	f005 fa34 	bl	8007464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	24000240 	.word	0x24000240
 8002004:	24000828 	.word	0x24000828

08002008 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
    HAL_FDCAN_IRQHandler(&hfdcan1);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <FDCAN1_IT0_IRQHandler+0x10>)
 800200e:	f001 fbcd 	bl	80037ac <HAL_FDCAN_IRQHandler>
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2400087c 	.word	0x2400087c

0800201c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	e00a      	b.n	8002044 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800202e:	f3af 8000 	nop.w
 8002032:	4601      	mov	r1, r0
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	60ba      	str	r2, [r7, #8]
 800203a:	b2ca      	uxtb	r2, r1
 800203c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3301      	adds	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	dbf0      	blt.n	800202e <_read+0x12>
	}

return len;
 800204c:	687b      	ldr	r3, [r7, #4]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	e009      	b.n	800207c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	60ba      	str	r2, [r7, #8]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff f94d 	bl	8001310 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	dbf1      	blt.n	8002068 <_write+0x12>
	}
	return len;
 8002084:	687b      	ldr	r3, [r7, #4]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <_close>:

int _close(int file)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
	return -1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b6:	605a      	str	r2, [r3, #4]
	return 0;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <_isatty>:

int _isatty(int file)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
	return 1;
 80020ce:	2301      	movs	r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
	return 0;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f007 fbc6 	bl	80098b8 <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	24080000 	.word	0x24080000
 8002158:	00000400 	.word	0x00000400
 800215c:	240009b8 	.word	0x240009b8
 8002160:	240009d0 	.word	0x240009d0

08002164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800219c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002168:	f7fe fa38 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800216c:	480c      	ldr	r0, [pc, #48]	; (80021a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800216e:	490d      	ldr	r1, [pc, #52]	; (80021a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002174:	e002      	b.n	800217c <LoopCopyDataInit>

08002176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217a:	3304      	adds	r3, #4

0800217c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800217c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002180:	d3f9      	bcc.n	8002176 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002182:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002184:	4c0a      	ldr	r4, [pc, #40]	; (80021b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002188:	e001      	b.n	800218e <LoopFillZerobss>

0800218a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800218c:	3204      	adds	r2, #4

0800218e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002190:	d3fb      	bcc.n	800218a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002192:	f007 fb97 	bl	80098c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002196:	f7fe fc31 	bl	80009fc <main>
  bx  lr
 800219a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800219c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021a4:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80021a8:	0800a468 	.word	0x0800a468
  ldr r2, =_sbss
 80021ac:	2400013c 	.word	0x2400013c
  ldr r4, =_ebss
 80021b0:	240009d0 	.word	0x240009d0

080021b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC3_IRQHandler>
	...

080021b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021be:	2003      	movs	r0, #3
 80021c0:	f000 f9a0 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021c4:	f003 f98e 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_Init+0x68>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	4913      	ldr	r1, [pc, #76]	; (8002224 <HAL_Init+0x6c>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
 80021e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_Init+0x68>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <HAL_Init+0x6c>)
 80021ec:	5cd3      	ldrb	r3, [r2, r3]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
 80021f8:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <HAL_Init+0x70>)
 80021fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021fc:	4a0b      	ldr	r2, [pc, #44]	; (800222c <HAL_Init+0x74>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002202:	2000      	movs	r0, #0
 8002204:	f000 f814 	bl	8002230 <HAL_InitTick>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e002      	b.n	8002218 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002212:	f7ff fbd1 	bl	80019b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	58024400 	.word	0x58024400
 8002224:	0800a3ac 	.word	0x0800a3ac
 8002228:	24000004 	.word	0x24000004
 800222c:	24000000 	.word	0x24000000

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_InitTick+0x60>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e021      	b.n	8002288 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_InitTick+0x64>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_InitTick+0x60>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002252:	fbb3 f3f1 	udiv	r3, r3, r1
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f985 	bl	800256a <HAL_SYSTICK_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e00e      	b.n	8002288 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b0f      	cmp	r3, #15
 800226e:	d80a      	bhi.n	8002286 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002270:	2200      	movs	r2, #0
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
 8002278:	f000 f94f 	bl	800251a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800227c:	4a06      	ldr	r2, [pc, #24]	; (8002298 <HAL_InitTick+0x68>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	24000014 	.word	0x24000014
 8002294:	24000000 	.word	0x24000000
 8002298:	24000010 	.word	0x24000010

0800229c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_IncTick+0x20>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_IncTick+0x24>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <HAL_IncTick+0x24>)
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	24000014 	.word	0x24000014
 80022c0:	240009bc 	.word	0x240009bc

080022c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return uwTick;
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <HAL_GetTick+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	240009bc 	.word	0x240009bc

080022dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff ffee 	bl	80022c4 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d005      	beq.n	8002302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_Delay+0x44>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002302:	bf00      	nop
 8002304:	f7ff ffde 	bl	80022c4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	429a      	cmp	r2, r3
 8002312:	d8f7      	bhi.n	8002304 <HAL_Delay+0x28>
  {
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	24000014 	.word	0x24000014

08002324 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <HAL_GetREVID+0x14>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0c1b      	lsrs	r3, r3, #16
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	5c001000 	.word	0x5c001000

0800233c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800234c:	4904      	ldr	r1, [pc, #16]	; (8002360 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	58000400 	.word	0x58000400

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	4313      	orrs	r3, r2
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00
 80023a8:	05fa0000 	.word	0x05fa0000

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4907      	ldr	r1, [pc, #28]	; (8002400 <__NVIC_EnableIRQ+0x38>)
 80023e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <SysTick_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024de:	210f      	movs	r1, #15
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f7ff ff8e 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <SysTick_Config+0x40>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <SysTick_Config+0x40>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff29 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff40 	bl	80023ac <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff90 	bl	8002458 <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5f 	bl	8002404 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff33 	bl	80023c8 <__NVIC_EnableIRQ>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffa4 	bl	80024c0 <SysTick_Config>
 8002578:	4603      	mov	r3, r0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0cf      	b.n	8002736 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259c:	2b00      	cmp	r3, #0
 800259e:	d106      	bne.n	80025ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2223      	movs	r2, #35	; 0x23
 80025a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff fa1f 	bl	80019ec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ae:	4b64      	ldr	r3, [pc, #400]	; (8002740 <HAL_ETH_Init+0x1bc>)
 80025b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025b4:	4a62      	ldr	r2, [pc, #392]	; (8002740 <HAL_ETH_Init+0x1bc>)
 80025b6:	f043 0302 	orr.w	r3, r3, #2
 80025ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80025be:	4b60      	ldr	r3, [pc, #384]	; (8002740 <HAL_ETH_Init+0x1bc>)
 80025c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7a1b      	ldrb	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d103      	bne.n	80025dc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7ff feb1 	bl	800233c <HAL_SYSCFG_ETHInterfaceSelect>
 80025da:	e003      	b.n	80025e4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80025dc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80025e0:	f7ff feac 	bl	800233c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80025e4:	4b57      	ldr	r3, [pc, #348]	; (8002744 <HAL_ETH_Init+0x1c0>)
 80025e6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002600:	f7ff fe60 	bl	80022c4 <HAL_GetTick>
 8002604:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002606:	e011      	b.n	800262c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002608:	f7ff fe5c 	bl	80022c4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002616:	d909      	bls.n	800262c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2204      	movs	r2, #4
 800261c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	22e0      	movs	r2, #224	; 0xe0
 8002624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e084      	b.n	8002736 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1e4      	bne.n	8002608 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f886 	bl	8002750 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002644:	f003 f8c8 	bl	80057d8 <HAL_RCC_GetHCLKFreq>
 8002648:	4603      	mov	r3, r0
 800264a:	4a3f      	ldr	r2, [pc, #252]	; (8002748 <HAL_ETH_Init+0x1c4>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	0c9a      	lsrs	r2, r3, #18
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3a01      	subs	r2, #1
 8002658:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fa71 	bl	8002b44 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800266a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800266e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800267a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800267e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	22e0      	movs	r2, #224	; 0xe0
 800269a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e049      	b.n	8002736 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026aa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80026ae:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_ETH_Init+0x1c8>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6952      	ldr	r2, [r2, #20]
 80026b6:	0051      	lsls	r1, r2, #1
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	430b      	orrs	r3, r1
 80026be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026c2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fad9 	bl	8002c7e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fb1f 	bl	8002d10 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	3305      	adds	r3, #5
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	021a      	lsls	r2, r3, #8
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	3304      	adds	r3, #4
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	3303      	adds	r3, #3
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	061a      	lsls	r2, r3, #24
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	3302      	adds	r3, #2
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	041b      	lsls	r3, r3, #16
 8002704:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	3301      	adds	r3, #1
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002710:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800271e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002720:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2210      	movs	r2, #16
 8002730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	58024400 	.word	0x58024400
 8002744:	58000400 	.word	0x58000400
 8002748:	431bde83 	.word	0x431bde83
 800274c:	ffff8001 	.word	0xffff8001

08002750 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002760:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002768:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800276a:	f003 f835 	bl	80057d8 <HAL_RCC_GetHCLKFreq>
 800276e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d908      	bls.n	800278a <HAL_ETH_SetMDIOClockRange+0x3a>
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d804      	bhi.n	800278a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	e027      	b.n	80027da <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d908      	bls.n	80027a4 <HAL_ETH_SetMDIOClockRange+0x54>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d204      	bcs.n	80027a4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e01a      	b.n	80027da <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d303      	bcc.n	80027b4 <HAL_ETH_SetMDIOClockRange+0x64>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d911      	bls.n	80027d8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4a10      	ldr	r2, [pc, #64]	; (80027f8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d908      	bls.n	80027ce <HAL_ETH_SetMDIOClockRange+0x7e>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <HAL_ETH_SetMDIOClockRange+0xac>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d804      	bhi.n	80027ce <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	e005      	b.n	80027da <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	e000      	b.n	80027da <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80027d8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	01312cff 	.word	0x01312cff
 80027f0:	02160ebf 	.word	0x02160ebf
 80027f4:	03938700 	.word	0x03938700
 80027f8:	05f5e0ff 	.word	0x05f5e0ff
 80027fc:	08f0d17f 	.word	0x08f0d17f

08002800 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002812:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	791b      	ldrb	r3, [r3, #4]
 8002818:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800281a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	7b1b      	ldrb	r3, [r3, #12]
 8002820:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002822:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	7b5b      	ldrb	r3, [r3, #13]
 8002828:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800282a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	7b9b      	ldrb	r3, [r3, #14]
 8002830:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002832:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	7bdb      	ldrb	r3, [r3, #15]
 8002838:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800283a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	7c12      	ldrb	r2, [r2, #16]
 8002840:	2a00      	cmp	r2, #0
 8002842:	d102      	bne.n	800284a <ETH_SetMACConfig+0x4a>
 8002844:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002848:	e000      	b.n	800284c <ETH_SetMACConfig+0x4c>
 800284a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800284c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	7c52      	ldrb	r2, [r2, #17]
 8002852:	2a00      	cmp	r2, #0
 8002854:	d102      	bne.n	800285c <ETH_SetMACConfig+0x5c>
 8002856:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800285a:	e000      	b.n	800285e <ETH_SetMACConfig+0x5e>
 800285c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800285e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	7c9b      	ldrb	r3, [r3, #18]
 8002864:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002866:	431a      	orrs	r2, r3
               macconf->Speed |
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800286c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002872:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	7f1b      	ldrb	r3, [r3, #28]
 8002878:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800287a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	7f5b      	ldrb	r3, [r3, #29]
 8002880:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002882:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	7f92      	ldrb	r2, [r2, #30]
 8002888:	2a00      	cmp	r2, #0
 800288a:	d102      	bne.n	8002892 <ETH_SetMACConfig+0x92>
 800288c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002890:	e000      	b.n	8002894 <ETH_SetMACConfig+0x94>
 8002892:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002894:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	7fdb      	ldrb	r3, [r3, #31]
 800289a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800289c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80028a4:	2a00      	cmp	r2, #0
 80028a6:	d102      	bne.n	80028ae <ETH_SetMACConfig+0xae>
 80028a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ac:	e000      	b.n	80028b0 <ETH_SetMACConfig+0xb0>
 80028ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80028b0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80028b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028be:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80028c0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b56      	ldr	r3, [pc, #344]	; (8002a2c <ETH_SetMACConfig+0x22c>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	430b      	orrs	r3, r1
 80028dc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028ea:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80028ec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028f4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80028f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80028fe:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002900:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002908:	2a00      	cmp	r2, #0
 800290a:	d102      	bne.n	8002912 <ETH_SetMACConfig+0x112>
 800290c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002910:	e000      	b.n	8002914 <ETH_SetMACConfig+0x114>
 8002912:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002914:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <ETH_SetMACConfig+0x230>)
 8002926:	4013      	ands	r3, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	68f9      	ldr	r1, [r7, #12]
 800292e:	430b      	orrs	r3, r1
 8002930:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002938:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <ETH_SetMACConfig+0x234>)
 800294a:	4013      	ands	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	68f9      	ldr	r1, [r7, #12]
 8002952:	430b      	orrs	r3, r1
 8002954:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800295c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002962:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800296a:	2a00      	cmp	r2, #0
 800296c:	d101      	bne.n	8002972 <ETH_SetMACConfig+0x172>
 800296e:	2280      	movs	r2, #128	; 0x80
 8002970:	e000      	b.n	8002974 <ETH_SetMACConfig+0x174>
 8002972:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002974:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002986:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800298a:	4013      	ands	r3, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	68f9      	ldr	r1, [r7, #12]
 8002992:	430b      	orrs	r3, r1
 8002994:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800299c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80029a4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	f023 0103 	bic.w	r1, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	430a      	orrs	r2, r1
 80029be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80029ca:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80029e6:	2a00      	cmp	r2, #0
 80029e8:	d101      	bne.n	80029ee <ETH_SetMACConfig+0x1ee>
 80029ea:	2240      	movs	r2, #64	; 0x40
 80029ec:	e000      	b.n	80029f0 <ETH_SetMACConfig+0x1f0>
 80029ee:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80029f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80029f8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80029fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002a02:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002a10:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	00048083 	.word	0x00048083
 8002a30:	c0f88000 	.word	0xc0f88000
 8002a34:	fffffef0 	.word	0xfffffef0

08002a38 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <ETH_SetDMAConfig+0xf8>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	6811      	ldr	r1, [r2, #0]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a5e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	791b      	ldrb	r3, [r3, #4]
 8002a64:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a6a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	7b1b      	ldrb	r3, [r3, #12]
 8002a70:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	4b2c      	ldr	r3, [pc, #176]	; (8002b34 <ETH_SetDMAConfig+0xfc>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	68f9      	ldr	r1, [r7, #12]
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a90:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	7b5b      	ldrb	r3, [r3, #13]
 8002a96:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <ETH_SetDMAConfig+0x100>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	68f9      	ldr	r1, [r7, #12]
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002abc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	7d1b      	ldrb	r3, [r3, #20]
 8002ac8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002aca:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	7f5b      	ldrb	r3, [r3, #29]
 8002ad0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ade:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <ETH_SetDMAConfig+0x104>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	68f9      	ldr	r1, [r7, #12]
 8002aec:	430b      	orrs	r3, r1
 8002aee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002af2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	7f1b      	ldrb	r3, [r3, #28]
 8002afa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <ETH_SetDMAConfig+0x108>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	68f9      	ldr	r1, [r7, #12]
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b20:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	ffff87fd 	.word	0xffff87fd
 8002b34:	ffff2ffe 	.word	0xffff2ffe
 8002b38:	fffec000 	.word	0xfffec000
 8002b3c:	ffc0efef 	.word	0xffc0efef
 8002b40:	7fc0ffff 	.word	0x7fc0ffff

08002b44 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b0a4      	sub	sp, #144	; 0x90
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b52:	2300      	movs	r3, #0
 8002b54:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b84:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002b9c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002ba0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002bee:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002bf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bf8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002c00:	2302      	movs	r3, #2
 8002c02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fde6 	bl	8002800 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c34:	2301      	movs	r3, #1
 8002c36:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c52:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c5c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002c64:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c6a:	f107 0308 	add.w	r3, r7, #8
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff fee1 	bl	8002a38 <ETH_SetDMAConfig>
}
 8002c76:	bf00      	nop
 8002c78:	3790      	adds	r7, #144	; 0x90
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b085      	sub	sp, #20
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	e01d      	b.n	8002cc8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68d9      	ldr	r1, [r3, #12]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	3206      	adds	r2, #6
 8002cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d9de      	bls.n	8002c8c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2303      	movs	r3, #3
 8002ce0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e023      	b.n	8002d66 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6919      	ldr	r1, [r3, #16]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4613      	mov	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4413      	add	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	440b      	add	r3, r1
 8002d2e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2200      	movs	r2, #0
 8002d46:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2200      	movs	r2, #0
 8002d52:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	3212      	adds	r2, #18
 8002d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3301      	adds	r3, #1
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d9d8      	bls.n	8002d1e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d92:	461a      	mov	r2, r3
 8002d94:	2303      	movs	r3, #3
 8002d96:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dba:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b098      	sub	sp, #96	; 0x60
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002dd4:	4a84      	ldr	r2, [pc, #528]	; (8002fe8 <HAL_FDCAN_Init+0x21c>)
 8002dd6:	f107 030c 	add.w	r3, r7, #12
 8002dda:	4611      	mov	r1, r2
 8002ddc:	224c      	movs	r2, #76	; 0x4c
 8002dde:	4618      	mov	r0, r3
 8002de0:	f006 fd94 	bl	800990c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e1c6      	b.n	800317c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a7e      	ldr	r2, [pc, #504]	; (8002fec <HAL_FDCAN_Init+0x220>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d106      	bne.n	8002e06 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e00:	461a      	mov	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe ff84 	bl	8001d28 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0210 	bic.w	r2, r2, #16
 8002e2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e30:	f7ff fa48 	bl	80022c4 <HAL_GetTick>
 8002e34:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e36:	e014      	b.n	8002e62 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e38:	f7ff fa44 	bl	80022c4 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b0a      	cmp	r3, #10
 8002e44:	d90d      	bls.n	8002e62 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e4c:	f043 0201 	orr.w	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2203      	movs	r2, #3
 8002e5a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e18c      	b.n	800317c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d0e3      	beq.n	8002e38 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e80:	f7ff fa20 	bl	80022c4 <HAL_GetTick>
 8002e84:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e86:	e014      	b.n	8002eb2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e88:	f7ff fa1c 	bl	80022c4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b0a      	cmp	r3, #10
 8002e94:	d90d      	bls.n	8002eb2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e164      	b.n	800317c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0e3      	beq.n	8002e88 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0202 	orr.w	r2, r2, #2
 8002ece:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7c1b      	ldrb	r3, [r3, #16]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d108      	bne.n	8002eea <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee6:	619a      	str	r2, [r3, #24]
 8002ee8:	e007      	b.n	8002efa <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ef8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	7c5b      	ldrb	r3, [r3, #17]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d108      	bne.n	8002f14 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f10:	619a      	str	r2, [r3, #24]
 8002f12:	e007      	b.n	8002f24 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f22:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	7c9b      	ldrb	r3, [r3, #18]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d108      	bne.n	8002f3e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f3a:	619a      	str	r2, [r3, #24]
 8002f3c:	e007      	b.n	8002f4e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699a      	ldr	r2, [r3, #24]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f4c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002f72:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0210 	bic.w	r2, r2, #16
 8002f82:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d108      	bne.n	8002f9e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0204 	orr.w	r2, r2, #4
 8002f9a:	619a      	str	r2, [r3, #24]
 8002f9c:	e030      	b.n	8003000 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d02c      	beq.n	8003000 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d020      	beq.n	8002ff0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699a      	ldr	r2, [r3, #24]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fbc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0210 	orr.w	r2, r2, #16
 8002fcc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d114      	bne.n	8003000 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0220 	orr.w	r2, r2, #32
 8002fe4:	619a      	str	r2, [r3, #24]
 8002fe6:	e00b      	b.n	8003000 <HAL_FDCAN_Init+0x234>
 8002fe8:	0800a360 	.word	0x0800a360
 8002fec:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0220 	orr.w	r2, r2, #32
 8002ffe:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	3b01      	subs	r3, #1
 8003006:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	3b01      	subs	r3, #1
 800300e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003010:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003018:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	3b01      	subs	r3, #1
 8003022:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003028:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800302a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003034:	d115      	bne.n	8003062 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	3b01      	subs	r3, #1
 8003042:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003044:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	3b01      	subs	r3, #1
 800304c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800304e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	3b01      	subs	r3, #1
 8003058:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800305e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003060:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003088:	4413      	add	r3, r2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d011      	beq.n	80030b2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003096:	f023 0107 	bic.w	r1, r3, #7
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	3360      	adds	r3, #96	; 0x60
 80030a2:	443b      	add	r3, r7
 80030a4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d011      	beq.n	80030de <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030c2:	f023 0107 	bic.w	r1, r3, #7
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	3360      	adds	r3, #96	; 0x60
 80030ce:	443b      	add	r3, r7
 80030d0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d012      	beq.n	800310c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030ee:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	3360      	adds	r3, #96	; 0x60
 80030fa:	443b      	add	r3, r7
 80030fc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003100:	011a      	lsls	r2, r3, #4
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003110:	2b00      	cmp	r3, #0
 8003112:	d012      	beq.n	800313a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800311c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	3360      	adds	r3, #96	; 0x60
 8003128:	443b      	add	r3, r7
 800312a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800312e:	021a      	lsls	r2, r3, #8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a11      	ldr	r2, [pc, #68]	; (8003184 <HAL_FDCAN_Init+0x3b8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d107      	bne.n	8003154 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f022 0203 	bic.w	r2, r2, #3
 8003152:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fe27 	bl	8003dc0 <FDCAN_CalcultateRamBlockAddresses>
 8003172:	4603      	mov	r3, r0
 8003174:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003178:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800317c:	4618      	mov	r0, r3
 800317e:	3760      	adds	r7, #96	; 0x60
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	4000a000 	.word	0x4000a000

08003188 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003198:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d002      	beq.n	80031a6 <HAL_FDCAN_ConfigFilter+0x1e>
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d157      	bne.n	8003256 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d12b      	bne.n	8003206 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b07      	cmp	r3, #7
 80031b4:	d10d      	bne.n	80031d2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80031c2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80031c8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80031ca:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	e00e      	b.n	80031f0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80031de:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80031e6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	e025      	b.n	8003252 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	075a      	lsls	r2, r3, #29
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b07      	cmp	r3, #7
 800321a:	d103      	bne.n	8003224 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	e006      	b.n	8003232 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	079a      	lsls	r2, r3, #30
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4413      	add	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	3304      	adds	r3, #4
 800324a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e008      	b.n	8003268 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800325c:	f043 0202 	orr.w	r2, r3, #2
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
  }
}
 8003268:	4618      	mov	r0, r3
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b01      	cmp	r3, #1
 800328c:	d110      	bne.n	80032b0 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003296:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800329c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80032a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e008      	b.n	80032c2 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032b6:	f043 0204 	orr.w	r2, r3, #4
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d111      	bne.n	8003306 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2202      	movs	r2, #2
 80032e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	e008      	b.n	8003318 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800330c:	f043 0204 	orr.w	r2, r3, #4
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
  }
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d141      	bne.n	80033c0 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003344:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d109      	bne.n	8003360 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003352:	f043 0220 	orr.w	r2, r3, #32
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e038      	b.n	80033d2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d009      	beq.n	8003384 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003376:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e026      	b.n	80033d2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 fe96 	bl	80040cc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2101      	movs	r1, #1
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	fa01 f202 	lsl.w	r2, r1, r2
 80033ac:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80033b0:	2201      	movs	r2, #1
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	409a      	lsls	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e008      	b.n	80033d2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033c6:	f043 0208 	orr.w	r2, r3, #8
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80033dc:	b480      	push	{r7}
 80033de:	b08b      	sub	sp, #44	; 0x2c
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80033f4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80033f6:	7efb      	ldrb	r3, [r7, #27]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	f040 814b 	bne.w	8003694 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d14d      	bne.n	80034a0 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800340c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800341a:	f043 0220 	orr.w	r2, r3, #32
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e13e      	b.n	80036a6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003434:	2b00      	cmp	r3, #0
 8003436:	d109      	bne.n	800344c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800343e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e12c      	b.n	80036a6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003454:	0e1b      	lsrs	r3, r3, #24
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b01      	cmp	r3, #1
 800345c:	d10b      	bne.n	8003476 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003466:	0fdb      	lsrs	r3, r3, #31
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003470:	d101      	bne.n	8003476 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003472:	2301      	movs	r3, #1
 8003474:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800347e:	0a1b      	lsrs	r3, r3, #8
 8003480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	4413      	add	r3, r2
 8003488:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	69f9      	ldr	r1, [r7, #28]
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
 800349e:	e069      	b.n	8003574 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b41      	cmp	r3, #65	; 0x41
 80034a4:	d14d      	bne.n	8003542 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0ed      	b.n	80036a6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e0db      	b.n	80036a6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034f6:	0e1b      	lsrs	r3, r3, #24
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d10b      	bne.n	8003518 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003508:	0fdb      	lsrs	r3, r3, #31
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003512:	d101      	bne.n	8003518 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003514:	2301      	movs	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	4413      	add	r3, r2
 800352a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003534:	69f9      	ldr	r1, [r7, #28]
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
 8003540:	e018      	b.n	8003574 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	429a      	cmp	r2, r3
 800354a:	d309      	bcc.n	8003560 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0a2      	b.n	80036a6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d107      	bne.n	8003598 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	0c9b      	lsrs	r3, r3, #18
 800358e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e005      	b.n	80035a4 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	3304      	adds	r3, #4
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	0e1b      	lsrs	r3, r3, #24
 80035f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	0fda      	lsrs	r2, r3, #31
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	3304      	adds	r3, #4
 800360c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003612:	2300      	movs	r3, #0
 8003614:	623b      	str	r3, [r7, #32]
 8003616:	e00a      	b.n	800362e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	441a      	add	r2, r3
 800361e:	6839      	ldr	r1, [r7, #0]
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	440b      	add	r3, r1
 8003624:	7812      	ldrb	r2, [r2, #0]
 8003626:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	3301      	adds	r3, #1
 800362c:	623b      	str	r3, [r7, #32]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	4a1f      	ldr	r2, [pc, #124]	; (80036b4 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8003636:	5cd3      	ldrb	r3, [r2, r3]
 8003638:	461a      	mov	r2, r3
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	4293      	cmp	r3, r2
 800363e:	d3eb      	bcc.n	8003618 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b40      	cmp	r3, #64	; 0x40
 8003644:	d105      	bne.n	8003652 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003650:	e01e      	b.n	8003690 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b41      	cmp	r3, #65	; 0x41
 8003656:	d105      	bne.n	8003664 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003662:	e015      	b.n	8003690 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b1f      	cmp	r3, #31
 8003668:	d808      	bhi.n	800367c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2101      	movs	r1, #1
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	fa01 f202 	lsl.w	r2, r1, r2
 8003676:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800367a:	e009      	b.n	8003690 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 021f 	and.w	r2, r3, #31
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2101      	movs	r1, #1
 8003688:	fa01 f202 	lsl.w	r2, r1, r2
 800368c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e008      	b.n	80036a6 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800369a:	f043 0208 	orr.w	r2, r3, #8
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	372c      	adds	r7, #44	; 0x2c
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	0800a3bc 	.word	0x0800a3bc

080036b8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80036ca:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d002      	beq.n	80036d8 <HAL_FDCAN_ActivateNotification+0x20>
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d155      	bne.n	8003784 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d108      	bne.n	80036f8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0201 	orr.w	r2, r2, #1
 80036f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80036f6:	e014      	b.n	8003722 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4013      	ands	r3, r2
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	429a      	cmp	r2, r3
 8003706:	d108      	bne.n	800371a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0202 	orr.w	r2, r2, #2
 8003716:	65da      	str	r2, [r3, #92]	; 0x5c
 8003718:	e003      	b.n	8003722 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2203      	movs	r2, #3
 8003720:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	430a      	orrs	r2, r1
 800373c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	430a      	orrs	r2, r1
 800375a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <HAL_FDCAN_ActivateNotification+0xec>)
 8003768:	4013      	ands	r3, r2
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	430b      	orrs	r3, r1
 8003770:	6553      	str	r3, [r2, #84]	; 0x54
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	0f9b      	lsrs	r3, r3, #30
 800377a:	490b      	ldr	r1, [pc, #44]	; (80037a8 <HAL_FDCAN_ActivateNotification+0xf0>)
 800377c:	4313      	orrs	r3, r2
 800377e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	e008      	b.n	8003796 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800378a:	f043 0202 	orr.w	r2, r3, #2
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
  }
}
 8003796:	4618      	mov	r0, r3
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	3fcfffff 	.word	0x3fcfffff
 80037a8:	4000a800 	.word	0x4000a800

080037ac <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b096      	sub	sp, #88	; 0x58
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80037b4:	4b9a      	ldr	r3, [pc, #616]	; (8003a20 <HAL_FDCAN_IRQHandler+0x274>)
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	079b      	lsls	r3, r3, #30
 80037ba:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80037bc:	4b98      	ldr	r3, [pc, #608]	; (8003a20 <HAL_FDCAN_IRQHandler+0x274>)
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	079b      	lsls	r3, r3, #30
 80037c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037c4:	4013      	ands	r3, r2
 80037c6:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80037d2:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037dc:	4013      	ands	r3, r2
 80037de:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037f4:	4013      	ands	r3, r2
 80037f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003802:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800380c:	4013      	ands	r3, r2
 800380e:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003816:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800381a:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003822:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003824:	4013      	ands	r3, r2
 8003826:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8003832:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800383c:	4013      	ands	r3, r2
 800383e:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d010      	beq.n	800387e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385e:	0a1b      	lsrs	r3, r3, #8
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003870:	651a      	str	r2, [r3, #80]	; 0x50
 8003872:	4b6b      	ldr	r3, [pc, #428]	; (8003a20 <HAL_FDCAN_IRQHandler+0x274>)
 8003874:	2200      	movs	r2, #0
 8003876:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fa54 	bl	8003d26 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800387e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003880:	0a9b      	lsrs	r3, r3, #10
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d01d      	beq.n	80038c6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	0a9b      	lsrs	r3, r3, #10
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d017      	beq.n	80038c6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800389e:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80038a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038aa:	4013      	ands	r3, r2
 80038ac:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038b6:	651a      	str	r2, [r3, #80]	; 0x50
 80038b8:	4b59      	ldr	r3, [pc, #356]	; (8003a20 <HAL_FDCAN_IRQHandler+0x274>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80038be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fa07 	bl	8003cd4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80038c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00d      	beq.n	80038e8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038d2:	4b54      	ldr	r3, [pc, #336]	; (8003a24 <HAL_FDCAN_IRQHandler+0x278>)
 80038d4:	400b      	ands	r3, r1
 80038d6:	6513      	str	r3, [r2, #80]	; 0x50
 80038d8:	4a51      	ldr	r2, [pc, #324]	; (8003a20 <HAL_FDCAN_IRQHandler+0x274>)
 80038da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038dc:	0f9b      	lsrs	r3, r3, #30
 80038de:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80038e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f9c0 	bl	8003c68 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80038e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00d      	beq.n	800390a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80038f4:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <HAL_FDCAN_IRQHandler+0x278>)
 80038f6:	400b      	ands	r3, r1
 80038f8:	6513      	str	r3, [r2, #80]	; 0x50
 80038fa:	4a49      	ldr	r2, [pc, #292]	; (8003a20 <HAL_FDCAN_IRQHandler+0x274>)
 80038fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038fe:	0f9b      	lsrs	r3, r3, #30
 8003900:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003902:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f9ba 	bl	8003c7e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800390a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00d      	beq.n	800392c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003916:	4b43      	ldr	r3, [pc, #268]	; (8003a24 <HAL_FDCAN_IRQHandler+0x278>)
 8003918:	400b      	ands	r3, r1
 800391a:	6513      	str	r3, [r2, #80]	; 0x50
 800391c:	4a40      	ldr	r2, [pc, #256]	; (8003a20 <HAL_FDCAN_IRQHandler+0x274>)
 800391e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003920:	0f9b      	lsrs	r3, r3, #30
 8003922:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003924:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd fcb2 	bl	8001290 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800392c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003938:	4b3a      	ldr	r3, [pc, #232]	; (8003a24 <HAL_FDCAN_IRQHandler+0x278>)
 800393a:	400b      	ands	r3, r1
 800393c:	6513      	str	r3, [r2, #80]	; 0x50
 800393e:	4a38      	ldr	r2, [pc, #224]	; (8003a20 <HAL_FDCAN_IRQHandler+0x274>)
 8003940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003942:	0f9b      	lsrs	r3, r3, #30
 8003944:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003946:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f9a3 	bl	8003c94 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800394e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003950:	0adb      	lsrs	r3, r3, #11
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d010      	beq.n	800397c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	0adb      	lsrs	r3, r3, #11
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800396e:	651a      	str	r2, [r3, #80]	; 0x50
 8003970:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <HAL_FDCAN_IRQHandler+0x274>)
 8003972:	2200      	movs	r2, #0
 8003974:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f997 	bl	8003caa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800397c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397e:	0a5b      	lsrs	r3, r3, #9
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01d      	beq.n	80039c4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398a:	0a5b      	lsrs	r3, r3, #9
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d017      	beq.n	80039c4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800399c:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a8:	4013      	ands	r3, r2
 80039aa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b4:	651a      	str	r2, [r3, #80]	; 0x50
 80039b6:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <HAL_FDCAN_IRQHandler+0x274>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80039bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f97d 	bl	8003cbe <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80039c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c6:	0cdb      	lsrs	r3, r3, #19
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d010      	beq.n	80039f2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80039d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d2:	0cdb      	lsrs	r3, r3, #19
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80039e4:	651a      	str	r2, [r3, #80]	; 0x50
 80039e6:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <HAL_FDCAN_IRQHandler+0x274>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f97c 	bl	8003cea <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80039f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f4:	0c1b      	lsrs	r3, r3, #16
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	0c1b      	lsrs	r3, r3, #16
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d010      	beq.n	8003a2c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a12:	651a      	str	r2, [r3, #80]	; 0x50
 8003a14:	4b02      	ldr	r3, [pc, #8]	; (8003a20 <HAL_FDCAN_IRQHandler+0x274>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	e004      	b.n	8003a28 <HAL_FDCAN_IRQHandler+0x27c>
 8003a1e:	bf00      	nop
 8003a20:	4000a800 	.word	0x4000a800
 8003a24:	3fcfffff 	.word	0x3fcfffff
 8003a28:	f000 f969 	bl	8003cfe <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a2e:	0c9b      	lsrs	r3, r3, #18
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d010      	beq.n	8003a5a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3a:	0c9b      	lsrs	r3, r3, #18
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003a4c:	651a      	str	r2, [r3, #80]	; 0x50
 8003a4e:	4b83      	ldr	r3, [pc, #524]	; (8003c5c <HAL_FDCAN_IRQHandler+0x4b0>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f95c 	bl	8003d12 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5c:	0c5b      	lsrs	r3, r3, #17
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d015      	beq.n	8003a92 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a68:	0c5b      	lsrs	r3, r3, #17
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00f      	beq.n	8003a92 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a7a:	651a      	str	r2, [r3, #80]	; 0x50
 8003a7c:	4b77      	ldr	r3, [pc, #476]	; (8003c5c <HAL_FDCAN_IRQHandler+0x4b0>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a9e:	4b70      	ldr	r3, [pc, #448]	; (8003c60 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	6513      	str	r3, [r2, #80]	; 0x50
 8003aa4:	4a6d      	ldr	r2, [pc, #436]	; (8003c5c <HAL_FDCAN_IRQHandler+0x4b0>)
 8003aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa8:	0f9b      	lsrs	r3, r3, #30
 8003aaa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003aac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f94d 	bl	8003d4e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d011      	beq.n	8003ade <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ac0:	4b67      	ldr	r3, [pc, #412]	; (8003c60 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003ac2:	400b      	ands	r3, r1
 8003ac4:	6513      	str	r3, [r2, #80]	; 0x50
 8003ac6:	4a65      	ldr	r2, [pc, #404]	; (8003c5c <HAL_FDCAN_IRQHandler+0x4b0>)
 8003ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aca:	0f9b      	lsrs	r3, r3, #30
 8003acc:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a60      	ldr	r2, [pc, #384]	; (8003c64 <HAL_FDCAN_IRQHandler+0x4b8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	f040 80ac 	bne.w	8003c42 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80a4 	beq.w	8003c42 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b0e:	4013      	ands	r3, r2
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b1c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b26:	4013      	ands	r3, r2
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3e:	4013      	ands	r3, r2
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8003b4c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	6a3a      	ldr	r2, [r7, #32]
 8003b56:	4013      	ands	r3, r2
 8003b58:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8003b64:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8003b90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f8e6 	bl	8003d64 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d007      	beq.n	8003bae <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f8e6 	bl	8003d7a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	099b      	lsrs	r3, r3, #6
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01a      	beq.n	8003bf0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	099b      	lsrs	r3, r3, #6
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d014      	beq.n	8003bf0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bdc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2240      	movs	r2, #64	; 0x40
 8003be4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	6939      	ldr	r1, [r7, #16]
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f8d0 	bl	8003d90 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d007      	beq.n	8003c06 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8003bfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f8d1 	bl	8003da8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00b      	beq.n	8003c24 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	6a3a      	ldr	r2, [r7, #32]
 8003c12:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f874 	bl	8003d3a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003c52:	bf00      	nop
 8003c54:	3758      	adds	r7, #88	; 0x58
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	4000a800 	.word	0x4000a800
 8003c60:	3fcfffff 	.word	0x3fcfffff
 8003c64:	4000a000 	.word	0x4000a000

08003c68 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003dd6:	4ba7      	ldr	r3, [pc, #668]	; (8004074 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	0091      	lsls	r1, r2, #2
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	430b      	orrs	r3, r1
 8003de4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	041a      	lsls	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e16:	4b97      	ldr	r3, [pc, #604]	; (8004074 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	0091      	lsls	r1, r2, #2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	430b      	orrs	r3, r1
 8003e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e38:	041a      	lsls	r2, r3, #16
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003e58:	4b86      	ldr	r3, [pc, #536]	; (8004074 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	0091      	lsls	r1, r2, #2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	430b      	orrs	r3, r1
 8003e66:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e72:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	041a      	lsls	r2, r3, #16
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	4413      	add	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003ea0:	4b74      	ldr	r3, [pc, #464]	; (8004074 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	0091      	lsls	r1, r2, #2
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	430b      	orrs	r3, r1
 8003eae:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec2:	041a      	lsls	r2, r3, #16
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	4413      	add	r3, r2
 8003ede:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003ee8:	4b62      	ldr	r3, [pc, #392]	; (8004074 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	0091      	lsls	r1, r2, #2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	4413      	add	r3, r2
 8003f0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003f14:	4b57      	ldr	r3, [pc, #348]	; (8004074 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	0091      	lsls	r1, r2, #2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	430b      	orrs	r3, r1
 8003f22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f2e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	041a      	lsls	r2, r3, #16
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003f56:	4b47      	ldr	r3, [pc, #284]	; (8004074 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	0091      	lsls	r1, r2, #2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	430b      	orrs	r3, r1
 8003f64:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f70:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f78:	041a      	lsls	r2, r3, #16
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f8c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f94:	061a      	lsls	r2, r3, #24
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa4:	4b34      	ldr	r3, [pc, #208]	; (8004078 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009a      	lsls	r2, r3, #2
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	441a      	add	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	441a      	add	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	441a      	add	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	441a      	add	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	441a      	add	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004056:	fb01 f303 	mul.w	r3, r1, r3
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	441a      	add	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	4a04      	ldr	r2, [pc, #16]	; (800407c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d915      	bls.n	800409c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004070:	e006      	b.n	8004080 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004072:	bf00      	nop
 8004074:	ffff0003 	.word	0xffff0003
 8004078:	10002b00 	.word	0x10002b00
 800407c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2203      	movs	r2, #3
 8004094:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e010      	b.n	80040be <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	e005      	b.n	80040b0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3304      	adds	r3, #4
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d3f3      	bcc.n	80040a4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop

080040cc <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b089      	sub	sp, #36	; 0x24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80040ea:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	e00a      	b.n	800410e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004100:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004106:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004108:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800410c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004118:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800411e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004124:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004138:	6839      	ldr	r1, [r7, #0]
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	3304      	adds	r3, #4
 800414e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	3304      	adds	r3, #4
 800415a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	e020      	b.n	80041a4 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	3303      	adds	r3, #3
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	4413      	add	r3, r2
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	3302      	adds	r3, #2
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	440b      	add	r3, r1
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800417a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	3301      	adds	r3, #1
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	440b      	add	r3, r1
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8004188:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	440a      	add	r2, r1
 8004190:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004192:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	3304      	adds	r3, #4
 800419c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	3304      	adds	r3, #4
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	0c1b      	lsrs	r3, r3, #16
 80041aa:	4a06      	ldr	r2, [pc, #24]	; (80041c4 <FDCAN_CopyMessageToRAM+0xf8>)
 80041ac:	5cd3      	ldrb	r3, [r2, r3]
 80041ae:	461a      	mov	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d3d5      	bcc.n	8004162 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	3724      	adds	r7, #36	; 0x24
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	0800a3bc 	.word	0x0800a3bc

080041c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b089      	sub	sp, #36	; 0x24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80041d6:	4b89      	ldr	r3, [pc, #548]	; (80043fc <HAL_GPIO_Init+0x234>)
 80041d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041da:	e194      	b.n	8004506 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	2101      	movs	r1, #1
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 8186 	beq.w	8004500 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d005      	beq.n	800420c <HAL_GPIO_Init+0x44>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d130      	bne.n	800426e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	2203      	movs	r2, #3
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4313      	orrs	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004242:	2201      	movs	r2, #1
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	091b      	lsrs	r3, r3, #4
 8004258:	f003 0201 	and.w	r2, r3, #1
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4313      	orrs	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	2b03      	cmp	r3, #3
 8004278:	d017      	beq.n	80042aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	2203      	movs	r2, #3
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4013      	ands	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d123      	bne.n	80042fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	08da      	lsrs	r2, r3, #3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3208      	adds	r2, #8
 80042be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	220f      	movs	r2, #15
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43db      	mvns	r3, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4013      	ands	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	08da      	lsrs	r2, r3, #3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3208      	adds	r2, #8
 80042f8:	69b9      	ldr	r1, [r7, #24]
 80042fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	2203      	movs	r2, #3
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4013      	ands	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 0203 	and.w	r2, r3, #3
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4313      	orrs	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80e0 	beq.w	8004500 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004340:	4b2f      	ldr	r3, [pc, #188]	; (8004400 <HAL_GPIO_Init+0x238>)
 8004342:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004346:	4a2e      	ldr	r2, [pc, #184]	; (8004400 <HAL_GPIO_Init+0x238>)
 8004348:	f043 0302 	orr.w	r3, r3, #2
 800434c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004350:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <HAL_GPIO_Init+0x238>)
 8004352:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800435e:	4a29      	ldr	r2, [pc, #164]	; (8004404 <HAL_GPIO_Init+0x23c>)
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	089b      	lsrs	r3, r3, #2
 8004364:	3302      	adds	r3, #2
 8004366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800436a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	220f      	movs	r2, #15
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4013      	ands	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a20      	ldr	r2, [pc, #128]	; (8004408 <HAL_GPIO_Init+0x240>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d052      	beq.n	8004430 <HAL_GPIO_Init+0x268>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a1f      	ldr	r2, [pc, #124]	; (800440c <HAL_GPIO_Init+0x244>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d031      	beq.n	80043f6 <HAL_GPIO_Init+0x22e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a1e      	ldr	r2, [pc, #120]	; (8004410 <HAL_GPIO_Init+0x248>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d02b      	beq.n	80043f2 <HAL_GPIO_Init+0x22a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a1d      	ldr	r2, [pc, #116]	; (8004414 <HAL_GPIO_Init+0x24c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d025      	beq.n	80043ee <HAL_GPIO_Init+0x226>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a1c      	ldr	r2, [pc, #112]	; (8004418 <HAL_GPIO_Init+0x250>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d01f      	beq.n	80043ea <HAL_GPIO_Init+0x222>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a1b      	ldr	r2, [pc, #108]	; (800441c <HAL_GPIO_Init+0x254>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d019      	beq.n	80043e6 <HAL_GPIO_Init+0x21e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a1a      	ldr	r2, [pc, #104]	; (8004420 <HAL_GPIO_Init+0x258>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d013      	beq.n	80043e2 <HAL_GPIO_Init+0x21a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a19      	ldr	r2, [pc, #100]	; (8004424 <HAL_GPIO_Init+0x25c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00d      	beq.n	80043de <HAL_GPIO_Init+0x216>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a18      	ldr	r2, [pc, #96]	; (8004428 <HAL_GPIO_Init+0x260>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d007      	beq.n	80043da <HAL_GPIO_Init+0x212>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a17      	ldr	r2, [pc, #92]	; (800442c <HAL_GPIO_Init+0x264>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d101      	bne.n	80043d6 <HAL_GPIO_Init+0x20e>
 80043d2:	2309      	movs	r3, #9
 80043d4:	e02d      	b.n	8004432 <HAL_GPIO_Init+0x26a>
 80043d6:	230a      	movs	r3, #10
 80043d8:	e02b      	b.n	8004432 <HAL_GPIO_Init+0x26a>
 80043da:	2308      	movs	r3, #8
 80043dc:	e029      	b.n	8004432 <HAL_GPIO_Init+0x26a>
 80043de:	2307      	movs	r3, #7
 80043e0:	e027      	b.n	8004432 <HAL_GPIO_Init+0x26a>
 80043e2:	2306      	movs	r3, #6
 80043e4:	e025      	b.n	8004432 <HAL_GPIO_Init+0x26a>
 80043e6:	2305      	movs	r3, #5
 80043e8:	e023      	b.n	8004432 <HAL_GPIO_Init+0x26a>
 80043ea:	2304      	movs	r3, #4
 80043ec:	e021      	b.n	8004432 <HAL_GPIO_Init+0x26a>
 80043ee:	2303      	movs	r3, #3
 80043f0:	e01f      	b.n	8004432 <HAL_GPIO_Init+0x26a>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e01d      	b.n	8004432 <HAL_GPIO_Init+0x26a>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e01b      	b.n	8004432 <HAL_GPIO_Init+0x26a>
 80043fa:	bf00      	nop
 80043fc:	58000080 	.word	0x58000080
 8004400:	58024400 	.word	0x58024400
 8004404:	58000400 	.word	0x58000400
 8004408:	58020000 	.word	0x58020000
 800440c:	58020400 	.word	0x58020400
 8004410:	58020800 	.word	0x58020800
 8004414:	58020c00 	.word	0x58020c00
 8004418:	58021000 	.word	0x58021000
 800441c:	58021400 	.word	0x58021400
 8004420:	58021800 	.word	0x58021800
 8004424:	58021c00 	.word	0x58021c00
 8004428:	58022000 	.word	0x58022000
 800442c:	58022400 	.word	0x58022400
 8004430:	2300      	movs	r3, #0
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	f002 0203 	and.w	r2, r2, #3
 8004438:	0092      	lsls	r2, r2, #2
 800443a:	4093      	lsls	r3, r2
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004442:	4938      	ldr	r1, [pc, #224]	; (8004524 <HAL_GPIO_Init+0x35c>)
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	089b      	lsrs	r3, r3, #2
 8004448:	3302      	adds	r3, #2
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	43db      	mvns	r3, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4013      	ands	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800447e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	43db      	mvns	r3, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80044a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	43db      	mvns	r3, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	3301      	adds	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	f47f ae63 	bne.w	80041dc <HAL_GPIO_Init+0x14>
  }
}
 8004516:	bf00      	nop
 8004518:	bf00      	nop
 800451a:	3724      	adds	r7, #36	; 0x24
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	58000400 	.word	0x58000400

08004528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	807b      	strh	r3, [r7, #2]
 8004534:	4613      	mov	r3, r2
 8004536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004538:	787b      	ldrb	r3, [r7, #1]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800453e:	887a      	ldrh	r2, [r7, #2]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004544:	e003      	b.n	800454e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004546:	887b      	ldrh	r3, [r7, #2]
 8004548:	041a      	lsls	r2, r3, #16
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	619a      	str	r2, [r3, #24]
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
	...

0800455c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004564:	4a08      	ldr	r2, [pc, #32]	; (8004588 <HAL_HSEM_FastTake+0x2c>)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3320      	adds	r3, #32
 800456a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800456e:	4a07      	ldr	r2, [pc, #28]	; (800458c <HAL_HSEM_FastTake+0x30>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d101      	bne.n	8004578 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	e000      	b.n	800457a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
}
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	58026400 	.word	0x58026400
 800458c:	80000300 	.word	0x80000300

08004590 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800459a:	4906      	ldr	r1, [pc, #24]	; (80045b4 <HAL_HSEM_Release+0x24>)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	58026400 	.word	0x58026400

080045b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ba:	b08f      	sub	sp, #60	; 0x3c
 80045bc:	af0a      	add	r7, sp, #40	; 0x28
 80045be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e116      	b.n	80047f8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d106      	bne.n	80045ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7fd fc19 	bl	8001e1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2203      	movs	r2, #3
 80045ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d102      	bne.n	8004604 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f004 feb9 	bl	8009380 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	687e      	ldr	r6, [r7, #4]
 8004616:	466d      	mov	r5, sp
 8004618:	f106 0410 	add.w	r4, r6, #16
 800461c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800461e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004624:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004628:	e885 0003 	stmia.w	r5, {r0, r1}
 800462c:	1d33      	adds	r3, r6, #4
 800462e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004630:	6838      	ldr	r0, [r7, #0]
 8004632:	f004 fe37 	bl	80092a4 <USB_CoreInit>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0d7      	b.n	80047f8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2100      	movs	r1, #0
 800464e:	4618      	mov	r0, r3
 8004650:	f004 fea7 	bl	80093a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004654:	2300      	movs	r3, #0
 8004656:	73fb      	strb	r3, [r7, #15]
 8004658:	e04a      	b.n	80046f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800465a:	7bfa      	ldrb	r2, [r7, #15]
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	333d      	adds	r3, #61	; 0x3d
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800466e:	7bfa      	ldrb	r2, [r7, #15]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	333c      	adds	r3, #60	; 0x3c
 800467e:	7bfa      	ldrb	r2, [r7, #15]
 8004680:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004682:	7bfa      	ldrb	r2, [r7, #15]
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	b298      	uxth	r0, r3
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	3344      	adds	r3, #68	; 0x44
 8004696:	4602      	mov	r2, r0
 8004698:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800469a:	7bfa      	ldrb	r2, [r7, #15]
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	440b      	add	r3, r1
 80046a8:	3340      	adds	r3, #64	; 0x40
 80046aa:	2200      	movs	r2, #0
 80046ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046ae:	7bfa      	ldrb	r2, [r7, #15]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	3348      	adds	r3, #72	; 0x48
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046c2:	7bfa      	ldrb	r2, [r7, #15]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	334c      	adds	r3, #76	; 0x4c
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046d6:	7bfa      	ldrb	r2, [r7, #15]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	3354      	adds	r3, #84	; 0x54
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	3301      	adds	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
 80046f0:	7bfa      	ldrb	r2, [r7, #15]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d3af      	bcc.n	800465a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
 80046fe:	e044      	b.n	800478a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004700:	7bfa      	ldrb	r2, [r7, #15]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004716:	7bfa      	ldrb	r2, [r7, #15]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004728:	7bfa      	ldrb	r2, [r7, #15]
 800472a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800472c:	7bfa      	ldrb	r2, [r7, #15]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004742:	7bfa      	ldrb	r2, [r7, #15]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004758:	7bfa      	ldrb	r2, [r7, #15]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800476e:	7bfa      	ldrb	r2, [r7, #15]
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	3301      	adds	r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]
 800478a:	7bfa      	ldrb	r2, [r7, #15]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	429a      	cmp	r2, r3
 8004792:	d3b5      	bcc.n	8004700 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	687e      	ldr	r6, [r7, #4]
 800479c:	466d      	mov	r5, sp
 800479e:	f106 0410 	add.w	r4, r6, #16
 80047a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80047b2:	1d33      	adds	r3, r6, #4
 80047b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047b6:	6838      	ldr	r0, [r7, #0]
 80047b8:	f004 fe40 	bl	800943c <USB_DevInit>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e014      	b.n	80047f8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d102      	bne.n	80047ec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f80a 	bl	8004800 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f004 fffe 	bl	80097f2 <USB_DevDisconnect>

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004800 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800482e:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_PCDEx_ActivateLPM+0x44>)
 8004830:	4313      	orrs	r3, r2
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	10000003 	.word	0x10000003

08004848 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004850:	4b29      	ldr	r3, [pc, #164]	; (80048f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	2b06      	cmp	r3, #6
 800485a:	d00a      	beq.n	8004872 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800485c:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	429a      	cmp	r2, r3
 8004868:	d001      	beq.n	800486e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e040      	b.n	80048f0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	e03e      	b.n	80048f0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004872:	4b21      	ldr	r3, [pc, #132]	; (80048f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800487a:	491f      	ldr	r1, [pc, #124]	; (80048f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4313      	orrs	r3, r2
 8004880:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004882:	f7fd fd1f 	bl	80022c4 <HAL_GetTick>
 8004886:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004888:	e009      	b.n	800489e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800488a:	f7fd fd1b 	bl	80022c4 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004898:	d901      	bls.n	800489e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e028      	b.n	80048f0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800489e:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048aa:	d1ee      	bne.n	800488a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b1e      	cmp	r3, #30
 80048b0:	d008      	beq.n	80048c4 <HAL_PWREx_ConfigSupply+0x7c>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b2e      	cmp	r3, #46	; 0x2e
 80048b6:	d005      	beq.n	80048c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b1d      	cmp	r3, #29
 80048bc:	d002      	beq.n	80048c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b2d      	cmp	r3, #45	; 0x2d
 80048c2:	d114      	bne.n	80048ee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80048c4:	f7fd fcfe 	bl	80022c4 <HAL_GetTick>
 80048c8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80048ca:	e009      	b.n	80048e0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80048cc:	f7fd fcfa 	bl	80022c4 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048da:	d901      	bls.n	80048e0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e007      	b.n	80048f0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ec:	d1ee      	bne.n	80048cc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	58024800 	.word	0x58024800

080048fc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a04      	ldr	r2, [pc, #16]	; (8004918 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800490a:	60d3      	str	r3, [r2, #12]
}
 800490c:	bf00      	nop
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	58024800 	.word	0x58024800

0800491c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08c      	sub	sp, #48	; 0x30
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f000 bc1d 	b.w	800516a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8087 	beq.w	8004a4c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800493e:	4b99      	ldr	r3, [pc, #612]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004948:	4b96      	ldr	r3, [pc, #600]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 800494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	2b10      	cmp	r3, #16
 8004952:	d007      	beq.n	8004964 <HAL_RCC_OscConfig+0x48>
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	2b18      	cmp	r3, #24
 8004958:	d110      	bne.n	800497c <HAL_RCC_OscConfig+0x60>
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d10b      	bne.n	800497c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004964:	4b8f      	ldr	r3, [pc, #572]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d06c      	beq.n	8004a4a <HAL_RCC_OscConfig+0x12e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d168      	bne.n	8004a4a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e3f6      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004984:	d106      	bne.n	8004994 <HAL_RCC_OscConfig+0x78>
 8004986:	4b87      	ldr	r3, [pc, #540]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a86      	ldr	r2, [pc, #536]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 800498c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e02e      	b.n	80049f2 <HAL_RCC_OscConfig+0xd6>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10c      	bne.n	80049b6 <HAL_RCC_OscConfig+0x9a>
 800499c:	4b81      	ldr	r3, [pc, #516]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a80      	ldr	r2, [pc, #512]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 80049a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	4b7e      	ldr	r3, [pc, #504]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a7d      	ldr	r2, [pc, #500]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 80049ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	e01d      	b.n	80049f2 <HAL_RCC_OscConfig+0xd6>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049be:	d10c      	bne.n	80049da <HAL_RCC_OscConfig+0xbe>
 80049c0:	4b78      	ldr	r3, [pc, #480]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a77      	ldr	r2, [pc, #476]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 80049c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	4b75      	ldr	r3, [pc, #468]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a74      	ldr	r2, [pc, #464]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 80049d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	e00b      	b.n	80049f2 <HAL_RCC_OscConfig+0xd6>
 80049da:	4b72      	ldr	r3, [pc, #456]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a71      	ldr	r2, [pc, #452]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 80049e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	4b6f      	ldr	r3, [pc, #444]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a6e      	ldr	r2, [pc, #440]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 80049ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d013      	beq.n	8004a22 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fa:	f7fd fc63 	bl	80022c4 <HAL_GetTick>
 80049fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a02:	f7fd fc5f 	bl	80022c4 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b64      	cmp	r3, #100	; 0x64
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e3aa      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a14:	4b63      	ldr	r3, [pc, #396]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCC_OscConfig+0xe6>
 8004a20:	e014      	b.n	8004a4c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a22:	f7fd fc4f 	bl	80022c4 <HAL_GetTick>
 8004a26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a2a:	f7fd fc4b 	bl	80022c4 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b64      	cmp	r3, #100	; 0x64
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e396      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a3c:	4b59      	ldr	r3, [pc, #356]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f0      	bne.n	8004a2a <HAL_RCC_OscConfig+0x10e>
 8004a48:	e000      	b.n	8004a4c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80cb 	beq.w	8004bf0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a5a:	4b52      	ldr	r3, [pc, #328]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a62:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a64:	4b4f      	ldr	r3, [pc, #316]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <HAL_RCC_OscConfig+0x164>
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	2b18      	cmp	r3, #24
 8004a74:	d156      	bne.n	8004b24 <HAL_RCC_OscConfig+0x208>
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d151      	bne.n	8004b24 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a80:	4b48      	ldr	r3, [pc, #288]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <HAL_RCC_OscConfig+0x17c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e368      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a98:	4b42      	ldr	r3, [pc, #264]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f023 0219 	bic.w	r2, r3, #25
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	493f      	ldr	r1, [pc, #252]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004aaa:	f7fd fc0b 	bl	80022c4 <HAL_GetTick>
 8004aae:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ab2:	f7fd fc07 	bl	80022c4 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e352      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ac4:	4b37      	ldr	r3, [pc, #220]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad0:	f7fd fc28 	bl	8002324 <HAL_GetREVID>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d817      	bhi.n	8004b0e <HAL_RCC_OscConfig+0x1f2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d108      	bne.n	8004af8 <HAL_RCC_OscConfig+0x1dc>
 8004ae6:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004aee:	4a2d      	ldr	r2, [pc, #180]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004af4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004af6:	e07b      	b.n	8004bf0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af8:	4b2a      	ldr	r3, [pc, #168]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	031b      	lsls	r3, r3, #12
 8004b06:	4927      	ldr	r1, [pc, #156]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b0c:	e070      	b.n	8004bf0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0e:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	061b      	lsls	r3, r3, #24
 8004b1c:	4921      	ldr	r1, [pc, #132]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b22:	e065      	b.n	8004bf0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d048      	beq.n	8004bbe <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 0219 	bic.w	r2, r3, #25
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	491a      	ldr	r1, [pc, #104]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fd fbc1 	bl	80022c4 <HAL_GetTick>
 8004b42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b46:	f7fd fbbd 	bl	80022c4 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e308      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b58:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0f0      	beq.n	8004b46 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b64:	f7fd fbde 	bl	8002324 <HAL_GetREVID>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d81a      	bhi.n	8004ba8 <HAL_RCC_OscConfig+0x28c>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d108      	bne.n	8004b8c <HAL_RCC_OscConfig+0x270>
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004b82:	4a08      	ldr	r2, [pc, #32]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b88:	6053      	str	r3, [r2, #4]
 8004b8a:	e031      	b.n	8004bf0 <HAL_RCC_OscConfig+0x2d4>
 8004b8c:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	031b      	lsls	r3, r3, #12
 8004b9a:	4902      	ldr	r1, [pc, #8]	; (8004ba4 <HAL_RCC_OscConfig+0x288>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	604b      	str	r3, [r1, #4]
 8004ba0:	e026      	b.n	8004bf0 <HAL_RCC_OscConfig+0x2d4>
 8004ba2:	bf00      	nop
 8004ba4:	58024400 	.word	0x58024400
 8004ba8:	4b9a      	ldr	r3, [pc, #616]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	061b      	lsls	r3, r3, #24
 8004bb6:	4997      	ldr	r1, [pc, #604]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
 8004bbc:	e018      	b.n	8004bf0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bbe:	4b95      	ldr	r3, [pc, #596]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a94      	ldr	r2, [pc, #592]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fd fb7b 	bl	80022c4 <HAL_GetTick>
 8004bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd2:	f7fd fb77 	bl	80022c4 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e2c2      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004be4:	4b8b      	ldr	r3, [pc, #556]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 80a9 	beq.w	8004d50 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bfe:	4b85      	ldr	r3, [pc, #532]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c08:	4b82      	ldr	r3, [pc, #520]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d007      	beq.n	8004c24 <HAL_RCC_OscConfig+0x308>
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b18      	cmp	r3, #24
 8004c18:	d13a      	bne.n	8004c90 <HAL_RCC_OscConfig+0x374>
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d135      	bne.n	8004c90 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c24:	4b7b      	ldr	r3, [pc, #492]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_OscConfig+0x320>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	2b80      	cmp	r3, #128	; 0x80
 8004c36:	d001      	beq.n	8004c3c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e296      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c3c:	f7fd fb72 	bl	8002324 <HAL_GetREVID>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d817      	bhi.n	8004c7a <HAL_RCC_OscConfig+0x35e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d108      	bne.n	8004c64 <HAL_RCC_OscConfig+0x348>
 8004c52:	4b70      	ldr	r3, [pc, #448]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c5a:	4a6e      	ldr	r2, [pc, #440]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c60:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c62:	e075      	b.n	8004d50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c64:	4b6b      	ldr	r3, [pc, #428]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	069b      	lsls	r3, r3, #26
 8004c72:	4968      	ldr	r1, [pc, #416]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c78:	e06a      	b.n	8004d50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c7a:	4b66      	ldr	r3, [pc, #408]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	061b      	lsls	r3, r3, #24
 8004c88:	4962      	ldr	r1, [pc, #392]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c8e:	e05f      	b.n	8004d50 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d042      	beq.n	8004d1e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c98:	4b5e      	ldr	r3, [pc, #376]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a5d      	ldr	r2, [pc, #372]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fd fb0e 	bl	80022c4 <HAL_GetTick>
 8004ca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004cac:	f7fd fb0a 	bl	80022c4 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e255      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cbe:	4b55      	ldr	r3, [pc, #340]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cca:	f7fd fb2b 	bl	8002324 <HAL_GetREVID>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d817      	bhi.n	8004d08 <HAL_RCC_OscConfig+0x3ec>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d108      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x3d6>
 8004ce0:	4b4c      	ldr	r3, [pc, #304]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004ce8:	4a4a      	ldr	r2, [pc, #296]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004cea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cee:	6053      	str	r3, [r2, #4]
 8004cf0:	e02e      	b.n	8004d50 <HAL_RCC_OscConfig+0x434>
 8004cf2:	4b48      	ldr	r3, [pc, #288]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	069b      	lsls	r3, r3, #26
 8004d00:	4944      	ldr	r1, [pc, #272]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	604b      	str	r3, [r1, #4]
 8004d06:	e023      	b.n	8004d50 <HAL_RCC_OscConfig+0x434>
 8004d08:	4b42      	ldr	r3, [pc, #264]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	061b      	lsls	r3, r3, #24
 8004d16:	493f      	ldr	r1, [pc, #252]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60cb      	str	r3, [r1, #12]
 8004d1c:	e018      	b.n	8004d50 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d1e:	4b3d      	ldr	r3, [pc, #244]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a3c      	ldr	r2, [pc, #240]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2a:	f7fd facb 	bl	80022c4 <HAL_GetTick>
 8004d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d32:	f7fd fac7 	bl	80022c4 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e212      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d44:	4b33      	ldr	r3, [pc, #204]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d036      	beq.n	8004dca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d019      	beq.n	8004d98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d64:	4b2b      	ldr	r3, [pc, #172]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d68:	4a2a      	ldr	r2, [pc, #168]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d70:	f7fd faa8 	bl	80022c4 <HAL_GetTick>
 8004d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d78:	f7fd faa4 	bl	80022c4 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e1ef      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d8a:	4b22      	ldr	r3, [pc, #136]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x45c>
 8004d96:	e018      	b.n	8004dca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d98:	4b1e      	ldr	r3, [pc, #120]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9c:	4a1d      	ldr	r2, [pc, #116]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da4:	f7fd fa8e 	bl	80022c4 <HAL_GetTick>
 8004da8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dac:	f7fd fa8a 	bl	80022c4 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e1d5      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dbe:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d039      	beq.n	8004e4a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d01c      	beq.n	8004e18 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dde:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a0c      	ldr	r2, [pc, #48]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004de4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004de8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dea:	f7fd fa6b 	bl	80022c4 <HAL_GetTick>
 8004dee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004df2:	f7fd fa67 	bl	80022c4 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e1b2      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e04:	4b03      	ldr	r3, [pc, #12]	; (8004e14 <HAL_RCC_OscConfig+0x4f8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f0      	beq.n	8004df2 <HAL_RCC_OscConfig+0x4d6>
 8004e10:	e01b      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
 8004e12:	bf00      	nop
 8004e14:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e18:	4b9b      	ldr	r3, [pc, #620]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a9a      	ldr	r2, [pc, #616]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e24:	f7fd fa4e 	bl	80022c4 <HAL_GetTick>
 8004e28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e2c:	f7fd fa4a 	bl	80022c4 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e195      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e3e:	4b92      	ldr	r3, [pc, #584]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f0      	bne.n	8004e2c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 8081 	beq.w	8004f5a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e58:	4b8c      	ldr	r3, [pc, #560]	; (800508c <HAL_RCC_OscConfig+0x770>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a8b      	ldr	r2, [pc, #556]	; (800508c <HAL_RCC_OscConfig+0x770>)
 8004e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e64:	f7fd fa2e 	bl	80022c4 <HAL_GetTick>
 8004e68:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e6c:	f7fd fa2a 	bl	80022c4 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	; 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e175      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e7e:	4b83      	ldr	r3, [pc, #524]	; (800508c <HAL_RCC_OscConfig+0x770>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d106      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x584>
 8004e92:	4b7d      	ldr	r3, [pc, #500]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e96:	4a7c      	ldr	r2, [pc, #496]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9e:	e02d      	b.n	8004efc <HAL_RCC_OscConfig+0x5e0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10c      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x5a6>
 8004ea8:	4b77      	ldr	r3, [pc, #476]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eac:	4a76      	ldr	r2, [pc, #472]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004eae:	f023 0301 	bic.w	r3, r3, #1
 8004eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb4:	4b74      	ldr	r3, [pc, #464]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb8:	4a73      	ldr	r2, [pc, #460]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004eba:	f023 0304 	bic.w	r3, r3, #4
 8004ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec0:	e01c      	b.n	8004efc <HAL_RCC_OscConfig+0x5e0>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b05      	cmp	r3, #5
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x5c8>
 8004eca:	4b6f      	ldr	r3, [pc, #444]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	4a6e      	ldr	r2, [pc, #440]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004ed0:	f043 0304 	orr.w	r3, r3, #4
 8004ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed6:	4b6c      	ldr	r3, [pc, #432]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	4a6b      	ldr	r2, [pc, #428]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004edc:	f043 0301 	orr.w	r3, r3, #1
 8004ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee2:	e00b      	b.n	8004efc <HAL_RCC_OscConfig+0x5e0>
 8004ee4:	4b68      	ldr	r3, [pc, #416]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee8:	4a67      	ldr	r2, [pc, #412]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004eea:	f023 0301 	bic.w	r3, r3, #1
 8004eee:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef0:	4b65      	ldr	r3, [pc, #404]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef4:	4a64      	ldr	r2, [pc, #400]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004ef6:	f023 0304 	bic.w	r3, r3, #4
 8004efa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d015      	beq.n	8004f30 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f04:	f7fd f9de 	bl	80022c4 <HAL_GetTick>
 8004f08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f0a:	e00a      	b.n	8004f22 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f0c:	f7fd f9da 	bl	80022c4 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e123      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f22:	4b59      	ldr	r3, [pc, #356]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0ee      	beq.n	8004f0c <HAL_RCC_OscConfig+0x5f0>
 8004f2e:	e014      	b.n	8004f5a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fd f9c8 	bl	80022c4 <HAL_GetTick>
 8004f34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f36:	e00a      	b.n	8004f4e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f38:	f7fd f9c4 	bl	80022c4 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e10d      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f4e:	4b4e      	ldr	r3, [pc, #312]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1ee      	bne.n	8004f38 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8102 	beq.w	8005168 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f64:	4b48      	ldr	r3, [pc, #288]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f6c:	2b18      	cmp	r3, #24
 8004f6e:	f000 80bd 	beq.w	80050ec <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	f040 809e 	bne.w	80050b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7c:	4b42      	ldr	r3, [pc, #264]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a41      	ldr	r2, [pc, #260]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f88:	f7fd f99c 	bl	80022c4 <HAL_GetTick>
 8004f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f90:	f7fd f998 	bl	80022c4 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e0e3      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fa2:	4b39      	ldr	r3, [pc, #228]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fae:	4b36      	ldr	r3, [pc, #216]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fb2:	4b37      	ldr	r3, [pc, #220]	; (8005090 <HAL_RCC_OscConfig+0x774>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004fbe:	0112      	lsls	r2, r2, #4
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	4931      	ldr	r1, [pc, #196]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	628b      	str	r3, [r1, #40]	; 0x28
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	025b      	lsls	r3, r3, #9
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	041b      	lsls	r3, r3, #16
 8004fe6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	061b      	lsls	r3, r3, #24
 8004ff4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ff8:	4923      	ldr	r1, [pc, #140]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004ffe:	4b22      	ldr	r3, [pc, #136]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	4a21      	ldr	r2, [pc, #132]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8005004:	f023 0301 	bic.w	r3, r3, #1
 8005008:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800500a:	4b1f      	ldr	r3, [pc, #124]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 800500c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800500e:	4b21      	ldr	r3, [pc, #132]	; (8005094 <HAL_RCC_OscConfig+0x778>)
 8005010:	4013      	ands	r3, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005016:	00d2      	lsls	r2, r2, #3
 8005018:	491b      	ldr	r1, [pc, #108]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 800501a:	4313      	orrs	r3, r2
 800501c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800501e:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	f023 020c 	bic.w	r2, r3, #12
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	4917      	ldr	r1, [pc, #92]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 800502c:	4313      	orrs	r3, r2
 800502e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005030:	4b15      	ldr	r3, [pc, #84]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	f023 0202 	bic.w	r2, r3, #2
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503c:	4912      	ldr	r1, [pc, #72]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 800503e:	4313      	orrs	r3, r2
 8005040:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005042:	4b11      	ldr	r3, [pc, #68]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	4a10      	ldr	r2, [pc, #64]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8005048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800504c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800504e:	4b0e      	ldr	r3, [pc, #56]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	4a0d      	ldr	r2, [pc, #52]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8005054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005058:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800505a:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8005060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005064:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005066:	4b08      	ldr	r3, [pc, #32]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	4a07      	ldr	r2, [pc, #28]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005072:	4b05      	ldr	r3, [pc, #20]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a04      	ldr	r2, [pc, #16]	; (8005088 <HAL_RCC_OscConfig+0x76c>)
 8005078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800507c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507e:	f7fd f921 	bl	80022c4 <HAL_GetTick>
 8005082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005084:	e011      	b.n	80050aa <HAL_RCC_OscConfig+0x78e>
 8005086:	bf00      	nop
 8005088:	58024400 	.word	0x58024400
 800508c:	58024800 	.word	0x58024800
 8005090:	fffffc0c 	.word	0xfffffc0c
 8005094:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005098:	f7fd f914 	bl	80022c4 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e05f      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050aa:	4b32      	ldr	r3, [pc, #200]	; (8005174 <HAL_RCC_OscConfig+0x858>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0x77c>
 80050b6:	e057      	b.n	8005168 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b8:	4b2e      	ldr	r3, [pc, #184]	; (8005174 <HAL_RCC_OscConfig+0x858>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a2d      	ldr	r2, [pc, #180]	; (8005174 <HAL_RCC_OscConfig+0x858>)
 80050be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c4:	f7fd f8fe 	bl	80022c4 <HAL_GetTick>
 80050c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050cc:	f7fd f8fa 	bl	80022c4 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e045      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050de:	4b25      	ldr	r3, [pc, #148]	; (8005174 <HAL_RCC_OscConfig+0x858>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1f0      	bne.n	80050cc <HAL_RCC_OscConfig+0x7b0>
 80050ea:	e03d      	b.n	8005168 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80050ec:	4b21      	ldr	r3, [pc, #132]	; (8005174 <HAL_RCC_OscConfig+0x858>)
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050f2:	4b20      	ldr	r3, [pc, #128]	; (8005174 <HAL_RCC_OscConfig+0x858>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d031      	beq.n	8005164 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f003 0203 	and.w	r2, r3, #3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510a:	429a      	cmp	r2, r3
 800510c:	d12a      	bne.n	8005164 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511a:	429a      	cmp	r2, r3
 800511c:	d122      	bne.n	8005164 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005128:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800512a:	429a      	cmp	r2, r3
 800512c:	d11a      	bne.n	8005164 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	0a5b      	lsrs	r3, r3, #9
 8005132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800513c:	429a      	cmp	r2, r3
 800513e:	d111      	bne.n	8005164 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	0c1b      	lsrs	r3, r3, #16
 8005144:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800514e:	429a      	cmp	r2, r3
 8005150:	d108      	bne.n	8005164 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	0e1b      	lsrs	r3, r3, #24
 8005156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3730      	adds	r7, #48	; 0x30
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	58024400 	.word	0x58024400

08005178 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e19c      	b.n	80054c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800518c:	4b8a      	ldr	r3, [pc, #552]	; (80053b8 <HAL_RCC_ClockConfig+0x240>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 030f 	and.w	r3, r3, #15
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d910      	bls.n	80051bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519a:	4b87      	ldr	r3, [pc, #540]	; (80053b8 <HAL_RCC_ClockConfig+0x240>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f023 020f 	bic.w	r2, r3, #15
 80051a2:	4985      	ldr	r1, [pc, #532]	; (80053b8 <HAL_RCC_ClockConfig+0x240>)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051aa:	4b83      	ldr	r3, [pc, #524]	; (80053b8 <HAL_RCC_ClockConfig+0x240>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d001      	beq.n	80051bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e184      	b.n	80054c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d010      	beq.n	80051ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	4b7b      	ldr	r3, [pc, #492]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d908      	bls.n	80051ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051d8:	4b78      	ldr	r3, [pc, #480]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	4975      	ldr	r1, [pc, #468]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d010      	beq.n	8005218 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695a      	ldr	r2, [r3, #20]
 80051fa:	4b70      	ldr	r3, [pc, #448]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005202:	429a      	cmp	r2, r3
 8005204:	d908      	bls.n	8005218 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005206:	4b6d      	ldr	r3, [pc, #436]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	496a      	ldr	r1, [pc, #424]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 8005214:	4313      	orrs	r3, r2
 8005216:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	2b00      	cmp	r3, #0
 8005222:	d010      	beq.n	8005246 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699a      	ldr	r2, [r3, #24]
 8005228:	4b64      	ldr	r3, [pc, #400]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005230:	429a      	cmp	r2, r3
 8005232:	d908      	bls.n	8005246 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005234:	4b61      	ldr	r3, [pc, #388]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	495e      	ldr	r1, [pc, #376]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 8005242:	4313      	orrs	r3, r2
 8005244:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b00      	cmp	r3, #0
 8005250:	d010      	beq.n	8005274 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69da      	ldr	r2, [r3, #28]
 8005256:	4b59      	ldr	r3, [pc, #356]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800525e:	429a      	cmp	r2, r3
 8005260:	d908      	bls.n	8005274 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005262:	4b56      	ldr	r3, [pc, #344]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	4953      	ldr	r1, [pc, #332]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 8005270:	4313      	orrs	r3, r2
 8005272:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d010      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	4b4d      	ldr	r3, [pc, #308]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	429a      	cmp	r2, r3
 800528e:	d908      	bls.n	80052a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005290:	4b4a      	ldr	r3, [pc, #296]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f023 020f 	bic.w	r2, r3, #15
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	4947      	ldr	r1, [pc, #284]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d055      	beq.n	800535a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80052ae:	4b43      	ldr	r3, [pc, #268]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	4940      	ldr	r1, [pc, #256]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d107      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052c8:	4b3c      	ldr	r3, [pc, #240]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d121      	bne.n	8005318 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0f6      	b.n	80054c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d107      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052e0:	4b36      	ldr	r3, [pc, #216]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d115      	bne.n	8005318 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0ea      	b.n	80054c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d107      	bne.n	8005308 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052f8:	4b30      	ldr	r3, [pc, #192]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e0de      	b.n	80054c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005308:	4b2c      	ldr	r3, [pc, #176]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0d6      	b.n	80054c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005318:	4b28      	ldr	r3, [pc, #160]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f023 0207 	bic.w	r2, r3, #7
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	4925      	ldr	r1, [pc, #148]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 8005326:	4313      	orrs	r3, r2
 8005328:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532a:	f7fc ffcb 	bl	80022c4 <HAL_GetTick>
 800532e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005330:	e00a      	b.n	8005348 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005332:	f7fc ffc7 	bl	80022c4 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005340:	4293      	cmp	r3, r2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e0be      	b.n	80054c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005348:	4b1c      	ldr	r3, [pc, #112]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	429a      	cmp	r2, r3
 8005358:	d1eb      	bne.n	8005332 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d010      	beq.n	8005388 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	4b14      	ldr	r3, [pc, #80]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	429a      	cmp	r2, r3
 8005374:	d208      	bcs.n	8005388 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005376:	4b11      	ldr	r3, [pc, #68]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f023 020f 	bic.w	r2, r3, #15
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	490e      	ldr	r1, [pc, #56]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 8005384:	4313      	orrs	r3, r2
 8005386:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_RCC_ClockConfig+0x240>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 030f 	and.w	r3, r3, #15
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d214      	bcs.n	80053c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005396:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <HAL_RCC_ClockConfig+0x240>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f023 020f 	bic.w	r2, r3, #15
 800539e:	4906      	ldr	r1, [pc, #24]	; (80053b8 <HAL_RCC_ClockConfig+0x240>)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a6:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <HAL_RCC_ClockConfig+0x240>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d005      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e086      	b.n	80054c6 <HAL_RCC_ClockConfig+0x34e>
 80053b8:	52002000 	.word	0x52002000
 80053bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d010      	beq.n	80053ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	4b3f      	ldr	r3, [pc, #252]	; (80054d0 <HAL_RCC_ClockConfig+0x358>)
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053d8:	429a      	cmp	r2, r3
 80053da:	d208      	bcs.n	80053ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053dc:	4b3c      	ldr	r3, [pc, #240]	; (80054d0 <HAL_RCC_ClockConfig+0x358>)
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	4939      	ldr	r1, [pc, #228]	; (80054d0 <HAL_RCC_ClockConfig+0x358>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d010      	beq.n	800541c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695a      	ldr	r2, [r3, #20]
 80053fe:	4b34      	ldr	r3, [pc, #208]	; (80054d0 <HAL_RCC_ClockConfig+0x358>)
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005406:	429a      	cmp	r2, r3
 8005408:	d208      	bcs.n	800541c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800540a:	4b31      	ldr	r3, [pc, #196]	; (80054d0 <HAL_RCC_ClockConfig+0x358>)
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	492e      	ldr	r1, [pc, #184]	; (80054d0 <HAL_RCC_ClockConfig+0x358>)
 8005418:	4313      	orrs	r3, r2
 800541a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	2b00      	cmp	r3, #0
 8005426:	d010      	beq.n	800544a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699a      	ldr	r2, [r3, #24]
 800542c:	4b28      	ldr	r3, [pc, #160]	; (80054d0 <HAL_RCC_ClockConfig+0x358>)
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005434:	429a      	cmp	r2, r3
 8005436:	d208      	bcs.n	800544a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005438:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <HAL_RCC_ClockConfig+0x358>)
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	4922      	ldr	r1, [pc, #136]	; (80054d0 <HAL_RCC_ClockConfig+0x358>)
 8005446:	4313      	orrs	r3, r2
 8005448:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b00      	cmp	r3, #0
 8005454:	d010      	beq.n	8005478 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69da      	ldr	r2, [r3, #28]
 800545a:	4b1d      	ldr	r3, [pc, #116]	; (80054d0 <HAL_RCC_ClockConfig+0x358>)
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005462:	429a      	cmp	r2, r3
 8005464:	d208      	bcs.n	8005478 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005466:	4b1a      	ldr	r3, [pc, #104]	; (80054d0 <HAL_RCC_ClockConfig+0x358>)
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	4917      	ldr	r1, [pc, #92]	; (80054d0 <HAL_RCC_ClockConfig+0x358>)
 8005474:	4313      	orrs	r3, r2
 8005476:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005478:	f000 f834 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <HAL_RCC_ClockConfig+0x358>)
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	0a1b      	lsrs	r3, r3, #8
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	4912      	ldr	r1, [pc, #72]	; (80054d4 <HAL_RCC_ClockConfig+0x35c>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
 8005494:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005496:	4b0e      	ldr	r3, [pc, #56]	; (80054d0 <HAL_RCC_ClockConfig+0x358>)
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	4a0d      	ldr	r2, [pc, #52]	; (80054d4 <HAL_RCC_ClockConfig+0x35c>)
 80054a0:	5cd3      	ldrb	r3, [r2, r3]
 80054a2:	f003 031f 	and.w	r3, r3, #31
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	fa22 f303 	lsr.w	r3, r2, r3
 80054ac:	4a0a      	ldr	r2, [pc, #40]	; (80054d8 <HAL_RCC_ClockConfig+0x360>)
 80054ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054b0:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <HAL_RCC_ClockConfig+0x364>)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80054b6:	4b0a      	ldr	r3, [pc, #40]	; (80054e0 <HAL_RCC_ClockConfig+0x368>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fc feb8 	bl	8002230 <HAL_InitTick>
 80054c0:	4603      	mov	r3, r0
 80054c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	58024400 	.word	0x58024400
 80054d4:	0800a3ac 	.word	0x0800a3ac
 80054d8:	24000004 	.word	0x24000004
 80054dc:	24000000 	.word	0x24000000
 80054e0:	24000010 	.word	0x24000010

080054e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b089      	sub	sp, #36	; 0x24
 80054e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054ea:	4bb3      	ldr	r3, [pc, #716]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054f2:	2b18      	cmp	r3, #24
 80054f4:	f200 8155 	bhi.w	80057a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80054f8:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <HAL_RCC_GetSysClockFreq+0x1c>)
 80054fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fe:	bf00      	nop
 8005500:	08005565 	.word	0x08005565
 8005504:	080057a3 	.word	0x080057a3
 8005508:	080057a3 	.word	0x080057a3
 800550c:	080057a3 	.word	0x080057a3
 8005510:	080057a3 	.word	0x080057a3
 8005514:	080057a3 	.word	0x080057a3
 8005518:	080057a3 	.word	0x080057a3
 800551c:	080057a3 	.word	0x080057a3
 8005520:	0800558b 	.word	0x0800558b
 8005524:	080057a3 	.word	0x080057a3
 8005528:	080057a3 	.word	0x080057a3
 800552c:	080057a3 	.word	0x080057a3
 8005530:	080057a3 	.word	0x080057a3
 8005534:	080057a3 	.word	0x080057a3
 8005538:	080057a3 	.word	0x080057a3
 800553c:	080057a3 	.word	0x080057a3
 8005540:	08005591 	.word	0x08005591
 8005544:	080057a3 	.word	0x080057a3
 8005548:	080057a3 	.word	0x080057a3
 800554c:	080057a3 	.word	0x080057a3
 8005550:	080057a3 	.word	0x080057a3
 8005554:	080057a3 	.word	0x080057a3
 8005558:	080057a3 	.word	0x080057a3
 800555c:	080057a3 	.word	0x080057a3
 8005560:	08005597 	.word	0x08005597
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005564:	4b94      	ldr	r3, [pc, #592]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d009      	beq.n	8005584 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005570:	4b91      	ldr	r3, [pc, #580]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	08db      	lsrs	r3, r3, #3
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	4a90      	ldr	r2, [pc, #576]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
 8005580:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005582:	e111      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005584:	4b8d      	ldr	r3, [pc, #564]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005586:	61bb      	str	r3, [r7, #24]
    break;
 8005588:	e10e      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800558a:	4b8d      	ldr	r3, [pc, #564]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800558c:	61bb      	str	r3, [r7, #24]
    break;
 800558e:	e10b      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005590:	4b8c      	ldr	r3, [pc, #560]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005592:	61bb      	str	r3, [r7, #24]
    break;
 8005594:	e108      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005596:	4b88      	ldr	r3, [pc, #544]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80055a0:	4b85      	ldr	r3, [pc, #532]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80055ac:	4b82      	ldr	r3, [pc, #520]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80055b6:	4b80      	ldr	r3, [pc, #512]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ba:	08db      	lsrs	r3, r3, #3
 80055bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	fb02 f303 	mul.w	r3, r2, r3
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 80e1 	beq.w	800579c <HAL_RCC_GetSysClockFreq+0x2b8>
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	f000 8083 	beq.w	80056e8 <HAL_RCC_GetSysClockFreq+0x204>
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	f200 80a1 	bhi.w	800572c <HAL_RCC_GetSysClockFreq+0x248>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_RCC_GetSysClockFreq+0x114>
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d056      	beq.n	80056a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80055f6:	e099      	b.n	800572c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055f8:	4b6f      	ldr	r3, [pc, #444]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	d02d      	beq.n	8005660 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005604:	4b6c      	ldr	r3, [pc, #432]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	08db      	lsrs	r3, r3, #3
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	4a6b      	ldr	r2, [pc, #428]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005610:	fa22 f303 	lsr.w	r3, r2, r3
 8005614:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	ee07 3a90 	vmov	s15, r3
 800561c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562e:	4b62      	ldr	r3, [pc, #392]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005636:	ee07 3a90 	vmov	s15, r3
 800563a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005642:	eddf 5a61 	vldr	s11, [pc, #388]	; 80057c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800564a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800565a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800565e:	e087      	b.n	8005770 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	ee07 3a90 	vmov	s15, r3
 8005666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80057cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800566e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005672:	4b51      	ldr	r3, [pc, #324]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005682:	ed97 6a02 	vldr	s12, [r7, #8]
 8005686:	eddf 5a50 	vldr	s11, [pc, #320]	; 80057c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800568a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800569a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056a2:	e065      	b.n	8005770 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80057d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b6:	4b40      	ldr	r3, [pc, #256]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80057c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056e6:	e043      	b.n	8005770 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80057d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80056f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fa:	4b2f      	ldr	r3, [pc, #188]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570a:	ed97 6a02 	vldr	s12, [r7, #8]
 800570e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80057c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800571a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800571e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800572a:	e021      	b.n	8005770 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005736:	eddf 6a26 	vldr	s13, [pc, #152]	; 80057d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800573a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573e:	4b1e      	ldr	r3, [pc, #120]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005752:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80057c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800576e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005770:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	0a5b      	lsrs	r3, r3, #9
 8005776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800577a:	3301      	adds	r3, #1
 800577c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	ee07 3a90 	vmov	s15, r3
 8005784:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005788:	edd7 6a07 	vldr	s13, [r7, #28]
 800578c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005794:	ee17 3a90 	vmov	r3, s15
 8005798:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800579a:	e005      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	61bb      	str	r3, [r7, #24]
    break;
 80057a0:	e002      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80057a2:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057a4:	61bb      	str	r3, [r7, #24]
    break;
 80057a6:	bf00      	nop
  }

  return sysclockfreq;
 80057a8:	69bb      	ldr	r3, [r7, #24]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3724      	adds	r7, #36	; 0x24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	58024400 	.word	0x58024400
 80057bc:	03d09000 	.word	0x03d09000
 80057c0:	003d0900 	.word	0x003d0900
 80057c4:	007a1200 	.word	0x007a1200
 80057c8:	46000000 	.word	0x46000000
 80057cc:	4c742400 	.word	0x4c742400
 80057d0:	4a742400 	.word	0x4a742400
 80057d4:	4af42400 	.word	0x4af42400

080057d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80057de:	f7ff fe81 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 80057e2:	4602      	mov	r2, r0
 80057e4:	4b10      	ldr	r3, [pc, #64]	; (8005828 <HAL_RCC_GetHCLKFreq+0x50>)
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	0a1b      	lsrs	r3, r3, #8
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	490f      	ldr	r1, [pc, #60]	; (800582c <HAL_RCC_GetHCLKFreq+0x54>)
 80057f0:	5ccb      	ldrb	r3, [r1, r3]
 80057f2:	f003 031f 	and.w	r3, r3, #31
 80057f6:	fa22 f303 	lsr.w	r3, r2, r3
 80057fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057fc:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <HAL_RCC_GetHCLKFreq+0x50>)
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	4a09      	ldr	r2, [pc, #36]	; (800582c <HAL_RCC_GetHCLKFreq+0x54>)
 8005806:	5cd3      	ldrb	r3, [r2, r3]
 8005808:	f003 031f 	and.w	r3, r3, #31
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	fa22 f303 	lsr.w	r3, r2, r3
 8005812:	4a07      	ldr	r2, [pc, #28]	; (8005830 <HAL_RCC_GetHCLKFreq+0x58>)
 8005814:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005816:	4a07      	ldr	r2, [pc, #28]	; (8005834 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800581c:	4b04      	ldr	r3, [pc, #16]	; (8005830 <HAL_RCC_GetHCLKFreq+0x58>)
 800581e:	681b      	ldr	r3, [r3, #0]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	58024400 	.word	0x58024400
 800582c:	0800a3ac 	.word	0x0800a3ac
 8005830:	24000004 	.word	0x24000004
 8005834:	24000000 	.word	0x24000000

08005838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800583c:	f7ff ffcc 	bl	80057d8 <HAL_RCC_GetHCLKFreq>
 8005840:	4602      	mov	r2, r0
 8005842:	4b06      	ldr	r3, [pc, #24]	; (800585c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	4904      	ldr	r1, [pc, #16]	; (8005860 <HAL_RCC_GetPCLK1Freq+0x28>)
 800584e:	5ccb      	ldrb	r3, [r1, r3]
 8005850:	f003 031f 	and.w	r3, r3, #31
 8005854:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005858:	4618      	mov	r0, r3
 800585a:	bd80      	pop	{r7, pc}
 800585c:	58024400 	.word	0x58024400
 8005860:	0800a3ac 	.word	0x0800a3ac

08005864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005868:	f7ff ffb6 	bl	80057d8 <HAL_RCC_GetHCLKFreq>
 800586c:	4602      	mov	r2, r0
 800586e:	4b06      	ldr	r3, [pc, #24]	; (8005888 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	0a1b      	lsrs	r3, r3, #8
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	4904      	ldr	r1, [pc, #16]	; (800588c <HAL_RCC_GetPCLK2Freq+0x28>)
 800587a:	5ccb      	ldrb	r3, [r1, r3]
 800587c:	f003 031f 	and.w	r3, r3, #31
 8005880:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005884:	4618      	mov	r0, r3
 8005886:	bd80      	pop	{r7, pc}
 8005888:	58024400 	.word	0x58024400
 800588c:	0800a3ac 	.word	0x0800a3ac

08005890 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005898:	2300      	movs	r3, #0
 800589a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800589c:	2300      	movs	r3, #0
 800589e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d03f      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058b4:	d02a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80058b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058ba:	d824      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058c0:	d018      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058c6:	d81e      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80058cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058d0:	d007      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80058d2:	e018      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d4:	4ba3      	ldr	r3, [pc, #652]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	4aa2      	ldr	r2, [pc, #648]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80058da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058e0:	e015      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3304      	adds	r3, #4
 80058e6:	2102      	movs	r1, #2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f001 f9d5 	bl	8006c98 <RCCEx_PLL2_Config>
 80058ee:	4603      	mov	r3, r0
 80058f0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058f2:	e00c      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3324      	adds	r3, #36	; 0x24
 80058f8:	2102      	movs	r1, #2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f001 fa7e 	bl	8006dfc <RCCEx_PLL3_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005904:	e003      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	75fb      	strb	r3, [r7, #23]
      break;
 800590a:	e000      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800590c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005914:	4b93      	ldr	r3, [pc, #588]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005920:	4990      	ldr	r1, [pc, #576]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005922:	4313      	orrs	r3, r2
 8005924:	650b      	str	r3, [r1, #80]	; 0x50
 8005926:	e001      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005928:	7dfb      	ldrb	r3, [r7, #23]
 800592a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005934:	2b00      	cmp	r3, #0
 8005936:	d03d      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593c:	2b04      	cmp	r3, #4
 800593e:	d826      	bhi.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005940:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005946:	bf00      	nop
 8005948:	0800595d 	.word	0x0800595d
 800594c:	0800596b 	.word	0x0800596b
 8005950:	0800597d 	.word	0x0800597d
 8005954:	08005995 	.word	0x08005995
 8005958:	08005995 	.word	0x08005995
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800595c:	4b81      	ldr	r3, [pc, #516]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	4a80      	ldr	r2, [pc, #512]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005966:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005968:	e015      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3304      	adds	r3, #4
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f001 f991 	bl	8006c98 <RCCEx_PLL2_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800597a:	e00c      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3324      	adds	r3, #36	; 0x24
 8005980:	2100      	movs	r1, #0
 8005982:	4618      	mov	r0, r3
 8005984:	f001 fa3a 	bl	8006dfc <RCCEx_PLL3_Config>
 8005988:	4603      	mov	r3, r0
 800598a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800598c:	e003      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	75fb      	strb	r3, [r7, #23]
      break;
 8005992:	e000      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005996:	7dfb      	ldrb	r3, [r7, #23]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d109      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800599c:	4b71      	ldr	r3, [pc, #452]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800599e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a0:	f023 0207 	bic.w	r2, r3, #7
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a8:	496e      	ldr	r1, [pc, #440]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	650b      	str	r3, [r1, #80]	; 0x50
 80059ae:	e001      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d042      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c8:	d02b      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80059ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ce:	d825      	bhi.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80059d0:	2bc0      	cmp	r3, #192	; 0xc0
 80059d2:	d028      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80059d4:	2bc0      	cmp	r3, #192	; 0xc0
 80059d6:	d821      	bhi.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80059d8:	2b80      	cmp	r3, #128	; 0x80
 80059da:	d016      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80059dc:	2b80      	cmp	r3, #128	; 0x80
 80059de:	d81d      	bhi.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d007      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80059e8:	e018      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ea:	4b5e      	ldr	r3, [pc, #376]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	4a5d      	ldr	r2, [pc, #372]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80059f6:	e017      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3304      	adds	r3, #4
 80059fc:	2100      	movs	r1, #0
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 f94a 	bl	8006c98 <RCCEx_PLL2_Config>
 8005a04:	4603      	mov	r3, r0
 8005a06:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a08:	e00e      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3324      	adds	r3, #36	; 0x24
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 f9f3 	bl	8006dfc <RCCEx_PLL3_Config>
 8005a16:	4603      	mov	r3, r0
 8005a18:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a1a:	e005      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a20:	e002      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005a22:	bf00      	nop
 8005a24:	e000      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a2e:	4b4d      	ldr	r3, [pc, #308]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a32:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3a:	494a      	ldr	r1, [pc, #296]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	650b      	str	r3, [r1, #80]	; 0x50
 8005a40:	e001      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d049      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a5c:	d030      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005a5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a62:	d82a      	bhi.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a68:	d02c      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005a6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a6e:	d824      	bhi.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a74:	d018      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a7a:	d81e      	bhi.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005a80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a84:	d007      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005a86:	e018      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a88:	4b36      	ldr	r3, [pc, #216]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	4a35      	ldr	r2, [pc, #212]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a94:	e017      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 f8fb 	bl	8006c98 <RCCEx_PLL2_Config>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005aa6:	e00e      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3324      	adds	r3, #36	; 0x24
 8005aac:	2100      	movs	r1, #0
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f001 f9a4 	bl	8006dfc <RCCEx_PLL3_Config>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ab8:	e005      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	75fb      	strb	r3, [r7, #23]
      break;
 8005abe:	e002      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005ac0:	bf00      	nop
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005acc:	4b25      	ldr	r3, [pc, #148]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ada:	4922      	ldr	r1, [pc, #136]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	658b      	str	r3, [r1, #88]	; 0x58
 8005ae0:	e001      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
 8005ae4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d04b      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005af8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005afc:	d030      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005afe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b02:	d82a      	bhi.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b08:	d02e      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005b0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b0e:	d824      	bhi.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b14:	d018      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005b16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b1a:	d81e      	bhi.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b24:	d007      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005b26:	e018      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b28:	4b0e      	ldr	r3, [pc, #56]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	4a0d      	ldr	r2, [pc, #52]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b34:	e019      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f001 f8ab 	bl	8006c98 <RCCEx_PLL2_Config>
 8005b42:	4603      	mov	r3, r0
 8005b44:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b46:	e010      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3324      	adds	r3, #36	; 0x24
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 f954 	bl	8006dfc <RCCEx_PLL3_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b58:	e007      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b5e:	e004      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005b60:	bf00      	nop
 8005b62:	e002      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005b64:	58024400 	.word	0x58024400
      break;
 8005b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b70:	4b99      	ldr	r3, [pc, #612]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b74:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b7e:	4996      	ldr	r1, [pc, #600]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	658b      	str	r3, [r1, #88]	; 0x58
 8005b84:	e001      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
 8005b88:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d032      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b9a:	2b30      	cmp	r3, #48	; 0x30
 8005b9c:	d01c      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005b9e:	2b30      	cmp	r3, #48	; 0x30
 8005ba0:	d817      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	d00c      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d813      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d016      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005bae:	2b10      	cmp	r3, #16
 8005bb0:	d10f      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bb2:	4b89      	ldr	r3, [pc, #548]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb6:	4a88      	ldr	r2, [pc, #544]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005bbe:	e00e      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	2102      	movs	r1, #2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 f866 	bl	8006c98 <RCCEx_PLL2_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005bd0:	e005      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd6:	e002      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005bd8:	bf00      	nop
 8005bda:	e000      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d109      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005be4:	4b7c      	ldr	r3, [pc, #496]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf0:	4979      	ldr	r1, [pc, #484]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005bf6:	e001      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf8:	7dfb      	ldrb	r3, [r7, #23]
 8005bfa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d047      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c10:	d030      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005c12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c16:	d82a      	bhi.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005c18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c1c:	d02c      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005c1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c22:	d824      	bhi.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c28:	d018      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c2e:	d81e      	bhi.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c38:	d007      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005c3a:	e018      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c3c:	4b66      	ldr	r3, [pc, #408]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	4a65      	ldr	r2, [pc, #404]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c48:	e017      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	2100      	movs	r1, #0
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 f821 	bl	8006c98 <RCCEx_PLL2_Config>
 8005c56:	4603      	mov	r3, r0
 8005c58:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c5a:	e00e      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3324      	adds	r3, #36	; 0x24
 8005c60:	2100      	movs	r1, #0
 8005c62:	4618      	mov	r0, r3
 8005c64:	f001 f8ca 	bl	8006dfc <RCCEx_PLL3_Config>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c6c:	e005      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	75fb      	strb	r3, [r7, #23]
      break;
 8005c72:	e002      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005c74:	bf00      	nop
 8005c76:	e000      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005c78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d109      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c80:	4b55      	ldr	r3, [pc, #340]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c84:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8c:	4952      	ldr	r1, [pc, #328]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	650b      	str	r3, [r1, #80]	; 0x50
 8005c92:	e001      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
 8005c96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d049      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cac:	d02e      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005cae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cb2:	d828      	bhi.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005cb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cb8:	d02a      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005cba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cbe:	d822      	bhi.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005cc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cc4:	d026      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005cc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cca:	d81c      	bhi.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cd0:	d010      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005cd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cd6:	d816      	bhi.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01d      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce0:	d111      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 ffd5 	bl	8006c98 <RCCEx_PLL2_Config>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005cf2:	e012      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3324      	adds	r3, #36	; 0x24
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f001 f87e 	bl	8006dfc <RCCEx_PLL3_Config>
 8005d00:	4603      	mov	r3, r0
 8005d02:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d04:	e009      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0a:	e006      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d0c:	bf00      	nop
 8005d0e:	e004      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d10:	bf00      	nop
 8005d12:	e002      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d14:	bf00      	nop
 8005d16:	e000      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d109      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d20:	4b2d      	ldr	r3, [pc, #180]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d24:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d2c:	492a      	ldr	r1, [pc, #168]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	650b      	str	r3, [r1, #80]	; 0x50
 8005d32:	e001      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d04d      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d4e:	d02e      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d54:	d828      	bhi.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5a:	d02a      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d60:	d822      	bhi.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005d62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d66:	d026      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005d68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d6c:	d81c      	bhi.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d72:	d010      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d78:	d816      	bhi.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01d      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005d7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d82:	d111      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3304      	adds	r3, #4
 8005d88:	2101      	movs	r1, #1
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 ff84 	bl	8006c98 <RCCEx_PLL2_Config>
 8005d90:	4603      	mov	r3, r0
 8005d92:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d94:	e012      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3324      	adds	r3, #36	; 0x24
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f001 f82d 	bl	8006dfc <RCCEx_PLL3_Config>
 8005da2:	4603      	mov	r3, r0
 8005da4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005da6:	e009      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	75fb      	strb	r3, [r7, #23]
      break;
 8005dac:	e006      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005dae:	bf00      	nop
 8005db0:	e004      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005db2:	bf00      	nop
 8005db4:	e002      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005db6:	bf00      	nop
 8005db8:	e000      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10c      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005dc2:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005dd0:	4901      	ldr	r1, [pc, #4]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	658b      	str	r3, [r1, #88]	; 0x58
 8005dd6:	e003      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005dd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ddc:	7dfb      	ldrb	r3, [r7, #23]
 8005dde:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d02f      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005df4:	d00e      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dfa:	d814      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d015      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005e00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e04:	d10f      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e06:	4baf      	ldr	r3, [pc, #700]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	4aae      	ldr	r2, [pc, #696]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e12:	e00c      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3304      	adds	r3, #4
 8005e18:	2101      	movs	r1, #1
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 ff3c 	bl	8006c98 <RCCEx_PLL2_Config>
 8005e20:	4603      	mov	r3, r0
 8005e22:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e24:	e003      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	75fb      	strb	r3, [r7, #23]
      break;
 8005e2a:	e000      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e2e:	7dfb      	ldrb	r3, [r7, #23]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d109      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e34:	4ba3      	ldr	r3, [pc, #652]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e40:	49a0      	ldr	r1, [pc, #640]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	650b      	str	r3, [r1, #80]	; 0x50
 8005e46:	e001      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d032      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d81b      	bhi.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005e60:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e66:	bf00      	nop
 8005e68:	08005e9f 	.word	0x08005e9f
 8005e6c:	08005e79 	.word	0x08005e79
 8005e70:	08005e87 	.word	0x08005e87
 8005e74:	08005e9f 	.word	0x08005e9f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e78:	4b92      	ldr	r3, [pc, #584]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	4a91      	ldr	r2, [pc, #580]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e84:	e00c      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	2102      	movs	r1, #2
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 ff03 	bl	8006c98 <RCCEx_PLL2_Config>
 8005e92:	4603      	mov	r3, r0
 8005e94:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e96:	e003      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e9c:	e000      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d109      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ea6:	4b87      	ldr	r3, [pc, #540]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eaa:	f023 0203 	bic.w	r2, r3, #3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	4984      	ldr	r1, [pc, #528]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005eb8:	e001      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 8086 	beq.w	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ecc:	4b7e      	ldr	r3, [pc, #504]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a7d      	ldr	r2, [pc, #500]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ed8:	f7fc f9f4 	bl	80022c4 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ede:	e009      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ee0:	f7fc f9f0 	bl	80022c4 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b64      	cmp	r3, #100	; 0x64
 8005eec:	d902      	bls.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	75fb      	strb	r3, [r7, #23]
        break;
 8005ef2:	e005      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ef4:	4b74      	ldr	r3, [pc, #464]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0ef      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d166      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f06:	4b6f      	ldr	r3, [pc, #444]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f10:	4053      	eors	r3, r2
 8005f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d013      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f1a:	4b6a      	ldr	r3, [pc, #424]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f22:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f24:	4b67      	ldr	r3, [pc, #412]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f28:	4a66      	ldr	r2, [pc, #408]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f2e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f30:	4b64      	ldr	r3, [pc, #400]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f34:	4a63      	ldr	r2, [pc, #396]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f3a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f3c:	4a61      	ldr	r2, [pc, #388]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f4c:	d115      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4e:	f7fc f9b9 	bl	80022c4 <HAL_GetTick>
 8005f52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f54:	e00b      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f56:	f7fc f9b5 	bl	80022c4 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d902      	bls.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	75fb      	strb	r3, [r7, #23]
            break;
 8005f6c:	e005      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f6e:	4b55      	ldr	r3, [pc, #340]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0ed      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005f7a:	7dfb      	ldrb	r3, [r7, #23]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d126      	bne.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f8e:	d10d      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005f90:	4b4c      	ldr	r3, [pc, #304]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f9e:	0919      	lsrs	r1, r3, #4
 8005fa0:	4b4a      	ldr	r3, [pc, #296]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005fa2:	400b      	ands	r3, r1
 8005fa4:	4947      	ldr	r1, [pc, #284]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	610b      	str	r3, [r1, #16]
 8005faa:	e005      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005fac:	4b45      	ldr	r3, [pc, #276]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	4a44      	ldr	r2, [pc, #272]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005fb6:	6113      	str	r3, [r2, #16]
 8005fb8:	4b42      	ldr	r3, [pc, #264]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fc6:	493f      	ldr	r1, [pc, #252]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	670b      	str	r3, [r1, #112]	; 0x70
 8005fcc:	e004      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fce:	7dfb      	ldrb	r3, [r7, #23]
 8005fd0:	75bb      	strb	r3, [r7, #22]
 8005fd2:	e001      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 8085 	beq.w	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fea:	2b28      	cmp	r3, #40	; 0x28
 8005fec:	d866      	bhi.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005fee:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	080060d1 	.word	0x080060d1
 8005ff8:	080060bd 	.word	0x080060bd
 8005ffc:	080060bd 	.word	0x080060bd
 8006000:	080060bd 	.word	0x080060bd
 8006004:	080060bd 	.word	0x080060bd
 8006008:	080060bd 	.word	0x080060bd
 800600c:	080060bd 	.word	0x080060bd
 8006010:	080060bd 	.word	0x080060bd
 8006014:	08006099 	.word	0x08006099
 8006018:	080060bd 	.word	0x080060bd
 800601c:	080060bd 	.word	0x080060bd
 8006020:	080060bd 	.word	0x080060bd
 8006024:	080060bd 	.word	0x080060bd
 8006028:	080060bd 	.word	0x080060bd
 800602c:	080060bd 	.word	0x080060bd
 8006030:	080060bd 	.word	0x080060bd
 8006034:	080060ab 	.word	0x080060ab
 8006038:	080060bd 	.word	0x080060bd
 800603c:	080060bd 	.word	0x080060bd
 8006040:	080060bd 	.word	0x080060bd
 8006044:	080060bd 	.word	0x080060bd
 8006048:	080060bd 	.word	0x080060bd
 800604c:	080060bd 	.word	0x080060bd
 8006050:	080060bd 	.word	0x080060bd
 8006054:	080060d1 	.word	0x080060d1
 8006058:	080060bd 	.word	0x080060bd
 800605c:	080060bd 	.word	0x080060bd
 8006060:	080060bd 	.word	0x080060bd
 8006064:	080060bd 	.word	0x080060bd
 8006068:	080060bd 	.word	0x080060bd
 800606c:	080060bd 	.word	0x080060bd
 8006070:	080060bd 	.word	0x080060bd
 8006074:	080060d1 	.word	0x080060d1
 8006078:	080060bd 	.word	0x080060bd
 800607c:	080060bd 	.word	0x080060bd
 8006080:	080060bd 	.word	0x080060bd
 8006084:	080060bd 	.word	0x080060bd
 8006088:	080060bd 	.word	0x080060bd
 800608c:	080060bd 	.word	0x080060bd
 8006090:	080060bd 	.word	0x080060bd
 8006094:	080060d1 	.word	0x080060d1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3304      	adds	r3, #4
 800609c:	2101      	movs	r1, #1
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fdfa 	bl	8006c98 <RCCEx_PLL2_Config>
 80060a4:	4603      	mov	r3, r0
 80060a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80060a8:	e013      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3324      	adds	r3, #36	; 0x24
 80060ae:	2101      	movs	r1, #1
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fea3 	bl	8006dfc <RCCEx_PLL3_Config>
 80060b6:	4603      	mov	r3, r0
 80060b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80060ba:	e00a      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	75fb      	strb	r3, [r7, #23]
      break;
 80060c0:	e007      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80060c2:	bf00      	nop
 80060c4:	58024400 	.word	0x58024400
 80060c8:	58024800 	.word	0x58024800
 80060cc:	00ffffcf 	.word	0x00ffffcf
      break;
 80060d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d109      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80060d8:	4b96      	ldr	r3, [pc, #600]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80060da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060dc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060e4:	4993      	ldr	r1, [pc, #588]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	654b      	str	r3, [r1, #84]	; 0x54
 80060ea:	e001      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ec:	7dfb      	ldrb	r3, [r7, #23]
 80060ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d038      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006100:	2b05      	cmp	r3, #5
 8006102:	d821      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006104:	a201      	add	r2, pc, #4	; (adr r2, 800610c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	0800614f 	.word	0x0800614f
 8006110:	08006125 	.word	0x08006125
 8006114:	08006137 	.word	0x08006137
 8006118:	0800614f 	.word	0x0800614f
 800611c:	0800614f 	.word	0x0800614f
 8006120:	0800614f 	.word	0x0800614f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3304      	adds	r3, #4
 8006128:	2101      	movs	r1, #1
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fdb4 	bl	8006c98 <RCCEx_PLL2_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006134:	e00c      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3324      	adds	r3, #36	; 0x24
 800613a:	2101      	movs	r1, #1
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fe5d 	bl	8006dfc <RCCEx_PLL3_Config>
 8006142:	4603      	mov	r3, r0
 8006144:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006146:	e003      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	75fb      	strb	r3, [r7, #23]
      break;
 800614c:	e000      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800614e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006150:	7dfb      	ldrb	r3, [r7, #23]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d109      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006156:	4b77      	ldr	r3, [pc, #476]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	f023 0207 	bic.w	r2, r3, #7
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006162:	4974      	ldr	r1, [pc, #464]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006164:	4313      	orrs	r3, r2
 8006166:	654b      	str	r3, [r1, #84]	; 0x54
 8006168:	e001      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0304 	and.w	r3, r3, #4
 8006176:	2b00      	cmp	r3, #0
 8006178:	d03a      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006180:	2b05      	cmp	r3, #5
 8006182:	d821      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006184:	a201      	add	r2, pc, #4	; (adr r2, 800618c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618a:	bf00      	nop
 800618c:	080061cf 	.word	0x080061cf
 8006190:	080061a5 	.word	0x080061a5
 8006194:	080061b7 	.word	0x080061b7
 8006198:	080061cf 	.word	0x080061cf
 800619c:	080061cf 	.word	0x080061cf
 80061a0:	080061cf 	.word	0x080061cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3304      	adds	r3, #4
 80061a8:	2101      	movs	r1, #1
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fd74 	bl	8006c98 <RCCEx_PLL2_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80061b4:	e00c      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3324      	adds	r3, #36	; 0x24
 80061ba:	2101      	movs	r1, #1
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fe1d 	bl	8006dfc <RCCEx_PLL3_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80061c6:	e003      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	75fb      	strb	r3, [r7, #23]
      break;
 80061cc:	e000      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80061ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10a      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061d6:	4b57      	ldr	r3, [pc, #348]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80061d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061da:	f023 0207 	bic.w	r2, r3, #7
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e4:	4953      	ldr	r1, [pc, #332]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	658b      	str	r3, [r1, #88]	; 0x58
 80061ea:	e001      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ec:	7dfb      	ldrb	r3, [r7, #23]
 80061ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d04b      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006202:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006206:	d02e      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800620c:	d828      	bhi.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800620e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006212:	d02a      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006218:	d822      	bhi.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800621a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800621e:	d026      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006220:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006224:	d81c      	bhi.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800622a:	d010      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800622c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006230:	d816      	bhi.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d01d      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800623a:	d111      	bne.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	2100      	movs	r1, #0
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fd28 	bl	8006c98 <RCCEx_PLL2_Config>
 8006248:	4603      	mov	r3, r0
 800624a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800624c:	e012      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3324      	adds	r3, #36	; 0x24
 8006252:	2102      	movs	r1, #2
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fdd1 	bl	8006dfc <RCCEx_PLL3_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800625e:	e009      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	75fb      	strb	r3, [r7, #23]
      break;
 8006264:	e006      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006266:	bf00      	nop
 8006268:	e004      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800626a:	bf00      	nop
 800626c:	e002      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800626e:	bf00      	nop
 8006270:	e000      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006272:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10a      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800627a:	4b2e      	ldr	r3, [pc, #184]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800627c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006288:	492a      	ldr	r1, [pc, #168]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800628a:	4313      	orrs	r3, r2
 800628c:	654b      	str	r3, [r1, #84]	; 0x54
 800628e:	e001      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006290:	7dfb      	ldrb	r3, [r7, #23]
 8006292:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d04d      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062aa:	d02e      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80062ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062b0:	d828      	bhi.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80062b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b6:	d02a      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80062b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062bc:	d822      	bhi.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80062be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062c2:	d026      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80062c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062c8:	d81c      	bhi.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80062ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ce:	d010      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80062d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d4:	d816      	bhi.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d01d      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80062da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062de:	d111      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3304      	adds	r3, #4
 80062e4:	2100      	movs	r1, #0
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fcd6 	bl	8006c98 <RCCEx_PLL2_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80062f0:	e012      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3324      	adds	r3, #36	; 0x24
 80062f6:	2102      	movs	r1, #2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fd7f 	bl	8006dfc <RCCEx_PLL3_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006302:	e009      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	75fb      	strb	r3, [r7, #23]
      break;
 8006308:	e006      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800630a:	bf00      	nop
 800630c:	e004      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800630e:	bf00      	nop
 8006310:	e002      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006312:	bf00      	nop
 8006314:	e000      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006318:	7dfb      	ldrb	r3, [r7, #23]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10c      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800631e:	4b05      	ldr	r3, [pc, #20]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006322:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800632c:	4901      	ldr	r1, [pc, #4]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800632e:	4313      	orrs	r3, r2
 8006330:	658b      	str	r3, [r1, #88]	; 0x58
 8006332:	e003      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006334:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006338:	7dfb      	ldrb	r3, [r7, #23]
 800633a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006344:	2b00      	cmp	r3, #0
 8006346:	d04b      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800634e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006352:	d02e      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006354:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006358:	d828      	bhi.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800635a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800635e:	d02a      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006364:	d822      	bhi.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006366:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800636a:	d026      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800636c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006370:	d81c      	bhi.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006376:	d010      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800637c:	d816      	bhi.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d01d      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006386:	d111      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3304      	adds	r3, #4
 800638c:	2100      	movs	r1, #0
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fc82 	bl	8006c98 <RCCEx_PLL2_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006398:	e012      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3324      	adds	r3, #36	; 0x24
 800639e:	2102      	movs	r1, #2
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fd2b 	bl	8006dfc <RCCEx_PLL3_Config>
 80063a6:	4603      	mov	r3, r0
 80063a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80063aa:	e009      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	75fb      	strb	r3, [r7, #23]
      break;
 80063b0:	e006      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80063b2:	bf00      	nop
 80063b4:	e004      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80063b6:	bf00      	nop
 80063b8:	e002      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80063ba:	bf00      	nop
 80063bc:	e000      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80063be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c0:	7dfb      	ldrb	r3, [r7, #23]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063c6:	4b9d      	ldr	r3, [pc, #628]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80063c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063d4:	4999      	ldr	r1, [pc, #612]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	658b      	str	r3, [r1, #88]	; 0x58
 80063da:	e001      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
 80063de:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d01a      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f6:	d10a      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3324      	adds	r3, #36	; 0x24
 80063fc:	2102      	movs	r1, #2
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fcfc 	bl	8006dfc <RCCEx_PLL3_Config>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800640e:	4b8b      	ldr	r3, [pc, #556]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006412:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800641c:	4987      	ldr	r1, [pc, #540]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800641e:	4313      	orrs	r3, r2
 8006420:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	2b00      	cmp	r3, #0
 800642c:	d01a      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006438:	d10a      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	3324      	adds	r3, #36	; 0x24
 800643e:	2102      	movs	r1, #2
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fcdb 	bl	8006dfc <RCCEx_PLL3_Config>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006450:	4b7a      	ldr	r3, [pc, #488]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800645e:	4977      	ldr	r1, [pc, #476]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006460:	4313      	orrs	r3, r2
 8006462:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d034      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800647a:	d01d      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800647c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006480:	d817      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800648a:	d009      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800648c:	e011      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3304      	adds	r3, #4
 8006492:	2100      	movs	r1, #0
 8006494:	4618      	mov	r0, r3
 8006496:	f000 fbff 	bl	8006c98 <RCCEx_PLL2_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800649e:	e00c      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3324      	adds	r3, #36	; 0x24
 80064a4:	2102      	movs	r1, #2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fca8 	bl	8006dfc <RCCEx_PLL3_Config>
 80064ac:	4603      	mov	r3, r0
 80064ae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80064b0:	e003      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	75fb      	strb	r3, [r7, #23]
      break;
 80064b6:	e000      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80064b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064c0:	4b5e      	ldr	r3, [pc, #376]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064ce:	495b      	ldr	r1, [pc, #364]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	658b      	str	r3, [r1, #88]	; 0x58
 80064d4:	e001      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
 80064d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d033      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064f0:	d01c      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80064f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064f6:	d816      	bhi.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80064f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064fc:	d003      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80064fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006502:	d007      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006504:	e00f      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006506:	4b4d      	ldr	r3, [pc, #308]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650a:	4a4c      	ldr	r2, [pc, #304]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800650c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006510:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006512:	e00c      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3324      	adds	r3, #36	; 0x24
 8006518:	2101      	movs	r1, #1
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fc6e 	bl	8006dfc <RCCEx_PLL3_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006524:	e003      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	75fb      	strb	r3, [r7, #23]
      break;
 800652a:	e000      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800652c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800652e:	7dfb      	ldrb	r3, [r7, #23]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006534:	4b41      	ldr	r3, [pc, #260]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006542:	493e      	ldr	r1, [pc, #248]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006544:	4313      	orrs	r3, r2
 8006546:	654b      	str	r3, [r1, #84]	; 0x54
 8006548:	e001      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654a:	7dfb      	ldrb	r3, [r7, #23]
 800654c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d029      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006566:	d007      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006568:	e00f      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800656a:	4b34      	ldr	r3, [pc, #208]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	4a33      	ldr	r2, [pc, #204]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006574:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006576:	e00b      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3304      	adds	r3, #4
 800657c:	2102      	movs	r1, #2
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fb8a 	bl	8006c98 <RCCEx_PLL2_Config>
 8006584:	4603      	mov	r3, r0
 8006586:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006588:	e002      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	75fb      	strb	r3, [r7, #23]
      break;
 800658e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006590:	7dfb      	ldrb	r3, [r7, #23]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d109      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006596:	4b29      	ldr	r3, [pc, #164]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a2:	4926      	ldr	r1, [pc, #152]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065a8:	e001      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	3324      	adds	r3, #36	; 0x24
 80065be:	2102      	movs	r1, #2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fc1b 	bl	8006dfc <RCCEx_PLL3_Config>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d033      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e4:	d017      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80065e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ea:	d811      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80065ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f0:	d013      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80065f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f6:	d80b      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d010      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80065fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006600:	d106      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006602:	4b0e      	ldr	r3, [pc, #56]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006606:	4a0d      	ldr	r2, [pc, #52]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800660c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800660e:	e007      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	75fb      	strb	r3, [r7, #23]
      break;
 8006614:	e004      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006616:	bf00      	nop
 8006618:	e002      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800661a:	bf00      	nop
 800661c:	e000      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800661e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006620:	7dfb      	ldrb	r3, [r7, #23]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10c      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006626:	4b05      	ldr	r3, [pc, #20]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006632:	4902      	ldr	r1, [pc, #8]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006634:	4313      	orrs	r3, r2
 8006636:	654b      	str	r3, [r1, #84]	; 0x54
 8006638:	e004      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800663a:	bf00      	nop
 800663c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006640:	7dfb      	ldrb	r3, [r7, #23]
 8006642:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d008      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006650:	4b31      	ldr	r3, [pc, #196]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006654:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665c:	492e      	ldr	r1, [pc, #184]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800665e:	4313      	orrs	r3, r2
 8006660:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d009      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800666e:	4b2a      	ldr	r3, [pc, #168]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800667c:	4926      	ldr	r1, [pc, #152]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800667e:	4313      	orrs	r3, r2
 8006680:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d008      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800668e:	4b22      	ldr	r3, [pc, #136]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006692:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800669a:	491f      	ldr	r1, [pc, #124]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800669c:	4313      	orrs	r3, r2
 800669e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00d      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066ac:	4b1a      	ldr	r3, [pc, #104]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	4a19      	ldr	r2, [pc, #100]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066b6:	6113      	str	r3, [r2, #16]
 80066b8:	4b17      	ldr	r3, [pc, #92]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066ba:	691a      	ldr	r2, [r3, #16]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80066c2:	4915      	ldr	r1, [pc, #84]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	da08      	bge.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066d0:	4b11      	ldr	r3, [pc, #68]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066dc:	490e      	ldr	r1, [pc, #56]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d009      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066ee:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fc:	4906      	ldr	r1, [pc, #24]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006702:	7dbb      	ldrb	r3, [r7, #22]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006708:	2300      	movs	r3, #0
 800670a:	e000      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	58024400 	.word	0x58024400

0800671c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006720:	f7ff f85a 	bl	80057d8 <HAL_RCC_GetHCLKFreq>
 8006724:	4602      	mov	r2, r0
 8006726:	4b06      	ldr	r3, [pc, #24]	; (8006740 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	091b      	lsrs	r3, r3, #4
 800672c:	f003 0307 	and.w	r3, r3, #7
 8006730:	4904      	ldr	r1, [pc, #16]	; (8006744 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006732:	5ccb      	ldrb	r3, [r1, r3]
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800673c:	4618      	mov	r0, r3
 800673e:	bd80      	pop	{r7, pc}
 8006740:	58024400 	.word	0x58024400
 8006744:	0800a3ac 	.word	0x0800a3ac

08006748 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006748:	b480      	push	{r7}
 800674a:	b089      	sub	sp, #36	; 0x24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006750:	4ba1      	ldr	r3, [pc, #644]	; (80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	f003 0303 	and.w	r3, r3, #3
 8006758:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800675a:	4b9f      	ldr	r3, [pc, #636]	; (80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	0b1b      	lsrs	r3, r3, #12
 8006760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006764:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006766:	4b9c      	ldr	r3, [pc, #624]	; (80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	091b      	lsrs	r3, r3, #4
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006772:	4b99      	ldr	r3, [pc, #612]	; (80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006776:	08db      	lsrs	r3, r3, #3
 8006778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	fb02 f303 	mul.w	r3, r2, r3
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 8111 	beq.w	80069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	2b02      	cmp	r3, #2
 800679a:	f000 8083 	beq.w	80068a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	f200 80a1 	bhi.w	80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d056      	beq.n	8006860 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80067b2:	e099      	b.n	80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067b4:	4b88      	ldr	r3, [pc, #544]	; (80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d02d      	beq.n	800681c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067c0:	4b85      	ldr	r3, [pc, #532]	; (80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	08db      	lsrs	r3, r3, #3
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	4a84      	ldr	r2, [pc, #528]	; (80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067cc:	fa22 f303 	lsr.w	r3, r2, r3
 80067d0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	ee07 3a90 	vmov	s15, r3
 80067d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ea:	4b7b      	ldr	r3, [pc, #492]	; (80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80067fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800680e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006816:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800681a:	e087      	b.n	800692c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006826:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80069e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800682a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800682e:	4b6a      	ldr	r3, [pc, #424]	; (80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800683e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006842:	eddf 5a67 	vldr	s11, [pc, #412]	; 80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800684a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800684e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800685e:	e065      	b.n	800692c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80069e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800686e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006872:	4b59      	ldr	r3, [pc, #356]	; (80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687a:	ee07 3a90 	vmov	s15, r3
 800687e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006882:	ed97 6a03 	vldr	s12, [r7, #12]
 8006886:	eddf 5a56 	vldr	s11, [pc, #344]	; 80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800688a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800688e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800689a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800689e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068a2:	e043      	b.n	800692c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	ee07 3a90 	vmov	s15, r3
 80068aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80068b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068b6:	4b48      	ldr	r3, [pc, #288]	; (80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068e6:	e021      	b.n	800692c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	ee07 3a90 	vmov	s15, r3
 80068ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80069e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068fa:	4b37      	ldr	r3, [pc, #220]	; (80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800690a:	ed97 6a03 	vldr	s12, [r7, #12]
 800690e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80069e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800691a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800691e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006926:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800692a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800692c:	4b2a      	ldr	r3, [pc, #168]	; (80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800692e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006930:	0a5b      	lsrs	r3, r3, #9
 8006932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006936:	ee07 3a90 	vmov	s15, r3
 800693a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800693e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006946:	edd7 6a07 	vldr	s13, [r7, #28]
 800694a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800694e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006952:	ee17 2a90 	vmov	r2, s15
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800695a:	4b1f      	ldr	r3, [pc, #124]	; (80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800695c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695e:	0c1b      	lsrs	r3, r3, #16
 8006960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006964:	ee07 3a90 	vmov	s15, r3
 8006968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006974:	edd7 6a07 	vldr	s13, [r7, #28]
 8006978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800697c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006980:	ee17 2a90 	vmov	r2, s15
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006988:	4b13      	ldr	r3, [pc, #76]	; (80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	0e1b      	lsrs	r3, r3, #24
 800698e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006992:	ee07 3a90 	vmov	s15, r3
 8006996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800699e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80069a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ae:	ee17 2a90 	vmov	r2, s15
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80069b6:	e008      	b.n	80069ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	609a      	str	r2, [r3, #8]
}
 80069ca:	bf00      	nop
 80069cc:	3724      	adds	r7, #36	; 0x24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	58024400 	.word	0x58024400
 80069dc:	03d09000 	.word	0x03d09000
 80069e0:	46000000 	.word	0x46000000
 80069e4:	4c742400 	.word	0x4c742400
 80069e8:	4a742400 	.word	0x4a742400
 80069ec:	4af42400 	.word	0x4af42400

080069f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b089      	sub	sp, #36	; 0x24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069f8:	4ba1      	ldr	r3, [pc, #644]	; (8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fc:	f003 0303 	and.w	r3, r3, #3
 8006a00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006a02:	4b9f      	ldr	r3, [pc, #636]	; (8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a06:	0d1b      	lsrs	r3, r3, #20
 8006a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a0e:	4b9c      	ldr	r3, [pc, #624]	; (8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a12:	0a1b      	lsrs	r3, r3, #8
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006a1a:	4b99      	ldr	r3, [pc, #612]	; (8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1e:	08db      	lsrs	r3, r3, #3
 8006a20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	fb02 f303 	mul.w	r3, r2, r3
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 8111 	beq.w	8006c60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	f000 8083 	beq.w	8006b4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	f200 80a1 	bhi.w	8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d056      	beq.n	8006b08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a5a:	e099      	b.n	8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a5c:	4b88      	ldr	r3, [pc, #544]	; (8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0320 	and.w	r3, r3, #32
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d02d      	beq.n	8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a68:	4b85      	ldr	r3, [pc, #532]	; (8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	08db      	lsrs	r3, r3, #3
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	4a84      	ldr	r2, [pc, #528]	; (8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a74:	fa22 f303 	lsr.w	r3, r2, r3
 8006a78:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	ee07 3a90 	vmov	s15, r3
 8006a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a92:	4b7b      	ldr	r3, [pc, #492]	; (8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aa6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006abe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006ac2:	e087      	b.n	8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ace:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad6:	4b6a      	ldr	r3, [pc, #424]	; (8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b06:	e065      	b.n	8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b1a:	4b59      	ldr	r3, [pc, #356]	; (8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b4a:	e043      	b.n	8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b5e:	4b48      	ldr	r3, [pc, #288]	; (8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b72:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b8e:	e021      	b.n	8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba2:	4b37      	ldr	r3, [pc, #220]	; (8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bb6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bd2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006bd4:	4b2a      	ldr	r3, [pc, #168]	; (8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd8:	0a5b      	lsrs	r3, r3, #9
 8006bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bde:	ee07 3a90 	vmov	s15, r3
 8006be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bee:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bfa:	ee17 2a90 	vmov	r2, s15
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006c02:	4b1f      	ldr	r3, [pc, #124]	; (8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	0c1b      	lsrs	r3, r3, #16
 8006c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c0c:	ee07 3a90 	vmov	s15, r3
 8006c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c28:	ee17 2a90 	vmov	r2, s15
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006c30:	4b13      	ldr	r3, [pc, #76]	; (8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	0e1b      	lsrs	r3, r3, #24
 8006c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c56:	ee17 2a90 	vmov	r2, s15
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c5e:	e008      	b.n	8006c72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	609a      	str	r2, [r3, #8]
}
 8006c72:	bf00      	nop
 8006c74:	3724      	adds	r7, #36	; 0x24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	58024400 	.word	0x58024400
 8006c84:	03d09000 	.word	0x03d09000
 8006c88:	46000000 	.word	0x46000000
 8006c8c:	4c742400 	.word	0x4c742400
 8006c90:	4a742400 	.word	0x4a742400
 8006c94:	4af42400 	.word	0x4af42400

08006c98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ca6:	4b53      	ldr	r3, [pc, #332]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d101      	bne.n	8006cb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e099      	b.n	8006dea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006cb6:	4b4f      	ldr	r3, [pc, #316]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a4e      	ldr	r2, [pc, #312]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006cbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cc2:	f7fb faff 	bl	80022c4 <HAL_GetTick>
 8006cc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cc8:	e008      	b.n	8006cdc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006cca:	f7fb fafb 	bl	80022c4 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e086      	b.n	8006dea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cdc:	4b45      	ldr	r3, [pc, #276]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1f0      	bne.n	8006cca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ce8:	4b42      	ldr	r3, [pc, #264]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	031b      	lsls	r3, r3, #12
 8006cf6:	493f      	ldr	r1, [pc, #252]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	628b      	str	r3, [r1, #40]	; 0x28
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	025b      	lsls	r3, r3, #9
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	431a      	orrs	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	041b      	lsls	r3, r3, #16
 8006d1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	061b      	lsls	r3, r3, #24
 8006d28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d2c:	4931      	ldr	r1, [pc, #196]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d32:	4b30      	ldr	r3, [pc, #192]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	492d      	ldr	r1, [pc, #180]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d44:	4b2b      	ldr	r3, [pc, #172]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	f023 0220 	bic.w	r2, r3, #32
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	4928      	ldr	r1, [pc, #160]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d56:	4b27      	ldr	r3, [pc, #156]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	4a26      	ldr	r2, [pc, #152]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006d5c:	f023 0310 	bic.w	r3, r3, #16
 8006d60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d62:	4b24      	ldr	r3, [pc, #144]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d66:	4b24      	ldr	r3, [pc, #144]	; (8006df8 <RCCEx_PLL2_Config+0x160>)
 8006d68:	4013      	ands	r3, r2
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	69d2      	ldr	r2, [r2, #28]
 8006d6e:	00d2      	lsls	r2, r2, #3
 8006d70:	4920      	ldr	r1, [pc, #128]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d76:	4b1f      	ldr	r3, [pc, #124]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	4a1e      	ldr	r2, [pc, #120]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006d7c:	f043 0310 	orr.w	r3, r3, #16
 8006d80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d106      	bne.n	8006d96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d88:	4b1a      	ldr	r3, [pc, #104]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	4a19      	ldr	r2, [pc, #100]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006d8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d94:	e00f      	b.n	8006db6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d106      	bne.n	8006daa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d9c:	4b15      	ldr	r3, [pc, #84]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da0:	4a14      	ldr	r2, [pc, #80]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006da6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006da8:	e005      	b.n	8006db6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006daa:	4b12      	ldr	r3, [pc, #72]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dae:	4a11      	ldr	r2, [pc, #68]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006db4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006db6:	4b0f      	ldr	r3, [pc, #60]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a0e      	ldr	r2, [pc, #56]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006dbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006dc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc2:	f7fb fa7f 	bl	80022c4 <HAL_GetTick>
 8006dc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dc8:	e008      	b.n	8006ddc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006dca:	f7fb fa7b 	bl	80022c4 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d901      	bls.n	8006ddc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e006      	b.n	8006dea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ddc:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <RCCEx_PLL2_Config+0x15c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d0f0      	beq.n	8006dca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	58024400 	.word	0x58024400
 8006df8:	ffff0007 	.word	0xffff0007

08006dfc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e0a:	4b53      	ldr	r3, [pc, #332]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d101      	bne.n	8006e1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e099      	b.n	8006f4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e1a:	4b4f      	ldr	r3, [pc, #316]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a4e      	ldr	r2, [pc, #312]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e26:	f7fb fa4d 	bl	80022c4 <HAL_GetTick>
 8006e2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e2c:	e008      	b.n	8006e40 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e2e:	f7fb fa49 	bl	80022c4 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d901      	bls.n	8006e40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e086      	b.n	8006f4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e40:	4b45      	ldr	r3, [pc, #276]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1f0      	bne.n	8006e2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e4c:	4b42      	ldr	r3, [pc, #264]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	051b      	lsls	r3, r3, #20
 8006e5a:	493f      	ldr	r1, [pc, #252]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	628b      	str	r3, [r1, #40]	; 0x28
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	025b      	lsls	r3, r3, #9
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	431a      	orrs	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	041b      	lsls	r3, r3, #16
 8006e7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e82:	431a      	orrs	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	061b      	lsls	r3, r3, #24
 8006e8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e90:	4931      	ldr	r1, [pc, #196]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e96:	4b30      	ldr	r3, [pc, #192]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	492d      	ldr	r1, [pc, #180]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ea8:	4b2b      	ldr	r3, [pc, #172]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	4928      	ldr	r1, [pc, #160]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006eba:	4b27      	ldr	r3, [pc, #156]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebe:	4a26      	ldr	r2, [pc, #152]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ec6:	4b24      	ldr	r3, [pc, #144]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eca:	4b24      	ldr	r3, [pc, #144]	; (8006f5c <RCCEx_PLL3_Config+0x160>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	69d2      	ldr	r2, [r2, #28]
 8006ed2:	00d2      	lsls	r2, r2, #3
 8006ed4:	4920      	ldr	r1, [pc, #128]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006eda:	4b1f      	ldr	r3, [pc, #124]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ede:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d106      	bne.n	8006efa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006eec:	4b1a      	ldr	r3, [pc, #104]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	4a19      	ldr	r2, [pc, #100]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006ef2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ef8:	e00f      	b.n	8006f1a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d106      	bne.n	8006f0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f00:	4b15      	ldr	r3, [pc, #84]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	4a14      	ldr	r2, [pc, #80]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006f06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f0c:	e005      	b.n	8006f1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f0e:	4b12      	ldr	r3, [pc, #72]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f12:	4a11      	ldr	r2, [pc, #68]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f1a:	4b0f      	ldr	r3, [pc, #60]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a0e      	ldr	r2, [pc, #56]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f26:	f7fb f9cd 	bl	80022c4 <HAL_GetTick>
 8006f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f2c:	e008      	b.n	8006f40 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006f2e:	f7fb f9c9 	bl	80022c4 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d901      	bls.n	8006f40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e006      	b.n	8006f4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f40:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <RCCEx_PLL3_Config+0x15c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0f0      	beq.n	8006f2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	58024400 	.word	0x58024400
 8006f5c:	ffff0007 	.word	0xffff0007

08006f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e049      	b.n	8007006 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d106      	bne.n	8006f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7fa fdfe 	bl	8001b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	f000 fd46 	bl	8007a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b01      	cmp	r3, #1
 8007022:	d001      	beq.n	8007028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e054      	b.n	80070d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0201 	orr.w	r2, r2, #1
 800703e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a26      	ldr	r2, [pc, #152]	; (80070e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d022      	beq.n	8007090 <HAL_TIM_Base_Start_IT+0x80>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007052:	d01d      	beq.n	8007090 <HAL_TIM_Base_Start_IT+0x80>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a22      	ldr	r2, [pc, #136]	; (80070e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d018      	beq.n	8007090 <HAL_TIM_Base_Start_IT+0x80>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a21      	ldr	r2, [pc, #132]	; (80070e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d013      	beq.n	8007090 <HAL_TIM_Base_Start_IT+0x80>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a1f      	ldr	r2, [pc, #124]	; (80070ec <HAL_TIM_Base_Start_IT+0xdc>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00e      	beq.n	8007090 <HAL_TIM_Base_Start_IT+0x80>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a1e      	ldr	r2, [pc, #120]	; (80070f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d009      	beq.n	8007090 <HAL_TIM_Base_Start_IT+0x80>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a1c      	ldr	r2, [pc, #112]	; (80070f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d004      	beq.n	8007090 <HAL_TIM_Base_Start_IT+0x80>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a1b      	ldr	r2, [pc, #108]	; (80070f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d115      	bne.n	80070bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689a      	ldr	r2, [r3, #8]
 8007096:	4b19      	ldr	r3, [pc, #100]	; (80070fc <HAL_TIM_Base_Start_IT+0xec>)
 8007098:	4013      	ands	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b06      	cmp	r3, #6
 80070a0:	d015      	beq.n	80070ce <HAL_TIM_Base_Start_IT+0xbe>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a8:	d011      	beq.n	80070ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f042 0201 	orr.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ba:	e008      	b.n	80070ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0201 	orr.w	r2, r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	e000      	b.n	80070d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40010000 	.word	0x40010000
 80070e4:	40000400 	.word	0x40000400
 80070e8:	40000800 	.word	0x40000800
 80070ec:	40000c00 	.word	0x40000c00
 80070f0:	40010400 	.word	0x40010400
 80070f4:	40001800 	.word	0x40001800
 80070f8:	40014000 	.word	0x40014000
 80070fc:	00010007 	.word	0x00010007

08007100 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e049      	b.n	80071a6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d106      	bne.n	800712c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f841 	bl	80071ae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3304      	adds	r3, #4
 800713c:	4619      	mov	r1, r3
 800713e:	4610      	mov	r0, r2
 8007140:	f000 fc76 	bl	8007a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
	...

080071c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d104      	bne.n	80071e2 <HAL_TIM_IC_Start_IT+0x1e>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	e023      	b.n	800722a <HAL_TIM_IC_Start_IT+0x66>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d104      	bne.n	80071f2 <HAL_TIM_IC_Start_IT+0x2e>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	e01b      	b.n	800722a <HAL_TIM_IC_Start_IT+0x66>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	d104      	bne.n	8007202 <HAL_TIM_IC_Start_IT+0x3e>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	e013      	b.n	800722a <HAL_TIM_IC_Start_IT+0x66>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b0c      	cmp	r3, #12
 8007206:	d104      	bne.n	8007212 <HAL_TIM_IC_Start_IT+0x4e>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800720e:	b2db      	uxtb	r3, r3
 8007210:	e00b      	b.n	800722a <HAL_TIM_IC_Start_IT+0x66>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b10      	cmp	r3, #16
 8007216:	d104      	bne.n	8007222 <HAL_TIM_IC_Start_IT+0x5e>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800721e:	b2db      	uxtb	r3, r3
 8007220:	e003      	b.n	800722a <HAL_TIM_IC_Start_IT+0x66>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007228:	b2db      	uxtb	r3, r3
 800722a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <HAL_TIM_IC_Start_IT+0x78>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007238:	b2db      	uxtb	r3, r3
 800723a:	e013      	b.n	8007264 <HAL_TIM_IC_Start_IT+0xa0>
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b04      	cmp	r3, #4
 8007240:	d104      	bne.n	800724c <HAL_TIM_IC_Start_IT+0x88>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007248:	b2db      	uxtb	r3, r3
 800724a:	e00b      	b.n	8007264 <HAL_TIM_IC_Start_IT+0xa0>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b08      	cmp	r3, #8
 8007250:	d104      	bne.n	800725c <HAL_TIM_IC_Start_IT+0x98>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007258:	b2db      	uxtb	r3, r3
 800725a:	e003      	b.n	8007264 <HAL_TIM_IC_Start_IT+0xa0>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007262:	b2db      	uxtb	r3, r3
 8007264:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007266:	7bbb      	ldrb	r3, [r7, #14]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d102      	bne.n	8007272 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800726c:	7b7b      	ldrb	r3, [r7, #13]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d001      	beq.n	8007276 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e0e2      	b.n	800743c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d104      	bne.n	8007286 <HAL_TIM_IC_Start_IT+0xc2>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007284:	e023      	b.n	80072ce <HAL_TIM_IC_Start_IT+0x10a>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b04      	cmp	r3, #4
 800728a:	d104      	bne.n	8007296 <HAL_TIM_IC_Start_IT+0xd2>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007294:	e01b      	b.n	80072ce <HAL_TIM_IC_Start_IT+0x10a>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b08      	cmp	r3, #8
 800729a:	d104      	bne.n	80072a6 <HAL_TIM_IC_Start_IT+0xe2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072a4:	e013      	b.n	80072ce <HAL_TIM_IC_Start_IT+0x10a>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b0c      	cmp	r3, #12
 80072aa:	d104      	bne.n	80072b6 <HAL_TIM_IC_Start_IT+0xf2>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072b4:	e00b      	b.n	80072ce <HAL_TIM_IC_Start_IT+0x10a>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b10      	cmp	r3, #16
 80072ba:	d104      	bne.n	80072c6 <HAL_TIM_IC_Start_IT+0x102>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072c4:	e003      	b.n	80072ce <HAL_TIM_IC_Start_IT+0x10a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2202      	movs	r2, #2
 80072ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d104      	bne.n	80072de <HAL_TIM_IC_Start_IT+0x11a>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072dc:	e013      	b.n	8007306 <HAL_TIM_IC_Start_IT+0x142>
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b04      	cmp	r3, #4
 80072e2:	d104      	bne.n	80072ee <HAL_TIM_IC_Start_IT+0x12a>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072ec:	e00b      	b.n	8007306 <HAL_TIM_IC_Start_IT+0x142>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b08      	cmp	r3, #8
 80072f2:	d104      	bne.n	80072fe <HAL_TIM_IC_Start_IT+0x13a>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072fc:	e003      	b.n	8007306 <HAL_TIM_IC_Start_IT+0x142>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2202      	movs	r2, #2
 8007302:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b0c      	cmp	r3, #12
 800730a:	d841      	bhi.n	8007390 <HAL_TIM_IC_Start_IT+0x1cc>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <HAL_TIM_IC_Start_IT+0x150>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	08007349 	.word	0x08007349
 8007318:	08007391 	.word	0x08007391
 800731c:	08007391 	.word	0x08007391
 8007320:	08007391 	.word	0x08007391
 8007324:	0800735b 	.word	0x0800735b
 8007328:	08007391 	.word	0x08007391
 800732c:	08007391 	.word	0x08007391
 8007330:	08007391 	.word	0x08007391
 8007334:	0800736d 	.word	0x0800736d
 8007338:	08007391 	.word	0x08007391
 800733c:	08007391 	.word	0x08007391
 8007340:	08007391 	.word	0x08007391
 8007344:	0800737f 	.word	0x0800737f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68da      	ldr	r2, [r3, #12]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0202 	orr.w	r2, r2, #2
 8007356:	60da      	str	r2, [r3, #12]
      break;
 8007358:	e01d      	b.n	8007396 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f042 0204 	orr.w	r2, r2, #4
 8007368:	60da      	str	r2, [r3, #12]
      break;
 800736a:	e014      	b.n	8007396 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0208 	orr.w	r2, r2, #8
 800737a:	60da      	str	r2, [r3, #12]
      break;
 800737c:	e00b      	b.n	8007396 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f042 0210 	orr.w	r2, r2, #16
 800738c:	60da      	str	r2, [r3, #12]
      break;
 800738e:	e002      	b.n	8007396 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	73fb      	strb	r3, [r7, #15]
      break;
 8007394:	bf00      	nop
  }

  if (status == HAL_OK)
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d14e      	bne.n	800743a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2201      	movs	r2, #1
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 fda5 	bl	8007ef4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a25      	ldr	r2, [pc, #148]	; (8007444 <HAL_TIM_IC_Start_IT+0x280>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d022      	beq.n	80073fa <HAL_TIM_IC_Start_IT+0x236>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073bc:	d01d      	beq.n	80073fa <HAL_TIM_IC_Start_IT+0x236>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a21      	ldr	r2, [pc, #132]	; (8007448 <HAL_TIM_IC_Start_IT+0x284>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d018      	beq.n	80073fa <HAL_TIM_IC_Start_IT+0x236>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a1f      	ldr	r2, [pc, #124]	; (800744c <HAL_TIM_IC_Start_IT+0x288>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d013      	beq.n	80073fa <HAL_TIM_IC_Start_IT+0x236>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a1e      	ldr	r2, [pc, #120]	; (8007450 <HAL_TIM_IC_Start_IT+0x28c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d00e      	beq.n	80073fa <HAL_TIM_IC_Start_IT+0x236>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a1c      	ldr	r2, [pc, #112]	; (8007454 <HAL_TIM_IC_Start_IT+0x290>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d009      	beq.n	80073fa <HAL_TIM_IC_Start_IT+0x236>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a1b      	ldr	r2, [pc, #108]	; (8007458 <HAL_TIM_IC_Start_IT+0x294>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d004      	beq.n	80073fa <HAL_TIM_IC_Start_IT+0x236>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a19      	ldr	r2, [pc, #100]	; (800745c <HAL_TIM_IC_Start_IT+0x298>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d115      	bne.n	8007426 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	4b17      	ldr	r3, [pc, #92]	; (8007460 <HAL_TIM_IC_Start_IT+0x29c>)
 8007402:	4013      	ands	r3, r2
 8007404:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b06      	cmp	r3, #6
 800740a:	d015      	beq.n	8007438 <HAL_TIM_IC_Start_IT+0x274>
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007412:	d011      	beq.n	8007438 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0201 	orr.w	r2, r2, #1
 8007422:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007424:	e008      	b.n	8007438 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f042 0201 	orr.w	r2, r2, #1
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	e000      	b.n	800743a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007438:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40010000 	.word	0x40010000
 8007448:	40000400 	.word	0x40000400
 800744c:	40000800 	.word	0x40000800
 8007450:	40000c00 	.word	0x40000c00
 8007454:	40010400 	.word	0x40010400
 8007458:	40001800 	.word	0x40001800
 800745c:	40014000 	.word	0x40014000
 8007460:	00010007 	.word	0x00010007

08007464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b02      	cmp	r3, #2
 8007478:	d122      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b02      	cmp	r3, #2
 8007486:	d11b      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f06f 0202 	mvn.w	r2, #2
 8007490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 faa4 	bl	80079f4 <HAL_TIM_IC_CaptureCallback>
 80074ac:	e005      	b.n	80074ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fa96 	bl	80079e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 faa7 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	d122      	bne.n	8007514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b04      	cmp	r3, #4
 80074da:	d11b      	bne.n	8007514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f06f 0204 	mvn.w	r2, #4
 80074e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2202      	movs	r2, #2
 80074ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fa7a 	bl	80079f4 <HAL_TIM_IC_CaptureCallback>
 8007500:	e005      	b.n	800750e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fa6c 	bl	80079e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fa7d 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	f003 0308 	and.w	r3, r3, #8
 800751e:	2b08      	cmp	r3, #8
 8007520:	d122      	bne.n	8007568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f003 0308 	and.w	r3, r3, #8
 800752c:	2b08      	cmp	r3, #8
 800752e:	d11b      	bne.n	8007568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f06f 0208 	mvn.w	r2, #8
 8007538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2204      	movs	r2, #4
 800753e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f003 0303 	and.w	r3, r3, #3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fa50 	bl	80079f4 <HAL_TIM_IC_CaptureCallback>
 8007554:	e005      	b.n	8007562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa42 	bl	80079e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fa53 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	f003 0310 	and.w	r3, r3, #16
 8007572:	2b10      	cmp	r3, #16
 8007574:	d122      	bne.n	80075bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	2b10      	cmp	r3, #16
 8007582:	d11b      	bne.n	80075bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f06f 0210 	mvn.w	r2, #16
 800758c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2208      	movs	r2, #8
 8007592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fa26 	bl	80079f4 <HAL_TIM_IC_CaptureCallback>
 80075a8:	e005      	b.n	80075b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa18 	bl	80079e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fa29 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d10e      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d107      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f06f 0201 	mvn.w	r2, #1
 80075e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f9f2 	bl	80079cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f2:	2b80      	cmp	r3, #128	; 0x80
 80075f4:	d10e      	bne.n	8007614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007600:	2b80      	cmp	r3, #128	; 0x80
 8007602:	d107      	bne.n	8007614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800760c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fd2e 	bl	8008070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007622:	d10e      	bne.n	8007642 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800762e:	2b80      	cmp	r3, #128	; 0x80
 8007630:	d107      	bne.n	8007642 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800763a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fd21 	bl	8008084 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764c:	2b40      	cmp	r3, #64	; 0x40
 800764e:	d10e      	bne.n	800766e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800765a:	2b40      	cmp	r3, #64	; 0x40
 800765c:	d107      	bne.n	800766e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f9d7 	bl	8007a1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b20      	cmp	r3, #32
 800767a:	d10e      	bne.n	800769a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b20      	cmp	r3, #32
 8007688:	d107      	bne.n	800769a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f06f 0220 	mvn.w	r2, #32
 8007692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fce1 	bl	800805c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800769a:	bf00      	nop
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b086      	sub	sp, #24
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80076bc:	2302      	movs	r3, #2
 80076be:	e088      	b.n	80077d2 <HAL_TIM_IC_ConfigChannel+0x130>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d11b      	bne.n	8007706 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6818      	ldr	r0, [r3, #0]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	6819      	ldr	r1, [r3, #0]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f000 fa41 	bl	8007b64 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	699a      	ldr	r2, [r3, #24]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 020c 	bic.w	r2, r2, #12
 80076f0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6999      	ldr	r1, [r3, #24]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	619a      	str	r2, [r3, #24]
 8007704:	e060      	b.n	80077c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b04      	cmp	r3, #4
 800770a:	d11c      	bne.n	8007746 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6818      	ldr	r0, [r3, #0]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	6819      	ldr	r1, [r3, #0]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	f000 fac5 	bl	8007caa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699a      	ldr	r2, [r3, #24]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800772e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6999      	ldr	r1, [r3, #24]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	021a      	lsls	r2, r3, #8
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	619a      	str	r2, [r3, #24]
 8007744:	e040      	b.n	80077c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b08      	cmp	r3, #8
 800774a:	d11b      	bne.n	8007784 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	6819      	ldr	r1, [r3, #0]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f000 fb12 	bl	8007d84 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69da      	ldr	r2, [r3, #28]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 020c 	bic.w	r2, r2, #12
 800776e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	69d9      	ldr	r1, [r3, #28]
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	61da      	str	r2, [r3, #28]
 8007782:	e021      	b.n	80077c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b0c      	cmp	r3, #12
 8007788:	d11c      	bne.n	80077c4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6818      	ldr	r0, [r3, #0]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	6819      	ldr	r1, [r3, #0]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	f000 fb2f 	bl	8007dfc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69da      	ldr	r2, [r3, #28]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80077ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69d9      	ldr	r1, [r3, #28]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	021a      	lsls	r2, r3, #8
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	61da      	str	r2, [r3, #28]
 80077c2:	e001      	b.n	80077c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d101      	bne.n	80077f8 <HAL_TIM_ConfigClockSource+0x1c>
 80077f4:	2302      	movs	r3, #2
 80077f6:	e0dc      	b.n	80079b2 <HAL_TIM_ConfigClockSource+0x1d6>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	4b6a      	ldr	r3, [pc, #424]	; (80079bc <HAL_TIM_ConfigClockSource+0x1e0>)
 8007814:	4013      	ands	r3, r2
 8007816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800781e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a64      	ldr	r2, [pc, #400]	; (80079c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	f000 80a9 	beq.w	8007986 <HAL_TIM_ConfigClockSource+0x1aa>
 8007834:	4a62      	ldr	r2, [pc, #392]	; (80079c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	f200 80ae 	bhi.w	8007998 <HAL_TIM_ConfigClockSource+0x1bc>
 800783c:	4a61      	ldr	r2, [pc, #388]	; (80079c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800783e:	4293      	cmp	r3, r2
 8007840:	f000 80a1 	beq.w	8007986 <HAL_TIM_ConfigClockSource+0x1aa>
 8007844:	4a5f      	ldr	r2, [pc, #380]	; (80079c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007846:	4293      	cmp	r3, r2
 8007848:	f200 80a6 	bhi.w	8007998 <HAL_TIM_ConfigClockSource+0x1bc>
 800784c:	4a5e      	ldr	r2, [pc, #376]	; (80079c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800784e:	4293      	cmp	r3, r2
 8007850:	f000 8099 	beq.w	8007986 <HAL_TIM_ConfigClockSource+0x1aa>
 8007854:	4a5c      	ldr	r2, [pc, #368]	; (80079c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007856:	4293      	cmp	r3, r2
 8007858:	f200 809e 	bhi.w	8007998 <HAL_TIM_ConfigClockSource+0x1bc>
 800785c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007860:	f000 8091 	beq.w	8007986 <HAL_TIM_ConfigClockSource+0x1aa>
 8007864:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007868:	f200 8096 	bhi.w	8007998 <HAL_TIM_ConfigClockSource+0x1bc>
 800786c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007870:	f000 8089 	beq.w	8007986 <HAL_TIM_ConfigClockSource+0x1aa>
 8007874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007878:	f200 808e 	bhi.w	8007998 <HAL_TIM_ConfigClockSource+0x1bc>
 800787c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007880:	d03e      	beq.n	8007900 <HAL_TIM_ConfigClockSource+0x124>
 8007882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007886:	f200 8087 	bhi.w	8007998 <HAL_TIM_ConfigClockSource+0x1bc>
 800788a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788e:	f000 8086 	beq.w	800799e <HAL_TIM_ConfigClockSource+0x1c2>
 8007892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007896:	d87f      	bhi.n	8007998 <HAL_TIM_ConfigClockSource+0x1bc>
 8007898:	2b70      	cmp	r3, #112	; 0x70
 800789a:	d01a      	beq.n	80078d2 <HAL_TIM_ConfigClockSource+0xf6>
 800789c:	2b70      	cmp	r3, #112	; 0x70
 800789e:	d87b      	bhi.n	8007998 <HAL_TIM_ConfigClockSource+0x1bc>
 80078a0:	2b60      	cmp	r3, #96	; 0x60
 80078a2:	d050      	beq.n	8007946 <HAL_TIM_ConfigClockSource+0x16a>
 80078a4:	2b60      	cmp	r3, #96	; 0x60
 80078a6:	d877      	bhi.n	8007998 <HAL_TIM_ConfigClockSource+0x1bc>
 80078a8:	2b50      	cmp	r3, #80	; 0x50
 80078aa:	d03c      	beq.n	8007926 <HAL_TIM_ConfigClockSource+0x14a>
 80078ac:	2b50      	cmp	r3, #80	; 0x50
 80078ae:	d873      	bhi.n	8007998 <HAL_TIM_ConfigClockSource+0x1bc>
 80078b0:	2b40      	cmp	r3, #64	; 0x40
 80078b2:	d058      	beq.n	8007966 <HAL_TIM_ConfigClockSource+0x18a>
 80078b4:	2b40      	cmp	r3, #64	; 0x40
 80078b6:	d86f      	bhi.n	8007998 <HAL_TIM_ConfigClockSource+0x1bc>
 80078b8:	2b30      	cmp	r3, #48	; 0x30
 80078ba:	d064      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0x1aa>
 80078bc:	2b30      	cmp	r3, #48	; 0x30
 80078be:	d86b      	bhi.n	8007998 <HAL_TIM_ConfigClockSource+0x1bc>
 80078c0:	2b20      	cmp	r3, #32
 80078c2:	d060      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0x1aa>
 80078c4:	2b20      	cmp	r3, #32
 80078c6:	d867      	bhi.n	8007998 <HAL_TIM_ConfigClockSource+0x1bc>
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d05c      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0x1aa>
 80078cc:	2b10      	cmp	r3, #16
 80078ce:	d05a      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0x1aa>
 80078d0:	e062      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6818      	ldr	r0, [r3, #0]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	6899      	ldr	r1, [r3, #8]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f000 fae7 	bl	8007eb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	609a      	str	r2, [r3, #8]
      break;
 80078fe:	e04f      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6818      	ldr	r0, [r3, #0]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	6899      	ldr	r1, [r3, #8]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f000 fad0 	bl	8007eb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689a      	ldr	r2, [r3, #8]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007922:	609a      	str	r2, [r3, #8]
      break;
 8007924:	e03c      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6818      	ldr	r0, [r3, #0]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	6859      	ldr	r1, [r3, #4]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	461a      	mov	r2, r3
 8007934:	f000 f98a 	bl	8007c4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2150      	movs	r1, #80	; 0x50
 800793e:	4618      	mov	r0, r3
 8007940:	f000 fa9a 	bl	8007e78 <TIM_ITRx_SetConfig>
      break;
 8007944:	e02c      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6818      	ldr	r0, [r3, #0]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	6859      	ldr	r1, [r3, #4]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	461a      	mov	r2, r3
 8007954:	f000 f9e6 	bl	8007d24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2160      	movs	r1, #96	; 0x60
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fa8a 	bl	8007e78 <TIM_ITRx_SetConfig>
      break;
 8007964:	e01c      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6859      	ldr	r1, [r3, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	461a      	mov	r2, r3
 8007974:	f000 f96a 	bl	8007c4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2140      	movs	r1, #64	; 0x40
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fa7a 	bl	8007e78 <TIM_ITRx_SetConfig>
      break;
 8007984:	e00c      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4619      	mov	r1, r3
 8007990:	4610      	mov	r0, r2
 8007992:	f000 fa71 	bl	8007e78 <TIM_ITRx_SetConfig>
      break;
 8007996:	e003      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	73fb      	strb	r3, [r7, #15]
      break;
 800799c:	e000      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800799e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	ffceff88 	.word	0xffceff88
 80079c0:	00100040 	.word	0x00100040
 80079c4:	00100030 	.word	0x00100030
 80079c8:	00100020 	.word	0x00100020

080079cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a40      	ldr	r2, [pc, #256]	; (8007b44 <TIM_Base_SetConfig+0x114>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d013      	beq.n	8007a70 <TIM_Base_SetConfig+0x40>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4e:	d00f      	beq.n	8007a70 <TIM_Base_SetConfig+0x40>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a3d      	ldr	r2, [pc, #244]	; (8007b48 <TIM_Base_SetConfig+0x118>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00b      	beq.n	8007a70 <TIM_Base_SetConfig+0x40>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a3c      	ldr	r2, [pc, #240]	; (8007b4c <TIM_Base_SetConfig+0x11c>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d007      	beq.n	8007a70 <TIM_Base_SetConfig+0x40>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a3b      	ldr	r2, [pc, #236]	; (8007b50 <TIM_Base_SetConfig+0x120>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d003      	beq.n	8007a70 <TIM_Base_SetConfig+0x40>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a3a      	ldr	r2, [pc, #232]	; (8007b54 <TIM_Base_SetConfig+0x124>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d108      	bne.n	8007a82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a2f      	ldr	r2, [pc, #188]	; (8007b44 <TIM_Base_SetConfig+0x114>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d01f      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a90:	d01b      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a2c      	ldr	r2, [pc, #176]	; (8007b48 <TIM_Base_SetConfig+0x118>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d017      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a2b      	ldr	r2, [pc, #172]	; (8007b4c <TIM_Base_SetConfig+0x11c>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d013      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a2a      	ldr	r2, [pc, #168]	; (8007b50 <TIM_Base_SetConfig+0x120>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00f      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a29      	ldr	r2, [pc, #164]	; (8007b54 <TIM_Base_SetConfig+0x124>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00b      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a28      	ldr	r2, [pc, #160]	; (8007b58 <TIM_Base_SetConfig+0x128>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d007      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a27      	ldr	r2, [pc, #156]	; (8007b5c <TIM_Base_SetConfig+0x12c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a26      	ldr	r2, [pc, #152]	; (8007b60 <TIM_Base_SetConfig+0x130>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d108      	bne.n	8007adc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a10      	ldr	r2, [pc, #64]	; (8007b44 <TIM_Base_SetConfig+0x114>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d00f      	beq.n	8007b28 <TIM_Base_SetConfig+0xf8>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a12      	ldr	r2, [pc, #72]	; (8007b54 <TIM_Base_SetConfig+0x124>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d00b      	beq.n	8007b28 <TIM_Base_SetConfig+0xf8>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a11      	ldr	r2, [pc, #68]	; (8007b58 <TIM_Base_SetConfig+0x128>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d007      	beq.n	8007b28 <TIM_Base_SetConfig+0xf8>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a10      	ldr	r2, [pc, #64]	; (8007b5c <TIM_Base_SetConfig+0x12c>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d003      	beq.n	8007b28 <TIM_Base_SetConfig+0xf8>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a0f      	ldr	r2, [pc, #60]	; (8007b60 <TIM_Base_SetConfig+0x130>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d103      	bne.n	8007b30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	691a      	ldr	r2, [r3, #16]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	615a      	str	r2, [r3, #20]
}
 8007b36:	bf00      	nop
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	40010000 	.word	0x40010000
 8007b48:	40000400 	.word	0x40000400
 8007b4c:	40000800 	.word	0x40000800
 8007b50:	40000c00 	.word	0x40000c00
 8007b54:	40010400 	.word	0x40010400
 8007b58:	40014000 	.word	0x40014000
 8007b5c:	40014400 	.word	0x40014400
 8007b60:	40014800 	.word	0x40014800

08007b64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	f023 0201 	bic.w	r2, r3, #1
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	4a28      	ldr	r2, [pc, #160]	; (8007c30 <TIM_TI1_SetConfig+0xcc>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d01b      	beq.n	8007bca <TIM_TI1_SetConfig+0x66>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b98:	d017      	beq.n	8007bca <TIM_TI1_SetConfig+0x66>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	4a25      	ldr	r2, [pc, #148]	; (8007c34 <TIM_TI1_SetConfig+0xd0>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d013      	beq.n	8007bca <TIM_TI1_SetConfig+0x66>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4a24      	ldr	r2, [pc, #144]	; (8007c38 <TIM_TI1_SetConfig+0xd4>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00f      	beq.n	8007bca <TIM_TI1_SetConfig+0x66>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	4a23      	ldr	r2, [pc, #140]	; (8007c3c <TIM_TI1_SetConfig+0xd8>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00b      	beq.n	8007bca <TIM_TI1_SetConfig+0x66>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4a22      	ldr	r2, [pc, #136]	; (8007c40 <TIM_TI1_SetConfig+0xdc>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d007      	beq.n	8007bca <TIM_TI1_SetConfig+0x66>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	4a21      	ldr	r2, [pc, #132]	; (8007c44 <TIM_TI1_SetConfig+0xe0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d003      	beq.n	8007bca <TIM_TI1_SetConfig+0x66>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4a20      	ldr	r2, [pc, #128]	; (8007c48 <TIM_TI1_SetConfig+0xe4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d101      	bne.n	8007bce <TIM_TI1_SetConfig+0x6a>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e000      	b.n	8007bd0 <TIM_TI1_SetConfig+0x6c>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d008      	beq.n	8007be6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	f023 0303 	bic.w	r3, r3, #3
 8007bda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]
 8007be4:	e003      	b.n	8007bee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f043 0301 	orr.w	r3, r3, #1
 8007bec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f023 030a 	bic.w	r3, r3, #10
 8007c08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	f003 030a 	and.w	r3, r3, #10
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	621a      	str	r2, [r3, #32]
}
 8007c22:	bf00      	nop
 8007c24:	371c      	adds	r7, #28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	40010000 	.word	0x40010000
 8007c34:	40000400 	.word	0x40000400
 8007c38:	40000800 	.word	0x40000800
 8007c3c:	40000c00 	.word	0x40000c00
 8007c40:	40010400 	.word	0x40010400
 8007c44:	40001800 	.word	0x40001800
 8007c48:	40014000 	.word	0x40014000

08007c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	f023 0201 	bic.w	r2, r3, #1
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	011b      	lsls	r3, r3, #4
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f023 030a 	bic.w	r3, r3, #10
 8007c88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	621a      	str	r2, [r3, #32]
}
 8007c9e:	bf00      	nop
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b087      	sub	sp, #28
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	607a      	str	r2, [r7, #4]
 8007cb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	f023 0210 	bic.w	r2, r3, #16
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ce8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	031b      	lsls	r3, r3, #12
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cfc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	011b      	lsls	r3, r3, #4
 8007d02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	621a      	str	r2, [r3, #32]
}
 8007d18:	bf00      	nop
 8007d1a:	371c      	adds	r7, #28
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6a1b      	ldr	r3, [r3, #32]
 8007d34:	f023 0210 	bic.w	r2, r3, #16
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	031b      	lsls	r3, r3, #12
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	011b      	lsls	r3, r3, #4
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	621a      	str	r2, [r3, #32]
}
 8007d78:	bf00      	nop
 8007d7a:	371c      	adds	r7, #28
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f023 0303 	bic.w	r3, r3, #3
 8007db0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	011b      	lsls	r3, r3, #4
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007dd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	021b      	lsls	r3, r3, #8
 8007dda:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	621a      	str	r2, [r3, #32]
}
 8007df0:	bf00      	nop
 8007df2:	371c      	adds	r7, #28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	021b      	lsls	r3, r3, #8
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	031b      	lsls	r3, r3, #12
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007e4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	031b      	lsls	r3, r3, #12
 8007e54:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	621a      	str	r2, [r3, #32]
}
 8007e6a:	bf00      	nop
 8007e6c:	371c      	adds	r7, #28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
	...

08007e78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	4b09      	ldr	r3, [pc, #36]	; (8007eb0 <TIM_ITRx_SetConfig+0x38>)
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	f043 0307 	orr.w	r3, r3, #7
 8007e9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	609a      	str	r2, [r3, #8]
}
 8007ea2:	bf00      	nop
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	ffcfff8f 	.word	0xffcfff8f

08007eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	021a      	lsls	r2, r3, #8
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	609a      	str	r2, [r3, #8]
}
 8007ee8:	bf00      	nop
 8007eea:	371c      	adds	r7, #28
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	f003 031f 	and.w	r3, r3, #31
 8007f06:	2201      	movs	r2, #1
 8007f08:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a1a      	ldr	r2, [r3, #32]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	43db      	mvns	r3, r3
 8007f16:	401a      	ands	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a1a      	ldr	r2, [r3, #32]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f003 031f 	and.w	r3, r3, #31
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	fa01 f303 	lsl.w	r3, r1, r3
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	621a      	str	r2, [r3, #32]
}
 8007f32:	bf00      	nop
 8007f34:	371c      	adds	r7, #28
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
	...

08007f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d101      	bne.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f54:	2302      	movs	r3, #2
 8007f56:	e06d      	b.n	8008034 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a30      	ldr	r2, [pc, #192]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d004      	beq.n	8007f8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a2f      	ldr	r2, [pc, #188]	; (8008044 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d108      	bne.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a20      	ldr	r2, [pc, #128]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d022      	beq.n	8008008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fca:	d01d      	beq.n	8008008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a1d      	ldr	r2, [pc, #116]	; (8008048 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d018      	beq.n	8008008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a1c      	ldr	r2, [pc, #112]	; (800804c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d013      	beq.n	8008008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a1a      	ldr	r2, [pc, #104]	; (8008050 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00e      	beq.n	8008008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a15      	ldr	r2, [pc, #84]	; (8008044 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d009      	beq.n	8008008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a16      	ldr	r2, [pc, #88]	; (8008054 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d004      	beq.n	8008008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a15      	ldr	r2, [pc, #84]	; (8008058 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d10c      	bne.n	8008022 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800800e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	4313      	orrs	r3, r2
 8008018:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	40010000 	.word	0x40010000
 8008044:	40010400 	.word	0x40010400
 8008048:	40000400 	.word	0x40000400
 800804c:	40000800 	.word	0x40000800
 8008050:	40000c00 	.word	0x40000c00
 8008054:	40001800 	.word	0x40001800
 8008058:	40014000 	.word	0x40014000

0800805c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e042      	b.n	8008130 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d106      	bne.n	80080c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7f9 fdcd 	bl	8001c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2224      	movs	r2, #36	; 0x24
 80080c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 0201 	bic.w	r2, r2, #1
 80080d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f8c2 	bl	8008264 <UART_SetConfig>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d101      	bne.n	80080ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e022      	b.n	8008130 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fe1e 	bl	8008d34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008106:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689a      	ldr	r2, [r3, #8]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008116:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f042 0201 	orr.w	r2, r2, #1
 8008126:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fea5 	bl	8008e78 <UART_CheckIdleState>
 800812e:	4603      	mov	r3, r0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08a      	sub	sp, #40	; 0x28
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	4613      	mov	r3, r2
 8008146:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800814e:	2b20      	cmp	r3, #32
 8008150:	f040 8083 	bne.w	800825a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <HAL_UART_Transmit+0x28>
 800815a:	88fb      	ldrh	r3, [r7, #6]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e07b      	b.n	800825c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <HAL_UART_Transmit+0x3a>
 800816e:	2302      	movs	r3, #2
 8008170:	e074      	b.n	800825c <HAL_UART_Transmit+0x124>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2221      	movs	r2, #33	; 0x21
 8008186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800818a:	f7fa f89b 	bl	80022c4 <HAL_GetTick>
 800818e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	88fa      	ldrh	r2, [r7, #6]
 8008194:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	88fa      	ldrh	r2, [r7, #6]
 800819c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a8:	d108      	bne.n	80081bc <HAL_UART_Transmit+0x84>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d104      	bne.n	80081bc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	61bb      	str	r3, [r7, #24]
 80081ba:	e003      	b.n	80081c4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081c0:	2300      	movs	r3, #0
 80081c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80081cc:	e02c      	b.n	8008228 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2200      	movs	r2, #0
 80081d6:	2180      	movs	r1, #128	; 0x80
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 fe98 	bl	8008f0e <UART_WaitOnFlagUntilTimeout>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e039      	b.n	800825c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10b      	bne.n	8008206 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	3302      	adds	r3, #2
 8008202:	61bb      	str	r3, [r7, #24]
 8008204:	e007      	b.n	8008216 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	781a      	ldrb	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	3301      	adds	r3, #1
 8008214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800821c:	b29b      	uxth	r3, r3
 800821e:	3b01      	subs	r3, #1
 8008220:	b29a      	uxth	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800822e:	b29b      	uxth	r3, r3
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1cc      	bne.n	80081ce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	2200      	movs	r2, #0
 800823c:	2140      	movs	r1, #64	; 0x40
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 fe65 	bl	8008f0e <UART_WaitOnFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e006      	b.n	800825c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2220      	movs	r2, #32
 8008252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	e000      	b.n	800825c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800825a:	2302      	movs	r3, #2
  }
}
 800825c:	4618      	mov	r0, r3
 800825e:	3720      	adds	r7, #32
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008268:	b092      	sub	sp, #72	; 0x48
 800826a:	af00      	add	r7, sp, #0
 800826c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	431a      	orrs	r2, r3
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	431a      	orrs	r2, r3
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	69db      	ldr	r3, [r3, #28]
 8008288:	4313      	orrs	r3, r2
 800828a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4bbe      	ldr	r3, [pc, #760]	; (800858c <UART_SetConfig+0x328>)
 8008294:	4013      	ands	r3, r2
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	6812      	ldr	r2, [r2, #0]
 800829a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800829c:	430b      	orrs	r3, r1
 800829e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	68da      	ldr	r2, [r3, #12]
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	430a      	orrs	r2, r1
 80082b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4ab3      	ldr	r2, [pc, #716]	; (8008590 <UART_SetConfig+0x32c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d004      	beq.n	80082d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082cc:	4313      	orrs	r3, r2
 80082ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	689a      	ldr	r2, [r3, #8]
 80082d6:	4baf      	ldr	r3, [pc, #700]	; (8008594 <UART_SetConfig+0x330>)
 80082d8:	4013      	ands	r3, r2
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	6812      	ldr	r2, [r2, #0]
 80082de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082e0:	430b      	orrs	r3, r1
 80082e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ea:	f023 010f 	bic.w	r1, r3, #15
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4aa6      	ldr	r2, [pc, #664]	; (8008598 <UART_SetConfig+0x334>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d177      	bne.n	80083f4 <UART_SetConfig+0x190>
 8008304:	4ba5      	ldr	r3, [pc, #660]	; (800859c <UART_SetConfig+0x338>)
 8008306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008308:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800830c:	2b28      	cmp	r3, #40	; 0x28
 800830e:	d86d      	bhi.n	80083ec <UART_SetConfig+0x188>
 8008310:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <UART_SetConfig+0xb4>)
 8008312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008316:	bf00      	nop
 8008318:	080083bd 	.word	0x080083bd
 800831c:	080083ed 	.word	0x080083ed
 8008320:	080083ed 	.word	0x080083ed
 8008324:	080083ed 	.word	0x080083ed
 8008328:	080083ed 	.word	0x080083ed
 800832c:	080083ed 	.word	0x080083ed
 8008330:	080083ed 	.word	0x080083ed
 8008334:	080083ed 	.word	0x080083ed
 8008338:	080083c5 	.word	0x080083c5
 800833c:	080083ed 	.word	0x080083ed
 8008340:	080083ed 	.word	0x080083ed
 8008344:	080083ed 	.word	0x080083ed
 8008348:	080083ed 	.word	0x080083ed
 800834c:	080083ed 	.word	0x080083ed
 8008350:	080083ed 	.word	0x080083ed
 8008354:	080083ed 	.word	0x080083ed
 8008358:	080083cd 	.word	0x080083cd
 800835c:	080083ed 	.word	0x080083ed
 8008360:	080083ed 	.word	0x080083ed
 8008364:	080083ed 	.word	0x080083ed
 8008368:	080083ed 	.word	0x080083ed
 800836c:	080083ed 	.word	0x080083ed
 8008370:	080083ed 	.word	0x080083ed
 8008374:	080083ed 	.word	0x080083ed
 8008378:	080083d5 	.word	0x080083d5
 800837c:	080083ed 	.word	0x080083ed
 8008380:	080083ed 	.word	0x080083ed
 8008384:	080083ed 	.word	0x080083ed
 8008388:	080083ed 	.word	0x080083ed
 800838c:	080083ed 	.word	0x080083ed
 8008390:	080083ed 	.word	0x080083ed
 8008394:	080083ed 	.word	0x080083ed
 8008398:	080083dd 	.word	0x080083dd
 800839c:	080083ed 	.word	0x080083ed
 80083a0:	080083ed 	.word	0x080083ed
 80083a4:	080083ed 	.word	0x080083ed
 80083a8:	080083ed 	.word	0x080083ed
 80083ac:	080083ed 	.word	0x080083ed
 80083b0:	080083ed 	.word	0x080083ed
 80083b4:	080083ed 	.word	0x080083ed
 80083b8:	080083e5 	.word	0x080083e5
 80083bc:	2301      	movs	r3, #1
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c2:	e222      	b.n	800880a <UART_SetConfig+0x5a6>
 80083c4:	2304      	movs	r3, #4
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ca:	e21e      	b.n	800880a <UART_SetConfig+0x5a6>
 80083cc:	2308      	movs	r3, #8
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d2:	e21a      	b.n	800880a <UART_SetConfig+0x5a6>
 80083d4:	2310      	movs	r3, #16
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083da:	e216      	b.n	800880a <UART_SetConfig+0x5a6>
 80083dc:	2320      	movs	r3, #32
 80083de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083e2:	e212      	b.n	800880a <UART_SetConfig+0x5a6>
 80083e4:	2340      	movs	r3, #64	; 0x40
 80083e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ea:	e20e      	b.n	800880a <UART_SetConfig+0x5a6>
 80083ec:	2380      	movs	r3, #128	; 0x80
 80083ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083f2:	e20a      	b.n	800880a <UART_SetConfig+0x5a6>
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a69      	ldr	r2, [pc, #420]	; (80085a0 <UART_SetConfig+0x33c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d130      	bne.n	8008460 <UART_SetConfig+0x1fc>
 80083fe:	4b67      	ldr	r3, [pc, #412]	; (800859c <UART_SetConfig+0x338>)
 8008400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008402:	f003 0307 	and.w	r3, r3, #7
 8008406:	2b05      	cmp	r3, #5
 8008408:	d826      	bhi.n	8008458 <UART_SetConfig+0x1f4>
 800840a:	a201      	add	r2, pc, #4	; (adr r2, 8008410 <UART_SetConfig+0x1ac>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	08008429 	.word	0x08008429
 8008414:	08008431 	.word	0x08008431
 8008418:	08008439 	.word	0x08008439
 800841c:	08008441 	.word	0x08008441
 8008420:	08008449 	.word	0x08008449
 8008424:	08008451 	.word	0x08008451
 8008428:	2300      	movs	r3, #0
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842e:	e1ec      	b.n	800880a <UART_SetConfig+0x5a6>
 8008430:	2304      	movs	r3, #4
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008436:	e1e8      	b.n	800880a <UART_SetConfig+0x5a6>
 8008438:	2308      	movs	r3, #8
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843e:	e1e4      	b.n	800880a <UART_SetConfig+0x5a6>
 8008440:	2310      	movs	r3, #16
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008446:	e1e0      	b.n	800880a <UART_SetConfig+0x5a6>
 8008448:	2320      	movs	r3, #32
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844e:	e1dc      	b.n	800880a <UART_SetConfig+0x5a6>
 8008450:	2340      	movs	r3, #64	; 0x40
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008456:	e1d8      	b.n	800880a <UART_SetConfig+0x5a6>
 8008458:	2380      	movs	r3, #128	; 0x80
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845e:	e1d4      	b.n	800880a <UART_SetConfig+0x5a6>
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a4f      	ldr	r2, [pc, #316]	; (80085a4 <UART_SetConfig+0x340>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d130      	bne.n	80084cc <UART_SetConfig+0x268>
 800846a:	4b4c      	ldr	r3, [pc, #304]	; (800859c <UART_SetConfig+0x338>)
 800846c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800846e:	f003 0307 	and.w	r3, r3, #7
 8008472:	2b05      	cmp	r3, #5
 8008474:	d826      	bhi.n	80084c4 <UART_SetConfig+0x260>
 8008476:	a201      	add	r2, pc, #4	; (adr r2, 800847c <UART_SetConfig+0x218>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	08008495 	.word	0x08008495
 8008480:	0800849d 	.word	0x0800849d
 8008484:	080084a5 	.word	0x080084a5
 8008488:	080084ad 	.word	0x080084ad
 800848c:	080084b5 	.word	0x080084b5
 8008490:	080084bd 	.word	0x080084bd
 8008494:	2300      	movs	r3, #0
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849a:	e1b6      	b.n	800880a <UART_SetConfig+0x5a6>
 800849c:	2304      	movs	r3, #4
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a2:	e1b2      	b.n	800880a <UART_SetConfig+0x5a6>
 80084a4:	2308      	movs	r3, #8
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084aa:	e1ae      	b.n	800880a <UART_SetConfig+0x5a6>
 80084ac:	2310      	movs	r3, #16
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b2:	e1aa      	b.n	800880a <UART_SetConfig+0x5a6>
 80084b4:	2320      	movs	r3, #32
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ba:	e1a6      	b.n	800880a <UART_SetConfig+0x5a6>
 80084bc:	2340      	movs	r3, #64	; 0x40
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c2:	e1a2      	b.n	800880a <UART_SetConfig+0x5a6>
 80084c4:	2380      	movs	r3, #128	; 0x80
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ca:	e19e      	b.n	800880a <UART_SetConfig+0x5a6>
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a35      	ldr	r2, [pc, #212]	; (80085a8 <UART_SetConfig+0x344>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d130      	bne.n	8008538 <UART_SetConfig+0x2d4>
 80084d6:	4b31      	ldr	r3, [pc, #196]	; (800859c <UART_SetConfig+0x338>)
 80084d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084da:	f003 0307 	and.w	r3, r3, #7
 80084de:	2b05      	cmp	r3, #5
 80084e0:	d826      	bhi.n	8008530 <UART_SetConfig+0x2cc>
 80084e2:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <UART_SetConfig+0x284>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	08008501 	.word	0x08008501
 80084ec:	08008509 	.word	0x08008509
 80084f0:	08008511 	.word	0x08008511
 80084f4:	08008519 	.word	0x08008519
 80084f8:	08008521 	.word	0x08008521
 80084fc:	08008529 	.word	0x08008529
 8008500:	2300      	movs	r3, #0
 8008502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008506:	e180      	b.n	800880a <UART_SetConfig+0x5a6>
 8008508:	2304      	movs	r3, #4
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850e:	e17c      	b.n	800880a <UART_SetConfig+0x5a6>
 8008510:	2308      	movs	r3, #8
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008516:	e178      	b.n	800880a <UART_SetConfig+0x5a6>
 8008518:	2310      	movs	r3, #16
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800851e:	e174      	b.n	800880a <UART_SetConfig+0x5a6>
 8008520:	2320      	movs	r3, #32
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008526:	e170      	b.n	800880a <UART_SetConfig+0x5a6>
 8008528:	2340      	movs	r3, #64	; 0x40
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852e:	e16c      	b.n	800880a <UART_SetConfig+0x5a6>
 8008530:	2380      	movs	r3, #128	; 0x80
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008536:	e168      	b.n	800880a <UART_SetConfig+0x5a6>
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a1b      	ldr	r2, [pc, #108]	; (80085ac <UART_SetConfig+0x348>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d142      	bne.n	80085c8 <UART_SetConfig+0x364>
 8008542:	4b16      	ldr	r3, [pc, #88]	; (800859c <UART_SetConfig+0x338>)
 8008544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	2b05      	cmp	r3, #5
 800854c:	d838      	bhi.n	80085c0 <UART_SetConfig+0x35c>
 800854e:	a201      	add	r2, pc, #4	; (adr r2, 8008554 <UART_SetConfig+0x2f0>)
 8008550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008554:	0800856d 	.word	0x0800856d
 8008558:	08008575 	.word	0x08008575
 800855c:	0800857d 	.word	0x0800857d
 8008560:	08008585 	.word	0x08008585
 8008564:	080085b1 	.word	0x080085b1
 8008568:	080085b9 	.word	0x080085b9
 800856c:	2300      	movs	r3, #0
 800856e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008572:	e14a      	b.n	800880a <UART_SetConfig+0x5a6>
 8008574:	2304      	movs	r3, #4
 8008576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800857a:	e146      	b.n	800880a <UART_SetConfig+0x5a6>
 800857c:	2308      	movs	r3, #8
 800857e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008582:	e142      	b.n	800880a <UART_SetConfig+0x5a6>
 8008584:	2310      	movs	r3, #16
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858a:	e13e      	b.n	800880a <UART_SetConfig+0x5a6>
 800858c:	cfff69f3 	.word	0xcfff69f3
 8008590:	58000c00 	.word	0x58000c00
 8008594:	11fff4ff 	.word	0x11fff4ff
 8008598:	40011000 	.word	0x40011000
 800859c:	58024400 	.word	0x58024400
 80085a0:	40004400 	.word	0x40004400
 80085a4:	40004800 	.word	0x40004800
 80085a8:	40004c00 	.word	0x40004c00
 80085ac:	40005000 	.word	0x40005000
 80085b0:	2320      	movs	r3, #32
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b6:	e128      	b.n	800880a <UART_SetConfig+0x5a6>
 80085b8:	2340      	movs	r3, #64	; 0x40
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085be:	e124      	b.n	800880a <UART_SetConfig+0x5a6>
 80085c0:	2380      	movs	r3, #128	; 0x80
 80085c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085c6:	e120      	b.n	800880a <UART_SetConfig+0x5a6>
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4acb      	ldr	r2, [pc, #812]	; (80088fc <UART_SetConfig+0x698>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d176      	bne.n	80086c0 <UART_SetConfig+0x45c>
 80085d2:	4bcb      	ldr	r3, [pc, #812]	; (8008900 <UART_SetConfig+0x69c>)
 80085d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085da:	2b28      	cmp	r3, #40	; 0x28
 80085dc:	d86c      	bhi.n	80086b8 <UART_SetConfig+0x454>
 80085de:	a201      	add	r2, pc, #4	; (adr r2, 80085e4 <UART_SetConfig+0x380>)
 80085e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e4:	08008689 	.word	0x08008689
 80085e8:	080086b9 	.word	0x080086b9
 80085ec:	080086b9 	.word	0x080086b9
 80085f0:	080086b9 	.word	0x080086b9
 80085f4:	080086b9 	.word	0x080086b9
 80085f8:	080086b9 	.word	0x080086b9
 80085fc:	080086b9 	.word	0x080086b9
 8008600:	080086b9 	.word	0x080086b9
 8008604:	08008691 	.word	0x08008691
 8008608:	080086b9 	.word	0x080086b9
 800860c:	080086b9 	.word	0x080086b9
 8008610:	080086b9 	.word	0x080086b9
 8008614:	080086b9 	.word	0x080086b9
 8008618:	080086b9 	.word	0x080086b9
 800861c:	080086b9 	.word	0x080086b9
 8008620:	080086b9 	.word	0x080086b9
 8008624:	08008699 	.word	0x08008699
 8008628:	080086b9 	.word	0x080086b9
 800862c:	080086b9 	.word	0x080086b9
 8008630:	080086b9 	.word	0x080086b9
 8008634:	080086b9 	.word	0x080086b9
 8008638:	080086b9 	.word	0x080086b9
 800863c:	080086b9 	.word	0x080086b9
 8008640:	080086b9 	.word	0x080086b9
 8008644:	080086a1 	.word	0x080086a1
 8008648:	080086b9 	.word	0x080086b9
 800864c:	080086b9 	.word	0x080086b9
 8008650:	080086b9 	.word	0x080086b9
 8008654:	080086b9 	.word	0x080086b9
 8008658:	080086b9 	.word	0x080086b9
 800865c:	080086b9 	.word	0x080086b9
 8008660:	080086b9 	.word	0x080086b9
 8008664:	080086a9 	.word	0x080086a9
 8008668:	080086b9 	.word	0x080086b9
 800866c:	080086b9 	.word	0x080086b9
 8008670:	080086b9 	.word	0x080086b9
 8008674:	080086b9 	.word	0x080086b9
 8008678:	080086b9 	.word	0x080086b9
 800867c:	080086b9 	.word	0x080086b9
 8008680:	080086b9 	.word	0x080086b9
 8008684:	080086b1 	.word	0x080086b1
 8008688:	2301      	movs	r3, #1
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868e:	e0bc      	b.n	800880a <UART_SetConfig+0x5a6>
 8008690:	2304      	movs	r3, #4
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008696:	e0b8      	b.n	800880a <UART_SetConfig+0x5a6>
 8008698:	2308      	movs	r3, #8
 800869a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869e:	e0b4      	b.n	800880a <UART_SetConfig+0x5a6>
 80086a0:	2310      	movs	r3, #16
 80086a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a6:	e0b0      	b.n	800880a <UART_SetConfig+0x5a6>
 80086a8:	2320      	movs	r3, #32
 80086aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ae:	e0ac      	b.n	800880a <UART_SetConfig+0x5a6>
 80086b0:	2340      	movs	r3, #64	; 0x40
 80086b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b6:	e0a8      	b.n	800880a <UART_SetConfig+0x5a6>
 80086b8:	2380      	movs	r3, #128	; 0x80
 80086ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086be:	e0a4      	b.n	800880a <UART_SetConfig+0x5a6>
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a8f      	ldr	r2, [pc, #572]	; (8008904 <UART_SetConfig+0x6a0>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d130      	bne.n	800872c <UART_SetConfig+0x4c8>
 80086ca:	4b8d      	ldr	r3, [pc, #564]	; (8008900 <UART_SetConfig+0x69c>)
 80086cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	2b05      	cmp	r3, #5
 80086d4:	d826      	bhi.n	8008724 <UART_SetConfig+0x4c0>
 80086d6:	a201      	add	r2, pc, #4	; (adr r2, 80086dc <UART_SetConfig+0x478>)
 80086d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086dc:	080086f5 	.word	0x080086f5
 80086e0:	080086fd 	.word	0x080086fd
 80086e4:	08008705 	.word	0x08008705
 80086e8:	0800870d 	.word	0x0800870d
 80086ec:	08008715 	.word	0x08008715
 80086f0:	0800871d 	.word	0x0800871d
 80086f4:	2300      	movs	r3, #0
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fa:	e086      	b.n	800880a <UART_SetConfig+0x5a6>
 80086fc:	2304      	movs	r3, #4
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008702:	e082      	b.n	800880a <UART_SetConfig+0x5a6>
 8008704:	2308      	movs	r3, #8
 8008706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870a:	e07e      	b.n	800880a <UART_SetConfig+0x5a6>
 800870c:	2310      	movs	r3, #16
 800870e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008712:	e07a      	b.n	800880a <UART_SetConfig+0x5a6>
 8008714:	2320      	movs	r3, #32
 8008716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871a:	e076      	b.n	800880a <UART_SetConfig+0x5a6>
 800871c:	2340      	movs	r3, #64	; 0x40
 800871e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008722:	e072      	b.n	800880a <UART_SetConfig+0x5a6>
 8008724:	2380      	movs	r3, #128	; 0x80
 8008726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872a:	e06e      	b.n	800880a <UART_SetConfig+0x5a6>
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a75      	ldr	r2, [pc, #468]	; (8008908 <UART_SetConfig+0x6a4>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d130      	bne.n	8008798 <UART_SetConfig+0x534>
 8008736:	4b72      	ldr	r3, [pc, #456]	; (8008900 <UART_SetConfig+0x69c>)
 8008738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873a:	f003 0307 	and.w	r3, r3, #7
 800873e:	2b05      	cmp	r3, #5
 8008740:	d826      	bhi.n	8008790 <UART_SetConfig+0x52c>
 8008742:	a201      	add	r2, pc, #4	; (adr r2, 8008748 <UART_SetConfig+0x4e4>)
 8008744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008748:	08008761 	.word	0x08008761
 800874c:	08008769 	.word	0x08008769
 8008750:	08008771 	.word	0x08008771
 8008754:	08008779 	.word	0x08008779
 8008758:	08008781 	.word	0x08008781
 800875c:	08008789 	.word	0x08008789
 8008760:	2300      	movs	r3, #0
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008766:	e050      	b.n	800880a <UART_SetConfig+0x5a6>
 8008768:	2304      	movs	r3, #4
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876e:	e04c      	b.n	800880a <UART_SetConfig+0x5a6>
 8008770:	2308      	movs	r3, #8
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008776:	e048      	b.n	800880a <UART_SetConfig+0x5a6>
 8008778:	2310      	movs	r3, #16
 800877a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800877e:	e044      	b.n	800880a <UART_SetConfig+0x5a6>
 8008780:	2320      	movs	r3, #32
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008786:	e040      	b.n	800880a <UART_SetConfig+0x5a6>
 8008788:	2340      	movs	r3, #64	; 0x40
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878e:	e03c      	b.n	800880a <UART_SetConfig+0x5a6>
 8008790:	2380      	movs	r3, #128	; 0x80
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008796:	e038      	b.n	800880a <UART_SetConfig+0x5a6>
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a5b      	ldr	r2, [pc, #364]	; (800890c <UART_SetConfig+0x6a8>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d130      	bne.n	8008804 <UART_SetConfig+0x5a0>
 80087a2:	4b57      	ldr	r3, [pc, #348]	; (8008900 <UART_SetConfig+0x69c>)
 80087a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	2b05      	cmp	r3, #5
 80087ac:	d826      	bhi.n	80087fc <UART_SetConfig+0x598>
 80087ae:	a201      	add	r2, pc, #4	; (adr r2, 80087b4 <UART_SetConfig+0x550>)
 80087b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b4:	080087cd 	.word	0x080087cd
 80087b8:	080087d5 	.word	0x080087d5
 80087bc:	080087dd 	.word	0x080087dd
 80087c0:	080087e5 	.word	0x080087e5
 80087c4:	080087ed 	.word	0x080087ed
 80087c8:	080087f5 	.word	0x080087f5
 80087cc:	2302      	movs	r3, #2
 80087ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d2:	e01a      	b.n	800880a <UART_SetConfig+0x5a6>
 80087d4:	2304      	movs	r3, #4
 80087d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087da:	e016      	b.n	800880a <UART_SetConfig+0x5a6>
 80087dc:	2308      	movs	r3, #8
 80087de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e2:	e012      	b.n	800880a <UART_SetConfig+0x5a6>
 80087e4:	2310      	movs	r3, #16
 80087e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ea:	e00e      	b.n	800880a <UART_SetConfig+0x5a6>
 80087ec:	2320      	movs	r3, #32
 80087ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f2:	e00a      	b.n	800880a <UART_SetConfig+0x5a6>
 80087f4:	2340      	movs	r3, #64	; 0x40
 80087f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fa:	e006      	b.n	800880a <UART_SetConfig+0x5a6>
 80087fc:	2380      	movs	r3, #128	; 0x80
 80087fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008802:	e002      	b.n	800880a <UART_SetConfig+0x5a6>
 8008804:	2380      	movs	r3, #128	; 0x80
 8008806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a3f      	ldr	r2, [pc, #252]	; (800890c <UART_SetConfig+0x6a8>)
 8008810:	4293      	cmp	r3, r2
 8008812:	f040 80f8 	bne.w	8008a06 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008816:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800881a:	2b20      	cmp	r3, #32
 800881c:	dc46      	bgt.n	80088ac <UART_SetConfig+0x648>
 800881e:	2b02      	cmp	r3, #2
 8008820:	f2c0 8082 	blt.w	8008928 <UART_SetConfig+0x6c4>
 8008824:	3b02      	subs	r3, #2
 8008826:	2b1e      	cmp	r3, #30
 8008828:	d87e      	bhi.n	8008928 <UART_SetConfig+0x6c4>
 800882a:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <UART_SetConfig+0x5cc>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	080088b3 	.word	0x080088b3
 8008834:	08008929 	.word	0x08008929
 8008838:	080088bb 	.word	0x080088bb
 800883c:	08008929 	.word	0x08008929
 8008840:	08008929 	.word	0x08008929
 8008844:	08008929 	.word	0x08008929
 8008848:	080088cb 	.word	0x080088cb
 800884c:	08008929 	.word	0x08008929
 8008850:	08008929 	.word	0x08008929
 8008854:	08008929 	.word	0x08008929
 8008858:	08008929 	.word	0x08008929
 800885c:	08008929 	.word	0x08008929
 8008860:	08008929 	.word	0x08008929
 8008864:	08008929 	.word	0x08008929
 8008868:	080088db 	.word	0x080088db
 800886c:	08008929 	.word	0x08008929
 8008870:	08008929 	.word	0x08008929
 8008874:	08008929 	.word	0x08008929
 8008878:	08008929 	.word	0x08008929
 800887c:	08008929 	.word	0x08008929
 8008880:	08008929 	.word	0x08008929
 8008884:	08008929 	.word	0x08008929
 8008888:	08008929 	.word	0x08008929
 800888c:	08008929 	.word	0x08008929
 8008890:	08008929 	.word	0x08008929
 8008894:	08008929 	.word	0x08008929
 8008898:	08008929 	.word	0x08008929
 800889c:	08008929 	.word	0x08008929
 80088a0:	08008929 	.word	0x08008929
 80088a4:	08008929 	.word	0x08008929
 80088a8:	0800891b 	.word	0x0800891b
 80088ac:	2b40      	cmp	r3, #64	; 0x40
 80088ae:	d037      	beq.n	8008920 <UART_SetConfig+0x6bc>
 80088b0:	e03a      	b.n	8008928 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80088b2:	f7fd ff33 	bl	800671c <HAL_RCCEx_GetD3PCLK1Freq>
 80088b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80088b8:	e03c      	b.n	8008934 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fd ff42 	bl	8006748 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088c8:	e034      	b.n	8008934 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ca:	f107 0318 	add.w	r3, r7, #24
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe f88e 	bl	80069f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088d8:	e02c      	b.n	8008934 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088da:	4b09      	ldr	r3, [pc, #36]	; (8008900 <UART_SetConfig+0x69c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0320 	and.w	r3, r3, #32
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d016      	beq.n	8008914 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088e6:	4b06      	ldr	r3, [pc, #24]	; (8008900 <UART_SetConfig+0x69c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	08db      	lsrs	r3, r3, #3
 80088ec:	f003 0303 	and.w	r3, r3, #3
 80088f0:	4a07      	ldr	r2, [pc, #28]	; (8008910 <UART_SetConfig+0x6ac>)
 80088f2:	fa22 f303 	lsr.w	r3, r2, r3
 80088f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088f8:	e01c      	b.n	8008934 <UART_SetConfig+0x6d0>
 80088fa:	bf00      	nop
 80088fc:	40011400 	.word	0x40011400
 8008900:	58024400 	.word	0x58024400
 8008904:	40007800 	.word	0x40007800
 8008908:	40007c00 	.word	0x40007c00
 800890c:	58000c00 	.word	0x58000c00
 8008910:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008914:	4b9d      	ldr	r3, [pc, #628]	; (8008b8c <UART_SetConfig+0x928>)
 8008916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008918:	e00c      	b.n	8008934 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800891a:	4b9d      	ldr	r3, [pc, #628]	; (8008b90 <UART_SetConfig+0x92c>)
 800891c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800891e:	e009      	b.n	8008934 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008920:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008926:	e005      	b.n	8008934 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008928:	2300      	movs	r3, #0
 800892a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008932:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 81de 	beq.w	8008cf8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	4a94      	ldr	r2, [pc, #592]	; (8008b94 <UART_SetConfig+0x930>)
 8008942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008946:	461a      	mov	r2, r3
 8008948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800894a:	fbb3 f3f2 	udiv	r3, r3, r2
 800894e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	4613      	mov	r3, r2
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	4413      	add	r3, r2
 800895a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800895c:	429a      	cmp	r2, r3
 800895e:	d305      	bcc.n	800896c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008968:	429a      	cmp	r2, r3
 800896a:	d903      	bls.n	8008974 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008972:	e1c1      	b.n	8008cf8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008976:	2200      	movs	r2, #0
 8008978:	60bb      	str	r3, [r7, #8]
 800897a:	60fa      	str	r2, [r7, #12]
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	4a84      	ldr	r2, [pc, #528]	; (8008b94 <UART_SetConfig+0x930>)
 8008982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008986:	b29b      	uxth	r3, r3
 8008988:	2200      	movs	r2, #0
 800898a:	603b      	str	r3, [r7, #0]
 800898c:	607a      	str	r2, [r7, #4]
 800898e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008992:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008996:	f7f7 fc9f 	bl	80002d8 <__aeabi_uldivmod>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4610      	mov	r0, r2
 80089a0:	4619      	mov	r1, r3
 80089a2:	f04f 0200 	mov.w	r2, #0
 80089a6:	f04f 0300 	mov.w	r3, #0
 80089aa:	020b      	lsls	r3, r1, #8
 80089ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089b0:	0202      	lsls	r2, r0, #8
 80089b2:	6979      	ldr	r1, [r7, #20]
 80089b4:	6849      	ldr	r1, [r1, #4]
 80089b6:	0849      	lsrs	r1, r1, #1
 80089b8:	2000      	movs	r0, #0
 80089ba:	460c      	mov	r4, r1
 80089bc:	4605      	mov	r5, r0
 80089be:	eb12 0804 	adds.w	r8, r2, r4
 80089c2:	eb43 0905 	adc.w	r9, r3, r5
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	469a      	mov	sl, r3
 80089ce:	4693      	mov	fp, r2
 80089d0:	4652      	mov	r2, sl
 80089d2:	465b      	mov	r3, fp
 80089d4:	4640      	mov	r0, r8
 80089d6:	4649      	mov	r1, r9
 80089d8:	f7f7 fc7e 	bl	80002d8 <__aeabi_uldivmod>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4613      	mov	r3, r2
 80089e2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089ea:	d308      	bcc.n	80089fe <UART_SetConfig+0x79a>
 80089ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089f2:	d204      	bcs.n	80089fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089fa:	60da      	str	r2, [r3, #12]
 80089fc:	e17c      	b.n	8008cf8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008a04:	e178      	b.n	8008cf8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	69db      	ldr	r3, [r3, #28]
 8008a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a0e:	f040 80c5 	bne.w	8008b9c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008a12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a16:	2b20      	cmp	r3, #32
 8008a18:	dc48      	bgt.n	8008aac <UART_SetConfig+0x848>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	db7b      	blt.n	8008b16 <UART_SetConfig+0x8b2>
 8008a1e:	2b20      	cmp	r3, #32
 8008a20:	d879      	bhi.n	8008b16 <UART_SetConfig+0x8b2>
 8008a22:	a201      	add	r2, pc, #4	; (adr r2, 8008a28 <UART_SetConfig+0x7c4>)
 8008a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a28:	08008ab3 	.word	0x08008ab3
 8008a2c:	08008abb 	.word	0x08008abb
 8008a30:	08008b17 	.word	0x08008b17
 8008a34:	08008b17 	.word	0x08008b17
 8008a38:	08008ac3 	.word	0x08008ac3
 8008a3c:	08008b17 	.word	0x08008b17
 8008a40:	08008b17 	.word	0x08008b17
 8008a44:	08008b17 	.word	0x08008b17
 8008a48:	08008ad3 	.word	0x08008ad3
 8008a4c:	08008b17 	.word	0x08008b17
 8008a50:	08008b17 	.word	0x08008b17
 8008a54:	08008b17 	.word	0x08008b17
 8008a58:	08008b17 	.word	0x08008b17
 8008a5c:	08008b17 	.word	0x08008b17
 8008a60:	08008b17 	.word	0x08008b17
 8008a64:	08008b17 	.word	0x08008b17
 8008a68:	08008ae3 	.word	0x08008ae3
 8008a6c:	08008b17 	.word	0x08008b17
 8008a70:	08008b17 	.word	0x08008b17
 8008a74:	08008b17 	.word	0x08008b17
 8008a78:	08008b17 	.word	0x08008b17
 8008a7c:	08008b17 	.word	0x08008b17
 8008a80:	08008b17 	.word	0x08008b17
 8008a84:	08008b17 	.word	0x08008b17
 8008a88:	08008b17 	.word	0x08008b17
 8008a8c:	08008b17 	.word	0x08008b17
 8008a90:	08008b17 	.word	0x08008b17
 8008a94:	08008b17 	.word	0x08008b17
 8008a98:	08008b17 	.word	0x08008b17
 8008a9c:	08008b17 	.word	0x08008b17
 8008aa0:	08008b17 	.word	0x08008b17
 8008aa4:	08008b17 	.word	0x08008b17
 8008aa8:	08008b09 	.word	0x08008b09
 8008aac:	2b40      	cmp	r3, #64	; 0x40
 8008aae:	d02e      	beq.n	8008b0e <UART_SetConfig+0x8aa>
 8008ab0:	e031      	b.n	8008b16 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ab2:	f7fc fec1 	bl	8005838 <HAL_RCC_GetPCLK1Freq>
 8008ab6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ab8:	e033      	b.n	8008b22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008aba:	f7fc fed3 	bl	8005864 <HAL_RCC_GetPCLK2Freq>
 8008abe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ac0:	e02f      	b.n	8008b22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fd fe3e 	bl	8006748 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ad0:	e027      	b.n	8008b22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ad2:	f107 0318 	add.w	r3, r7, #24
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fd ff8a 	bl	80069f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ae0:	e01f      	b.n	8008b22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ae2:	4b2d      	ldr	r3, [pc, #180]	; (8008b98 <UART_SetConfig+0x934>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0320 	and.w	r3, r3, #32
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d009      	beq.n	8008b02 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008aee:	4b2a      	ldr	r3, [pc, #168]	; (8008b98 <UART_SetConfig+0x934>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	08db      	lsrs	r3, r3, #3
 8008af4:	f003 0303 	and.w	r3, r3, #3
 8008af8:	4a24      	ldr	r2, [pc, #144]	; (8008b8c <UART_SetConfig+0x928>)
 8008afa:	fa22 f303 	lsr.w	r3, r2, r3
 8008afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b00:	e00f      	b.n	8008b22 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008b02:	4b22      	ldr	r3, [pc, #136]	; (8008b8c <UART_SetConfig+0x928>)
 8008b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b06:	e00c      	b.n	8008b22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b08:	4b21      	ldr	r3, [pc, #132]	; (8008b90 <UART_SetConfig+0x92c>)
 8008b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b0c:	e009      	b.n	8008b22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b14:	e005      	b.n	8008b22 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008b20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 80e7 	beq.w	8008cf8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	4a19      	ldr	r2, [pc, #100]	; (8008b94 <UART_SetConfig+0x930>)
 8008b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b34:	461a      	mov	r2, r3
 8008b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b3c:	005a      	lsls	r2, r3, #1
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	085b      	lsrs	r3, r3, #1
 8008b44:	441a      	add	r2, r3
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b52:	2b0f      	cmp	r3, #15
 8008b54:	d916      	bls.n	8008b84 <UART_SetConfig+0x920>
 8008b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b5c:	d212      	bcs.n	8008b84 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	f023 030f 	bic.w	r3, r3, #15
 8008b66:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6a:	085b      	lsrs	r3, r3, #1
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	f003 0307 	and.w	r3, r3, #7
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008b76:	4313      	orrs	r3, r2
 8008b78:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008b80:	60da      	str	r2, [r3, #12]
 8008b82:	e0b9      	b.n	8008cf8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008b8a:	e0b5      	b.n	8008cf8 <UART_SetConfig+0xa94>
 8008b8c:	03d09000 	.word	0x03d09000
 8008b90:	003d0900 	.word	0x003d0900
 8008b94:	0800a3cc 	.word	0x0800a3cc
 8008b98:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ba0:	2b20      	cmp	r3, #32
 8008ba2:	dc49      	bgt.n	8008c38 <UART_SetConfig+0x9d4>
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	db7c      	blt.n	8008ca2 <UART_SetConfig+0xa3e>
 8008ba8:	2b20      	cmp	r3, #32
 8008baa:	d87a      	bhi.n	8008ca2 <UART_SetConfig+0xa3e>
 8008bac:	a201      	add	r2, pc, #4	; (adr r2, 8008bb4 <UART_SetConfig+0x950>)
 8008bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb2:	bf00      	nop
 8008bb4:	08008c3f 	.word	0x08008c3f
 8008bb8:	08008c47 	.word	0x08008c47
 8008bbc:	08008ca3 	.word	0x08008ca3
 8008bc0:	08008ca3 	.word	0x08008ca3
 8008bc4:	08008c4f 	.word	0x08008c4f
 8008bc8:	08008ca3 	.word	0x08008ca3
 8008bcc:	08008ca3 	.word	0x08008ca3
 8008bd0:	08008ca3 	.word	0x08008ca3
 8008bd4:	08008c5f 	.word	0x08008c5f
 8008bd8:	08008ca3 	.word	0x08008ca3
 8008bdc:	08008ca3 	.word	0x08008ca3
 8008be0:	08008ca3 	.word	0x08008ca3
 8008be4:	08008ca3 	.word	0x08008ca3
 8008be8:	08008ca3 	.word	0x08008ca3
 8008bec:	08008ca3 	.word	0x08008ca3
 8008bf0:	08008ca3 	.word	0x08008ca3
 8008bf4:	08008c6f 	.word	0x08008c6f
 8008bf8:	08008ca3 	.word	0x08008ca3
 8008bfc:	08008ca3 	.word	0x08008ca3
 8008c00:	08008ca3 	.word	0x08008ca3
 8008c04:	08008ca3 	.word	0x08008ca3
 8008c08:	08008ca3 	.word	0x08008ca3
 8008c0c:	08008ca3 	.word	0x08008ca3
 8008c10:	08008ca3 	.word	0x08008ca3
 8008c14:	08008ca3 	.word	0x08008ca3
 8008c18:	08008ca3 	.word	0x08008ca3
 8008c1c:	08008ca3 	.word	0x08008ca3
 8008c20:	08008ca3 	.word	0x08008ca3
 8008c24:	08008ca3 	.word	0x08008ca3
 8008c28:	08008ca3 	.word	0x08008ca3
 8008c2c:	08008ca3 	.word	0x08008ca3
 8008c30:	08008ca3 	.word	0x08008ca3
 8008c34:	08008c95 	.word	0x08008c95
 8008c38:	2b40      	cmp	r3, #64	; 0x40
 8008c3a:	d02e      	beq.n	8008c9a <UART_SetConfig+0xa36>
 8008c3c:	e031      	b.n	8008ca2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c3e:	f7fc fdfb 	bl	8005838 <HAL_RCC_GetPCLK1Freq>
 8008c42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c44:	e033      	b.n	8008cae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c46:	f7fc fe0d 	bl	8005864 <HAL_RCC_GetPCLK2Freq>
 8008c4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c4c:	e02f      	b.n	8008cae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fd fd78 	bl	8006748 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c5c:	e027      	b.n	8008cae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c5e:	f107 0318 	add.w	r3, r7, #24
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fd fec4 	bl	80069f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c6c:	e01f      	b.n	8008cae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c6e:	4b2d      	ldr	r3, [pc, #180]	; (8008d24 <UART_SetConfig+0xac0>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0320 	and.w	r3, r3, #32
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d009      	beq.n	8008c8e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c7a:	4b2a      	ldr	r3, [pc, #168]	; (8008d24 <UART_SetConfig+0xac0>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	08db      	lsrs	r3, r3, #3
 8008c80:	f003 0303 	and.w	r3, r3, #3
 8008c84:	4a28      	ldr	r2, [pc, #160]	; (8008d28 <UART_SetConfig+0xac4>)
 8008c86:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c8c:	e00f      	b.n	8008cae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008c8e:	4b26      	ldr	r3, [pc, #152]	; (8008d28 <UART_SetConfig+0xac4>)
 8008c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c92:	e00c      	b.n	8008cae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c94:	4b25      	ldr	r3, [pc, #148]	; (8008d2c <UART_SetConfig+0xac8>)
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c98:	e009      	b.n	8008cae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ca0:	e005      	b.n	8008cae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008cac:	bf00      	nop
    }

    if (pclk != 0U)
 8008cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d021      	beq.n	8008cf8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb8:	4a1d      	ldr	r2, [pc, #116]	; (8008d30 <UART_SetConfig+0xacc>)
 8008cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	085b      	lsrs	r3, r3, #1
 8008ccc:	441a      	add	r2, r3
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cda:	2b0f      	cmp	r3, #15
 8008cdc:	d909      	bls.n	8008cf2 <UART_SetConfig+0xa8e>
 8008cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce4:	d205      	bcs.n	8008cf2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	60da      	str	r2, [r3, #12]
 8008cf0:	e002      	b.n	8008cf8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	2200      	movs	r2, #0
 8008d12:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008d14:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3748      	adds	r7, #72	; 0x48
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d22:	bf00      	nop
 8008d24:	58024400 	.word	0x58024400
 8008d28:	03d09000 	.word	0x03d09000
 8008d2c:	003d0900 	.word	0x003d0900
 8008d30:	0800a3cc 	.word	0x0800a3cc

08008d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00a      	beq.n	8008d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00a      	beq.n	8008d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	430a      	orrs	r2, r1
 8008d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00a      	beq.n	8008da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da6:	f003 0308 	and.w	r3, r3, #8
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00a      	beq.n	8008dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc8:	f003 0310 	and.w	r3, r3, #16
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00a      	beq.n	8008de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dea:	f003 0320 	and.w	r3, r3, #32
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00a      	beq.n	8008e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	430a      	orrs	r2, r1
 8008e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d01a      	beq.n	8008e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e32:	d10a      	bne.n	8008e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	430a      	orrs	r2, r1
 8008e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	605a      	str	r2, [r3, #4]
  }
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af02      	add	r7, sp, #8
 8008e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e88:	f7f9 fa1c 	bl	80022c4 <HAL_GetTick>
 8008e8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0308 	and.w	r3, r3, #8
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	d10e      	bne.n	8008eba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f82f 	bl	8008f0e <UART_WaitOnFlagUntilTimeout>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e025      	b.n	8008f06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0304 	and.w	r3, r3, #4
 8008ec4:	2b04      	cmp	r3, #4
 8008ec6:	d10e      	bne.n	8008ee6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ec8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f819 	bl	8008f0e <UART_WaitOnFlagUntilTimeout>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e00f      	b.n	8008f06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2220      	movs	r2, #32
 8008ef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b09c      	sub	sp, #112	; 0x70
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	603b      	str	r3, [r7, #0]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f1e:	e0a9      	b.n	8009074 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f26:	f000 80a5 	beq.w	8009074 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f2a:	f7f9 f9cb 	bl	80022c4 <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d302      	bcc.n	8008f40 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d140      	bne.n	8008fc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f48:	e853 3f00 	ldrex	r3, [r3]
 8008f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f54:	667b      	str	r3, [r7, #100]	; 0x64
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f66:	e841 2300 	strex	r3, r2, [r1]
 8008f6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1e6      	bne.n	8008f40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3308      	adds	r3, #8
 8008f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f84:	f023 0301 	bic.w	r3, r3, #1
 8008f88:	663b      	str	r3, [r7, #96]	; 0x60
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3308      	adds	r3, #8
 8008f90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f92:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f9a:	e841 2300 	strex	r3, r2, [r1]
 8008f9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1e5      	bne.n	8008f72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2220      	movs	r2, #32
 8008fb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e069      	b.n	8009096 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0304 	and.w	r3, r3, #4
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d051      	beq.n	8009074 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fde:	d149      	bne.n	8009074 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fe8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff2:	e853 3f00 	ldrex	r3, [r3]
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	461a      	mov	r2, r3
 8009006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009008:	637b      	str	r3, [r7, #52]	; 0x34
 800900a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800900e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009010:	e841 2300 	strex	r3, r2, [r1]
 8009014:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1e6      	bne.n	8008fea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3308      	adds	r3, #8
 8009022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	e853 3f00 	ldrex	r3, [r3]
 800902a:	613b      	str	r3, [r7, #16]
   return(result);
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	f023 0301 	bic.w	r3, r3, #1
 8009032:	66bb      	str	r3, [r7, #104]	; 0x68
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3308      	adds	r3, #8
 800903a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800903c:	623a      	str	r2, [r7, #32]
 800903e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	69f9      	ldr	r1, [r7, #28]
 8009042:	6a3a      	ldr	r2, [r7, #32]
 8009044:	e841 2300 	strex	r3, r2, [r1]
 8009048:	61bb      	str	r3, [r7, #24]
   return(result);
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e5      	bne.n	800901c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2220      	movs	r2, #32
 8009054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2220      	movs	r2, #32
 800905c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2220      	movs	r2, #32
 8009064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009070:	2303      	movs	r3, #3
 8009072:	e010      	b.n	8009096 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	69da      	ldr	r2, [r3, #28]
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	4013      	ands	r3, r2
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	429a      	cmp	r2, r3
 8009082:	bf0c      	ite	eq
 8009084:	2301      	moveq	r3, #1
 8009086:	2300      	movne	r3, #0
 8009088:	b2db      	uxtb	r3, r3
 800908a:	461a      	mov	r2, r3
 800908c:	79fb      	ldrb	r3, [r7, #7]
 800908e:	429a      	cmp	r2, r3
 8009090:	f43f af46 	beq.w	8008f20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3770      	adds	r7, #112	; 0x70
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800909e:	b480      	push	{r7}
 80090a0:	b085      	sub	sp, #20
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d101      	bne.n	80090b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80090b0:	2302      	movs	r3, #2
 80090b2:	e027      	b.n	8009104 <HAL_UARTEx_DisableFifoMode+0x66>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2224      	movs	r2, #36	; 0x24
 80090c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0201 	bic.w	r2, r2, #1
 80090da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80090e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2220      	movs	r2, #32
 80090f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009120:	2b01      	cmp	r3, #1
 8009122:	d101      	bne.n	8009128 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009124:	2302      	movs	r3, #2
 8009126:	e02d      	b.n	8009184 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2224      	movs	r2, #36	; 0x24
 8009134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f022 0201 	bic.w	r2, r2, #1
 800914e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	430a      	orrs	r2, r1
 8009162:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f84f 	bl	8009208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2220      	movs	r2, #32
 8009176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800919c:	2b01      	cmp	r3, #1
 800919e:	d101      	bne.n	80091a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091a0:	2302      	movs	r3, #2
 80091a2:	e02d      	b.n	8009200 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2224      	movs	r2, #36	; 0x24
 80091b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f022 0201 	bic.w	r2, r2, #1
 80091ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f811 	bl	8009208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009214:	2b00      	cmp	r3, #0
 8009216:	d108      	bne.n	800922a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009228:	e031      	b.n	800928e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800922a:	2310      	movs	r3, #16
 800922c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800922e:	2310      	movs	r3, #16
 8009230:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	0e5b      	lsrs	r3, r3, #25
 800923a:	b2db      	uxtb	r3, r3
 800923c:	f003 0307 	and.w	r3, r3, #7
 8009240:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	0f5b      	lsrs	r3, r3, #29
 800924a:	b2db      	uxtb	r3, r3
 800924c:	f003 0307 	and.w	r3, r3, #7
 8009250:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009252:	7bbb      	ldrb	r3, [r7, #14]
 8009254:	7b3a      	ldrb	r2, [r7, #12]
 8009256:	4911      	ldr	r1, [pc, #68]	; (800929c <UARTEx_SetNbDataToProcess+0x94>)
 8009258:	5c8a      	ldrb	r2, [r1, r2]
 800925a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800925e:	7b3a      	ldrb	r2, [r7, #12]
 8009260:	490f      	ldr	r1, [pc, #60]	; (80092a0 <UARTEx_SetNbDataToProcess+0x98>)
 8009262:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009264:	fb93 f3f2 	sdiv	r3, r3, r2
 8009268:	b29a      	uxth	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	7b7a      	ldrb	r2, [r7, #13]
 8009274:	4909      	ldr	r1, [pc, #36]	; (800929c <UARTEx_SetNbDataToProcess+0x94>)
 8009276:	5c8a      	ldrb	r2, [r1, r2]
 8009278:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800927c:	7b7a      	ldrb	r2, [r7, #13]
 800927e:	4908      	ldr	r1, [pc, #32]	; (80092a0 <UARTEx_SetNbDataToProcess+0x98>)
 8009280:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009282:	fb93 f3f2 	sdiv	r3, r3, r2
 8009286:	b29a      	uxth	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800928e:	bf00      	nop
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	0800a3e4 	.word	0x0800a3e4
 80092a0:	0800a3ec 	.word	0x0800a3ec

080092a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092a4:	b084      	sub	sp, #16
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	f107 001c 	add.w	r0, r7, #28
 80092b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d120      	bne.n	80092fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68da      	ldr	r2, [r3, #12]
 80092cc:	4b2a      	ldr	r3, [pc, #168]	; (8009378 <USB_CoreInit+0xd4>)
 80092ce:	4013      	ands	r3, r2
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80092e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d105      	bne.n	80092f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 faac 	bl	8009850 <USB_CoreReset>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73fb      	strb	r3, [r7, #15]
 80092fc:	e01a      	b.n	8009334 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 faa0 	bl	8009850 <USB_CoreReset>
 8009310:	4603      	mov	r3, r0
 8009312:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009316:	2b00      	cmp	r3, #0
 8009318:	d106      	bne.n	8009328 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	639a      	str	r2, [r3, #56]	; 0x38
 8009326:	e005      	b.n	8009334 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009336:	2b01      	cmp	r3, #1
 8009338:	d116      	bne.n	8009368 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800933e:	b29a      	uxth	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009348:	4b0c      	ldr	r3, [pc, #48]	; (800937c <USB_CoreInit+0xd8>)
 800934a:	4313      	orrs	r3, r2
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f043 0206 	orr.w	r2, r3, #6
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f043 0220 	orr.w	r2, r3, #32
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009368:	7bfb      	ldrb	r3, [r7, #15]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009374:	b004      	add	sp, #16
 8009376:	4770      	bx	lr
 8009378:	ffbdffbf 	.word	0xffbdffbf
 800937c:	03ee0000 	.word	0x03ee0000

08009380 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	f023 0201 	bic.w	r2, r3, #1
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	460b      	mov	r3, r1
 80093ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093ae:	2300      	movs	r3, #0
 80093b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093be:	78fb      	ldrb	r3, [r7, #3]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d115      	bne.n	80093f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80093d0:	2001      	movs	r0, #1
 80093d2:	f7f8 ff83 	bl	80022dc <HAL_Delay>
      ms++;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3301      	adds	r3, #1
 80093da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fa29 	bl	8009834 <USB_GetMode>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d01e      	beq.n	8009426 <USB_SetCurrentMode+0x84>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b31      	cmp	r3, #49	; 0x31
 80093ec:	d9f0      	bls.n	80093d0 <USB_SetCurrentMode+0x2e>
 80093ee:	e01a      	b.n	8009426 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d115      	bne.n	8009422 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009402:	2001      	movs	r0, #1
 8009404:	f7f8 ff6a 	bl	80022dc <HAL_Delay>
      ms++;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3301      	adds	r3, #1
 800940c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fa10 	bl	8009834 <USB_GetMode>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d005      	beq.n	8009426 <USB_SetCurrentMode+0x84>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2b31      	cmp	r3, #49	; 0x31
 800941e:	d9f0      	bls.n	8009402 <USB_SetCurrentMode+0x60>
 8009420:	e001      	b.n	8009426 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e005      	b.n	8009432 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b32      	cmp	r3, #50	; 0x32
 800942a:	d101      	bne.n	8009430 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e000      	b.n	8009432 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800943c:	b084      	sub	sp, #16
 800943e:	b580      	push	{r7, lr}
 8009440:	b086      	sub	sp, #24
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800944a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009456:	2300      	movs	r3, #0
 8009458:	613b      	str	r3, [r7, #16]
 800945a:	e009      	b.n	8009470 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	3340      	adds	r3, #64	; 0x40
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	2200      	movs	r2, #0
 8009468:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	3301      	adds	r3, #1
 800946e:	613b      	str	r3, [r7, #16]
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	2b0e      	cmp	r3, #14
 8009474:	d9f2      	bls.n	800945c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009478:	2b00      	cmp	r3, #0
 800947a:	d11c      	bne.n	80094b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800948a:	f043 0302 	orr.w	r3, r3, #2
 800948e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	e005      	b.n	80094c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094c8:	461a      	mov	r2, r3
 80094ca:	2300      	movs	r3, #0
 80094cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d4:	4619      	mov	r1, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094dc:	461a      	mov	r2, r3
 80094de:	680b      	ldr	r3, [r1, #0]
 80094e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d10c      	bne.n	8009502 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80094e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d104      	bne.n	80094f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80094ee:	2100      	movs	r1, #0
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f965 	bl	80097c0 <USB_SetDevSpeed>
 80094f6:	e008      	b.n	800950a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80094f8:	2101      	movs	r1, #1
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f960 	bl	80097c0 <USB_SetDevSpeed>
 8009500:	e003      	b.n	800950a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009502:	2103      	movs	r1, #3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f95b 	bl	80097c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800950a:	2110      	movs	r1, #16
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f8f3 	bl	80096f8 <USB_FlushTxFifo>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f91f 	bl	8009760 <USB_FlushRxFifo>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009532:	461a      	mov	r2, r3
 8009534:	2300      	movs	r3, #0
 8009536:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800953e:	461a      	mov	r2, r3
 8009540:	2300      	movs	r3, #0
 8009542:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800954a:	461a      	mov	r2, r3
 800954c:	2300      	movs	r3, #0
 800954e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009550:	2300      	movs	r3, #0
 8009552:	613b      	str	r3, [r7, #16]
 8009554:	e043      	b.n	80095de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	4413      	add	r3, r2
 800955e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800956c:	d118      	bne.n	80095a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009580:	461a      	mov	r2, r3
 8009582:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009586:	6013      	str	r3, [r2, #0]
 8009588:	e013      	b.n	80095b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	015a      	lsls	r2, r3, #5
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	4413      	add	r3, r2
 8009592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009596:	461a      	mov	r2, r3
 8009598:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800959c:	6013      	str	r3, [r2, #0]
 800959e:	e008      	b.n	80095b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ac:	461a      	mov	r2, r3
 80095ae:	2300      	movs	r3, #0
 80095b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095be:	461a      	mov	r2, r3
 80095c0:	2300      	movs	r3, #0
 80095c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	015a      	lsls	r2, r3, #5
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d0:	461a      	mov	r2, r3
 80095d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80095d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	3301      	adds	r3, #1
 80095dc:	613b      	str	r3, [r7, #16]
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d3b7      	bcc.n	8009556 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095e6:	2300      	movs	r3, #0
 80095e8:	613b      	str	r3, [r7, #16]
 80095ea:	e043      	b.n	8009674 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009602:	d118      	bne.n	8009636 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10a      	bne.n	8009620 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	015a      	lsls	r2, r3, #5
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4413      	add	r3, r2
 8009612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009616:	461a      	mov	r2, r3
 8009618:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	e013      	b.n	8009648 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	4413      	add	r3, r2
 8009628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962c:	461a      	mov	r2, r3
 800962e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009632:	6013      	str	r3, [r2, #0]
 8009634:	e008      	b.n	8009648 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	4413      	add	r3, r2
 800963e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009642:	461a      	mov	r2, r3
 8009644:	2300      	movs	r3, #0
 8009646:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009654:	461a      	mov	r2, r3
 8009656:	2300      	movs	r3, #0
 8009658:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	4413      	add	r3, r2
 8009662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009666:	461a      	mov	r2, r3
 8009668:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800966c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	3301      	adds	r3, #1
 8009672:	613b      	str	r3, [r7, #16]
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	429a      	cmp	r2, r3
 800967a:	d3b7      	bcc.n	80095ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800968a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800968e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800969c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d105      	bne.n	80096b0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	f043 0210 	orr.w	r2, r3, #16
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	699a      	ldr	r2, [r3, #24]
 80096b4:	4b0e      	ldr	r3, [pc, #56]	; (80096f0 <USB_DevInit+0x2b4>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80096bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d005      	beq.n	80096ce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	f043 0208 	orr.w	r2, r3, #8
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80096ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d105      	bne.n	80096e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	699a      	ldr	r2, [r3, #24]
 80096d8:	4b06      	ldr	r3, [pc, #24]	; (80096f4 <USB_DevInit+0x2b8>)
 80096da:	4313      	orrs	r3, r2
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80096e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3718      	adds	r7, #24
 80096e6:	46bd      	mov	sp, r7
 80096e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096ec:	b004      	add	sp, #16
 80096ee:	4770      	bx	lr
 80096f0:	803c3800 	.word	0x803c3800
 80096f4:	40000004 	.word	0x40000004

080096f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009702:	2300      	movs	r3, #0
 8009704:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	3301      	adds	r3, #1
 800970a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	4a13      	ldr	r2, [pc, #76]	; (800975c <USB_FlushTxFifo+0x64>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d901      	bls.n	8009718 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	e01b      	b.n	8009750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	2b00      	cmp	r3, #0
 800971e:	daf2      	bge.n	8009706 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	019b      	lsls	r3, r3, #6
 8009728:	f043 0220 	orr.w	r2, r3, #32
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	3301      	adds	r3, #1
 8009734:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	4a08      	ldr	r2, [pc, #32]	; (800975c <USB_FlushTxFifo+0x64>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d901      	bls.n	8009742 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800973e:	2303      	movs	r3, #3
 8009740:	e006      	b.n	8009750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	f003 0320 	and.w	r3, r3, #32
 800974a:	2b20      	cmp	r3, #32
 800974c:	d0f0      	beq.n	8009730 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	00030d40 	.word	0x00030d40

08009760 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009768:	2300      	movs	r3, #0
 800976a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	3301      	adds	r3, #1
 8009770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	4a11      	ldr	r2, [pc, #68]	; (80097bc <USB_FlushRxFifo+0x5c>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d901      	bls.n	800977e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e018      	b.n	80097b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	daf2      	bge.n	800976c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009786:	2300      	movs	r3, #0
 8009788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2210      	movs	r2, #16
 800978e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3301      	adds	r3, #1
 8009794:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	4a08      	ldr	r2, [pc, #32]	; (80097bc <USB_FlushRxFifo+0x5c>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d901      	bls.n	80097a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e006      	b.n	80097b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	f003 0310 	and.w	r3, r3, #16
 80097aa:	2b10      	cmp	r3, #16
 80097ac:	d0f0      	beq.n	8009790 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	00030d40 	.word	0x00030d40

080097c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	460b      	mov	r3, r1
 80097ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	78fb      	ldrb	r3, [r7, #3]
 80097da:	68f9      	ldr	r1, [r7, #12]
 80097dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097e0:	4313      	orrs	r3, r2
 80097e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b085      	sub	sp, #20
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800980c:	f023 0303 	bic.w	r3, r3, #3
 8009810:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009820:	f043 0302 	orr.w	r3, r3, #2
 8009824:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	695b      	ldr	r3, [r3, #20]
 8009840:	f003 0301 	and.w	r3, r3, #1
}
 8009844:	4618      	mov	r0, r3
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	3301      	adds	r3, #1
 8009860:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	4a13      	ldr	r2, [pc, #76]	; (80098b4 <USB_CoreReset+0x64>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d901      	bls.n	800986e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800986a:	2303      	movs	r3, #3
 800986c:	e01b      	b.n	80098a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	2b00      	cmp	r3, #0
 8009874:	daf2      	bge.n	800985c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	f043 0201 	orr.w	r2, r3, #1
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3301      	adds	r3, #1
 800988a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	4a09      	ldr	r2, [pc, #36]	; (80098b4 <USB_CoreReset+0x64>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d901      	bls.n	8009898 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009894:	2303      	movs	r3, #3
 8009896:	e006      	b.n	80098a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d0f0      	beq.n	8009886 <USB_CoreReset+0x36>

  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	00030d40 	.word	0x00030d40

080098b8 <__errno>:
 80098b8:	4b01      	ldr	r3, [pc, #4]	; (80098c0 <__errno+0x8>)
 80098ba:	6818      	ldr	r0, [r3, #0]
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	24000018 	.word	0x24000018

080098c4 <__libc_init_array>:
 80098c4:	b570      	push	{r4, r5, r6, lr}
 80098c6:	4d0d      	ldr	r5, [pc, #52]	; (80098fc <__libc_init_array+0x38>)
 80098c8:	4c0d      	ldr	r4, [pc, #52]	; (8009900 <__libc_init_array+0x3c>)
 80098ca:	1b64      	subs	r4, r4, r5
 80098cc:	10a4      	asrs	r4, r4, #2
 80098ce:	2600      	movs	r6, #0
 80098d0:	42a6      	cmp	r6, r4
 80098d2:	d109      	bne.n	80098e8 <__libc_init_array+0x24>
 80098d4:	4d0b      	ldr	r5, [pc, #44]	; (8009904 <__libc_init_array+0x40>)
 80098d6:	4c0c      	ldr	r4, [pc, #48]	; (8009908 <__libc_init_array+0x44>)
 80098d8:	f000 fd2c 	bl	800a334 <_init>
 80098dc:	1b64      	subs	r4, r4, r5
 80098de:	10a4      	asrs	r4, r4, #2
 80098e0:	2600      	movs	r6, #0
 80098e2:	42a6      	cmp	r6, r4
 80098e4:	d105      	bne.n	80098f2 <__libc_init_array+0x2e>
 80098e6:	bd70      	pop	{r4, r5, r6, pc}
 80098e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ec:	4798      	blx	r3
 80098ee:	3601      	adds	r6, #1
 80098f0:	e7ee      	b.n	80098d0 <__libc_init_array+0xc>
 80098f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f6:	4798      	blx	r3
 80098f8:	3601      	adds	r6, #1
 80098fa:	e7f2      	b.n	80098e2 <__libc_init_array+0x1e>
 80098fc:	0800a460 	.word	0x0800a460
 8009900:	0800a460 	.word	0x0800a460
 8009904:	0800a460 	.word	0x0800a460
 8009908:	0800a464 	.word	0x0800a464

0800990c <memcpy>:
 800990c:	440a      	add	r2, r1
 800990e:	4291      	cmp	r1, r2
 8009910:	f100 33ff 	add.w	r3, r0, #4294967295
 8009914:	d100      	bne.n	8009918 <memcpy+0xc>
 8009916:	4770      	bx	lr
 8009918:	b510      	push	{r4, lr}
 800991a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800991e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009922:	4291      	cmp	r1, r2
 8009924:	d1f9      	bne.n	800991a <memcpy+0xe>
 8009926:	bd10      	pop	{r4, pc}

08009928 <memset>:
 8009928:	4402      	add	r2, r0
 800992a:	4603      	mov	r3, r0
 800992c:	4293      	cmp	r3, r2
 800992e:	d100      	bne.n	8009932 <memset+0xa>
 8009930:	4770      	bx	lr
 8009932:	f803 1b01 	strb.w	r1, [r3], #1
 8009936:	e7f9      	b.n	800992c <memset+0x4>

08009938 <_puts_r>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	460e      	mov	r6, r1
 800993c:	4605      	mov	r5, r0
 800993e:	b118      	cbz	r0, 8009948 <_puts_r+0x10>
 8009940:	6983      	ldr	r3, [r0, #24]
 8009942:	b90b      	cbnz	r3, 8009948 <_puts_r+0x10>
 8009944:	f000 fa48 	bl	8009dd8 <__sinit>
 8009948:	69ab      	ldr	r3, [r5, #24]
 800994a:	68ac      	ldr	r4, [r5, #8]
 800994c:	b913      	cbnz	r3, 8009954 <_puts_r+0x1c>
 800994e:	4628      	mov	r0, r5
 8009950:	f000 fa42 	bl	8009dd8 <__sinit>
 8009954:	4b2c      	ldr	r3, [pc, #176]	; (8009a08 <_puts_r+0xd0>)
 8009956:	429c      	cmp	r4, r3
 8009958:	d120      	bne.n	800999c <_puts_r+0x64>
 800995a:	686c      	ldr	r4, [r5, #4]
 800995c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800995e:	07db      	lsls	r3, r3, #31
 8009960:	d405      	bmi.n	800996e <_puts_r+0x36>
 8009962:	89a3      	ldrh	r3, [r4, #12]
 8009964:	0598      	lsls	r0, r3, #22
 8009966:	d402      	bmi.n	800996e <_puts_r+0x36>
 8009968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800996a:	f000 fad3 	bl	8009f14 <__retarget_lock_acquire_recursive>
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	0719      	lsls	r1, r3, #28
 8009972:	d51d      	bpl.n	80099b0 <_puts_r+0x78>
 8009974:	6923      	ldr	r3, [r4, #16]
 8009976:	b1db      	cbz	r3, 80099b0 <_puts_r+0x78>
 8009978:	3e01      	subs	r6, #1
 800997a:	68a3      	ldr	r3, [r4, #8]
 800997c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009980:	3b01      	subs	r3, #1
 8009982:	60a3      	str	r3, [r4, #8]
 8009984:	bb39      	cbnz	r1, 80099d6 <_puts_r+0x9e>
 8009986:	2b00      	cmp	r3, #0
 8009988:	da38      	bge.n	80099fc <_puts_r+0xc4>
 800998a:	4622      	mov	r2, r4
 800998c:	210a      	movs	r1, #10
 800998e:	4628      	mov	r0, r5
 8009990:	f000 f848 	bl	8009a24 <__swbuf_r>
 8009994:	3001      	adds	r0, #1
 8009996:	d011      	beq.n	80099bc <_puts_r+0x84>
 8009998:	250a      	movs	r5, #10
 800999a:	e011      	b.n	80099c0 <_puts_r+0x88>
 800999c:	4b1b      	ldr	r3, [pc, #108]	; (8009a0c <_puts_r+0xd4>)
 800999e:	429c      	cmp	r4, r3
 80099a0:	d101      	bne.n	80099a6 <_puts_r+0x6e>
 80099a2:	68ac      	ldr	r4, [r5, #8]
 80099a4:	e7da      	b.n	800995c <_puts_r+0x24>
 80099a6:	4b1a      	ldr	r3, [pc, #104]	; (8009a10 <_puts_r+0xd8>)
 80099a8:	429c      	cmp	r4, r3
 80099aa:	bf08      	it	eq
 80099ac:	68ec      	ldreq	r4, [r5, #12]
 80099ae:	e7d5      	b.n	800995c <_puts_r+0x24>
 80099b0:	4621      	mov	r1, r4
 80099b2:	4628      	mov	r0, r5
 80099b4:	f000 f888 	bl	8009ac8 <__swsetup_r>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d0dd      	beq.n	8009978 <_puts_r+0x40>
 80099bc:	f04f 35ff 	mov.w	r5, #4294967295
 80099c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099c2:	07da      	lsls	r2, r3, #31
 80099c4:	d405      	bmi.n	80099d2 <_puts_r+0x9a>
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	059b      	lsls	r3, r3, #22
 80099ca:	d402      	bmi.n	80099d2 <_puts_r+0x9a>
 80099cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ce:	f000 faa2 	bl	8009f16 <__retarget_lock_release_recursive>
 80099d2:	4628      	mov	r0, r5
 80099d4:	bd70      	pop	{r4, r5, r6, pc}
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	da04      	bge.n	80099e4 <_puts_r+0xac>
 80099da:	69a2      	ldr	r2, [r4, #24]
 80099dc:	429a      	cmp	r2, r3
 80099de:	dc06      	bgt.n	80099ee <_puts_r+0xb6>
 80099e0:	290a      	cmp	r1, #10
 80099e2:	d004      	beq.n	80099ee <_puts_r+0xb6>
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	1c5a      	adds	r2, r3, #1
 80099e8:	6022      	str	r2, [r4, #0]
 80099ea:	7019      	strb	r1, [r3, #0]
 80099ec:	e7c5      	b.n	800997a <_puts_r+0x42>
 80099ee:	4622      	mov	r2, r4
 80099f0:	4628      	mov	r0, r5
 80099f2:	f000 f817 	bl	8009a24 <__swbuf_r>
 80099f6:	3001      	adds	r0, #1
 80099f8:	d1bf      	bne.n	800997a <_puts_r+0x42>
 80099fa:	e7df      	b.n	80099bc <_puts_r+0x84>
 80099fc:	6823      	ldr	r3, [r4, #0]
 80099fe:	250a      	movs	r5, #10
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	6022      	str	r2, [r4, #0]
 8009a04:	701d      	strb	r5, [r3, #0]
 8009a06:	e7db      	b.n	80099c0 <_puts_r+0x88>
 8009a08:	0800a418 	.word	0x0800a418
 8009a0c:	0800a438 	.word	0x0800a438
 8009a10:	0800a3f8 	.word	0x0800a3f8

08009a14 <puts>:
 8009a14:	4b02      	ldr	r3, [pc, #8]	; (8009a20 <puts+0xc>)
 8009a16:	4601      	mov	r1, r0
 8009a18:	6818      	ldr	r0, [r3, #0]
 8009a1a:	f7ff bf8d 	b.w	8009938 <_puts_r>
 8009a1e:	bf00      	nop
 8009a20:	24000018 	.word	0x24000018

08009a24 <__swbuf_r>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	460e      	mov	r6, r1
 8009a28:	4614      	mov	r4, r2
 8009a2a:	4605      	mov	r5, r0
 8009a2c:	b118      	cbz	r0, 8009a36 <__swbuf_r+0x12>
 8009a2e:	6983      	ldr	r3, [r0, #24]
 8009a30:	b90b      	cbnz	r3, 8009a36 <__swbuf_r+0x12>
 8009a32:	f000 f9d1 	bl	8009dd8 <__sinit>
 8009a36:	4b21      	ldr	r3, [pc, #132]	; (8009abc <__swbuf_r+0x98>)
 8009a38:	429c      	cmp	r4, r3
 8009a3a:	d12b      	bne.n	8009a94 <__swbuf_r+0x70>
 8009a3c:	686c      	ldr	r4, [r5, #4]
 8009a3e:	69a3      	ldr	r3, [r4, #24]
 8009a40:	60a3      	str	r3, [r4, #8]
 8009a42:	89a3      	ldrh	r3, [r4, #12]
 8009a44:	071a      	lsls	r2, r3, #28
 8009a46:	d52f      	bpl.n	8009aa8 <__swbuf_r+0x84>
 8009a48:	6923      	ldr	r3, [r4, #16]
 8009a4a:	b36b      	cbz	r3, 8009aa8 <__swbuf_r+0x84>
 8009a4c:	6923      	ldr	r3, [r4, #16]
 8009a4e:	6820      	ldr	r0, [r4, #0]
 8009a50:	1ac0      	subs	r0, r0, r3
 8009a52:	6963      	ldr	r3, [r4, #20]
 8009a54:	b2f6      	uxtb	r6, r6
 8009a56:	4283      	cmp	r3, r0
 8009a58:	4637      	mov	r7, r6
 8009a5a:	dc04      	bgt.n	8009a66 <__swbuf_r+0x42>
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f000 f926 	bl	8009cb0 <_fflush_r>
 8009a64:	bb30      	cbnz	r0, 8009ab4 <__swbuf_r+0x90>
 8009a66:	68a3      	ldr	r3, [r4, #8]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	60a3      	str	r3, [r4, #8]
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	1c5a      	adds	r2, r3, #1
 8009a70:	6022      	str	r2, [r4, #0]
 8009a72:	701e      	strb	r6, [r3, #0]
 8009a74:	6963      	ldr	r3, [r4, #20]
 8009a76:	3001      	adds	r0, #1
 8009a78:	4283      	cmp	r3, r0
 8009a7a:	d004      	beq.n	8009a86 <__swbuf_r+0x62>
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	07db      	lsls	r3, r3, #31
 8009a80:	d506      	bpl.n	8009a90 <__swbuf_r+0x6c>
 8009a82:	2e0a      	cmp	r6, #10
 8009a84:	d104      	bne.n	8009a90 <__swbuf_r+0x6c>
 8009a86:	4621      	mov	r1, r4
 8009a88:	4628      	mov	r0, r5
 8009a8a:	f000 f911 	bl	8009cb0 <_fflush_r>
 8009a8e:	b988      	cbnz	r0, 8009ab4 <__swbuf_r+0x90>
 8009a90:	4638      	mov	r0, r7
 8009a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a94:	4b0a      	ldr	r3, [pc, #40]	; (8009ac0 <__swbuf_r+0x9c>)
 8009a96:	429c      	cmp	r4, r3
 8009a98:	d101      	bne.n	8009a9e <__swbuf_r+0x7a>
 8009a9a:	68ac      	ldr	r4, [r5, #8]
 8009a9c:	e7cf      	b.n	8009a3e <__swbuf_r+0x1a>
 8009a9e:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <__swbuf_r+0xa0>)
 8009aa0:	429c      	cmp	r4, r3
 8009aa2:	bf08      	it	eq
 8009aa4:	68ec      	ldreq	r4, [r5, #12]
 8009aa6:	e7ca      	b.n	8009a3e <__swbuf_r+0x1a>
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f000 f80c 	bl	8009ac8 <__swsetup_r>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d0cb      	beq.n	8009a4c <__swbuf_r+0x28>
 8009ab4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ab8:	e7ea      	b.n	8009a90 <__swbuf_r+0x6c>
 8009aba:	bf00      	nop
 8009abc:	0800a418 	.word	0x0800a418
 8009ac0:	0800a438 	.word	0x0800a438
 8009ac4:	0800a3f8 	.word	0x0800a3f8

08009ac8 <__swsetup_r>:
 8009ac8:	4b32      	ldr	r3, [pc, #200]	; (8009b94 <__swsetup_r+0xcc>)
 8009aca:	b570      	push	{r4, r5, r6, lr}
 8009acc:	681d      	ldr	r5, [r3, #0]
 8009ace:	4606      	mov	r6, r0
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	b125      	cbz	r5, 8009ade <__swsetup_r+0x16>
 8009ad4:	69ab      	ldr	r3, [r5, #24]
 8009ad6:	b913      	cbnz	r3, 8009ade <__swsetup_r+0x16>
 8009ad8:	4628      	mov	r0, r5
 8009ada:	f000 f97d 	bl	8009dd8 <__sinit>
 8009ade:	4b2e      	ldr	r3, [pc, #184]	; (8009b98 <__swsetup_r+0xd0>)
 8009ae0:	429c      	cmp	r4, r3
 8009ae2:	d10f      	bne.n	8009b04 <__swsetup_r+0x3c>
 8009ae4:	686c      	ldr	r4, [r5, #4]
 8009ae6:	89a3      	ldrh	r3, [r4, #12]
 8009ae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009aec:	0719      	lsls	r1, r3, #28
 8009aee:	d42c      	bmi.n	8009b4a <__swsetup_r+0x82>
 8009af0:	06dd      	lsls	r5, r3, #27
 8009af2:	d411      	bmi.n	8009b18 <__swsetup_r+0x50>
 8009af4:	2309      	movs	r3, #9
 8009af6:	6033      	str	r3, [r6, #0]
 8009af8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009afc:	81a3      	strh	r3, [r4, #12]
 8009afe:	f04f 30ff 	mov.w	r0, #4294967295
 8009b02:	e03e      	b.n	8009b82 <__swsetup_r+0xba>
 8009b04:	4b25      	ldr	r3, [pc, #148]	; (8009b9c <__swsetup_r+0xd4>)
 8009b06:	429c      	cmp	r4, r3
 8009b08:	d101      	bne.n	8009b0e <__swsetup_r+0x46>
 8009b0a:	68ac      	ldr	r4, [r5, #8]
 8009b0c:	e7eb      	b.n	8009ae6 <__swsetup_r+0x1e>
 8009b0e:	4b24      	ldr	r3, [pc, #144]	; (8009ba0 <__swsetup_r+0xd8>)
 8009b10:	429c      	cmp	r4, r3
 8009b12:	bf08      	it	eq
 8009b14:	68ec      	ldreq	r4, [r5, #12]
 8009b16:	e7e6      	b.n	8009ae6 <__swsetup_r+0x1e>
 8009b18:	0758      	lsls	r0, r3, #29
 8009b1a:	d512      	bpl.n	8009b42 <__swsetup_r+0x7a>
 8009b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b1e:	b141      	cbz	r1, 8009b32 <__swsetup_r+0x6a>
 8009b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b24:	4299      	cmp	r1, r3
 8009b26:	d002      	beq.n	8009b2e <__swsetup_r+0x66>
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f000 fa5b 	bl	8009fe4 <_free_r>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	6363      	str	r3, [r4, #52]	; 0x34
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	6063      	str	r3, [r4, #4]
 8009b3e:	6923      	ldr	r3, [r4, #16]
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	f043 0308 	orr.w	r3, r3, #8
 8009b48:	81a3      	strh	r3, [r4, #12]
 8009b4a:	6923      	ldr	r3, [r4, #16]
 8009b4c:	b94b      	cbnz	r3, 8009b62 <__swsetup_r+0x9a>
 8009b4e:	89a3      	ldrh	r3, [r4, #12]
 8009b50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b58:	d003      	beq.n	8009b62 <__swsetup_r+0x9a>
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f000 fa01 	bl	8009f64 <__smakebuf_r>
 8009b62:	89a0      	ldrh	r0, [r4, #12]
 8009b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b68:	f010 0301 	ands.w	r3, r0, #1
 8009b6c:	d00a      	beq.n	8009b84 <__swsetup_r+0xbc>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60a3      	str	r3, [r4, #8]
 8009b72:	6963      	ldr	r3, [r4, #20]
 8009b74:	425b      	negs	r3, r3
 8009b76:	61a3      	str	r3, [r4, #24]
 8009b78:	6923      	ldr	r3, [r4, #16]
 8009b7a:	b943      	cbnz	r3, 8009b8e <__swsetup_r+0xc6>
 8009b7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b80:	d1ba      	bne.n	8009af8 <__swsetup_r+0x30>
 8009b82:	bd70      	pop	{r4, r5, r6, pc}
 8009b84:	0781      	lsls	r1, r0, #30
 8009b86:	bf58      	it	pl
 8009b88:	6963      	ldrpl	r3, [r4, #20]
 8009b8a:	60a3      	str	r3, [r4, #8]
 8009b8c:	e7f4      	b.n	8009b78 <__swsetup_r+0xb0>
 8009b8e:	2000      	movs	r0, #0
 8009b90:	e7f7      	b.n	8009b82 <__swsetup_r+0xba>
 8009b92:	bf00      	nop
 8009b94:	24000018 	.word	0x24000018
 8009b98:	0800a418 	.word	0x0800a418
 8009b9c:	0800a438 	.word	0x0800a438
 8009ba0:	0800a3f8 	.word	0x0800a3f8

08009ba4 <__sflush_r>:
 8009ba4:	898a      	ldrh	r2, [r1, #12]
 8009ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009baa:	4605      	mov	r5, r0
 8009bac:	0710      	lsls	r0, r2, #28
 8009bae:	460c      	mov	r4, r1
 8009bb0:	d458      	bmi.n	8009c64 <__sflush_r+0xc0>
 8009bb2:	684b      	ldr	r3, [r1, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	dc05      	bgt.n	8009bc4 <__sflush_r+0x20>
 8009bb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dc02      	bgt.n	8009bc4 <__sflush_r+0x20>
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bc6:	2e00      	cmp	r6, #0
 8009bc8:	d0f9      	beq.n	8009bbe <__sflush_r+0x1a>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bd0:	682f      	ldr	r7, [r5, #0]
 8009bd2:	602b      	str	r3, [r5, #0]
 8009bd4:	d032      	beq.n	8009c3c <__sflush_r+0x98>
 8009bd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	075a      	lsls	r2, r3, #29
 8009bdc:	d505      	bpl.n	8009bea <__sflush_r+0x46>
 8009bde:	6863      	ldr	r3, [r4, #4]
 8009be0:	1ac0      	subs	r0, r0, r3
 8009be2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009be4:	b10b      	cbz	r3, 8009bea <__sflush_r+0x46>
 8009be6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009be8:	1ac0      	subs	r0, r0, r3
 8009bea:	2300      	movs	r3, #0
 8009bec:	4602      	mov	r2, r0
 8009bee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bf0:	6a21      	ldr	r1, [r4, #32]
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	47b0      	blx	r6
 8009bf6:	1c43      	adds	r3, r0, #1
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	d106      	bne.n	8009c0a <__sflush_r+0x66>
 8009bfc:	6829      	ldr	r1, [r5, #0]
 8009bfe:	291d      	cmp	r1, #29
 8009c00:	d82c      	bhi.n	8009c5c <__sflush_r+0xb8>
 8009c02:	4a2a      	ldr	r2, [pc, #168]	; (8009cac <__sflush_r+0x108>)
 8009c04:	40ca      	lsrs	r2, r1
 8009c06:	07d6      	lsls	r6, r2, #31
 8009c08:	d528      	bpl.n	8009c5c <__sflush_r+0xb8>
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	6062      	str	r2, [r4, #4]
 8009c0e:	04d9      	lsls	r1, r3, #19
 8009c10:	6922      	ldr	r2, [r4, #16]
 8009c12:	6022      	str	r2, [r4, #0]
 8009c14:	d504      	bpl.n	8009c20 <__sflush_r+0x7c>
 8009c16:	1c42      	adds	r2, r0, #1
 8009c18:	d101      	bne.n	8009c1e <__sflush_r+0x7a>
 8009c1a:	682b      	ldr	r3, [r5, #0]
 8009c1c:	b903      	cbnz	r3, 8009c20 <__sflush_r+0x7c>
 8009c1e:	6560      	str	r0, [r4, #84]	; 0x54
 8009c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c22:	602f      	str	r7, [r5, #0]
 8009c24:	2900      	cmp	r1, #0
 8009c26:	d0ca      	beq.n	8009bbe <__sflush_r+0x1a>
 8009c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c2c:	4299      	cmp	r1, r3
 8009c2e:	d002      	beq.n	8009c36 <__sflush_r+0x92>
 8009c30:	4628      	mov	r0, r5
 8009c32:	f000 f9d7 	bl	8009fe4 <_free_r>
 8009c36:	2000      	movs	r0, #0
 8009c38:	6360      	str	r0, [r4, #52]	; 0x34
 8009c3a:	e7c1      	b.n	8009bc0 <__sflush_r+0x1c>
 8009c3c:	6a21      	ldr	r1, [r4, #32]
 8009c3e:	2301      	movs	r3, #1
 8009c40:	4628      	mov	r0, r5
 8009c42:	47b0      	blx	r6
 8009c44:	1c41      	adds	r1, r0, #1
 8009c46:	d1c7      	bne.n	8009bd8 <__sflush_r+0x34>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d0c4      	beq.n	8009bd8 <__sflush_r+0x34>
 8009c4e:	2b1d      	cmp	r3, #29
 8009c50:	d001      	beq.n	8009c56 <__sflush_r+0xb2>
 8009c52:	2b16      	cmp	r3, #22
 8009c54:	d101      	bne.n	8009c5a <__sflush_r+0xb6>
 8009c56:	602f      	str	r7, [r5, #0]
 8009c58:	e7b1      	b.n	8009bbe <__sflush_r+0x1a>
 8009c5a:	89a3      	ldrh	r3, [r4, #12]
 8009c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c60:	81a3      	strh	r3, [r4, #12]
 8009c62:	e7ad      	b.n	8009bc0 <__sflush_r+0x1c>
 8009c64:	690f      	ldr	r7, [r1, #16]
 8009c66:	2f00      	cmp	r7, #0
 8009c68:	d0a9      	beq.n	8009bbe <__sflush_r+0x1a>
 8009c6a:	0793      	lsls	r3, r2, #30
 8009c6c:	680e      	ldr	r6, [r1, #0]
 8009c6e:	bf08      	it	eq
 8009c70:	694b      	ldreq	r3, [r1, #20]
 8009c72:	600f      	str	r7, [r1, #0]
 8009c74:	bf18      	it	ne
 8009c76:	2300      	movne	r3, #0
 8009c78:	eba6 0807 	sub.w	r8, r6, r7
 8009c7c:	608b      	str	r3, [r1, #8]
 8009c7e:	f1b8 0f00 	cmp.w	r8, #0
 8009c82:	dd9c      	ble.n	8009bbe <__sflush_r+0x1a>
 8009c84:	6a21      	ldr	r1, [r4, #32]
 8009c86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c88:	4643      	mov	r3, r8
 8009c8a:	463a      	mov	r2, r7
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	47b0      	blx	r6
 8009c90:	2800      	cmp	r0, #0
 8009c92:	dc06      	bgt.n	8009ca2 <__sflush_r+0xfe>
 8009c94:	89a3      	ldrh	r3, [r4, #12]
 8009c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c9a:	81a3      	strh	r3, [r4, #12]
 8009c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca0:	e78e      	b.n	8009bc0 <__sflush_r+0x1c>
 8009ca2:	4407      	add	r7, r0
 8009ca4:	eba8 0800 	sub.w	r8, r8, r0
 8009ca8:	e7e9      	b.n	8009c7e <__sflush_r+0xda>
 8009caa:	bf00      	nop
 8009cac:	20400001 	.word	0x20400001

08009cb0 <_fflush_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	690b      	ldr	r3, [r1, #16]
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	b913      	cbnz	r3, 8009cc0 <_fflush_r+0x10>
 8009cba:	2500      	movs	r5, #0
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	b118      	cbz	r0, 8009cca <_fflush_r+0x1a>
 8009cc2:	6983      	ldr	r3, [r0, #24]
 8009cc4:	b90b      	cbnz	r3, 8009cca <_fflush_r+0x1a>
 8009cc6:	f000 f887 	bl	8009dd8 <__sinit>
 8009cca:	4b14      	ldr	r3, [pc, #80]	; (8009d1c <_fflush_r+0x6c>)
 8009ccc:	429c      	cmp	r4, r3
 8009cce:	d11b      	bne.n	8009d08 <_fflush_r+0x58>
 8009cd0:	686c      	ldr	r4, [r5, #4]
 8009cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0ef      	beq.n	8009cba <_fflush_r+0xa>
 8009cda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cdc:	07d0      	lsls	r0, r2, #31
 8009cde:	d404      	bmi.n	8009cea <_fflush_r+0x3a>
 8009ce0:	0599      	lsls	r1, r3, #22
 8009ce2:	d402      	bmi.n	8009cea <_fflush_r+0x3a>
 8009ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ce6:	f000 f915 	bl	8009f14 <__retarget_lock_acquire_recursive>
 8009cea:	4628      	mov	r0, r5
 8009cec:	4621      	mov	r1, r4
 8009cee:	f7ff ff59 	bl	8009ba4 <__sflush_r>
 8009cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cf4:	07da      	lsls	r2, r3, #31
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	d4e0      	bmi.n	8009cbc <_fflush_r+0xc>
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	059b      	lsls	r3, r3, #22
 8009cfe:	d4dd      	bmi.n	8009cbc <_fflush_r+0xc>
 8009d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d02:	f000 f908 	bl	8009f16 <__retarget_lock_release_recursive>
 8009d06:	e7d9      	b.n	8009cbc <_fflush_r+0xc>
 8009d08:	4b05      	ldr	r3, [pc, #20]	; (8009d20 <_fflush_r+0x70>)
 8009d0a:	429c      	cmp	r4, r3
 8009d0c:	d101      	bne.n	8009d12 <_fflush_r+0x62>
 8009d0e:	68ac      	ldr	r4, [r5, #8]
 8009d10:	e7df      	b.n	8009cd2 <_fflush_r+0x22>
 8009d12:	4b04      	ldr	r3, [pc, #16]	; (8009d24 <_fflush_r+0x74>)
 8009d14:	429c      	cmp	r4, r3
 8009d16:	bf08      	it	eq
 8009d18:	68ec      	ldreq	r4, [r5, #12]
 8009d1a:	e7da      	b.n	8009cd2 <_fflush_r+0x22>
 8009d1c:	0800a418 	.word	0x0800a418
 8009d20:	0800a438 	.word	0x0800a438
 8009d24:	0800a3f8 	.word	0x0800a3f8

08009d28 <std>:
 8009d28:	2300      	movs	r3, #0
 8009d2a:	b510      	push	{r4, lr}
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8009d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d36:	6083      	str	r3, [r0, #8]
 8009d38:	8181      	strh	r1, [r0, #12]
 8009d3a:	6643      	str	r3, [r0, #100]	; 0x64
 8009d3c:	81c2      	strh	r2, [r0, #14]
 8009d3e:	6183      	str	r3, [r0, #24]
 8009d40:	4619      	mov	r1, r3
 8009d42:	2208      	movs	r2, #8
 8009d44:	305c      	adds	r0, #92	; 0x5c
 8009d46:	f7ff fdef 	bl	8009928 <memset>
 8009d4a:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <std+0x38>)
 8009d4c:	6263      	str	r3, [r4, #36]	; 0x24
 8009d4e:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <std+0x3c>)
 8009d50:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d52:	4b05      	ldr	r3, [pc, #20]	; (8009d68 <std+0x40>)
 8009d54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d56:	4b05      	ldr	r3, [pc, #20]	; (8009d6c <std+0x44>)
 8009d58:	6224      	str	r4, [r4, #32]
 8009d5a:	6323      	str	r3, [r4, #48]	; 0x30
 8009d5c:	bd10      	pop	{r4, pc}
 8009d5e:	bf00      	nop
 8009d60:	0800a1c5 	.word	0x0800a1c5
 8009d64:	0800a1e7 	.word	0x0800a1e7
 8009d68:	0800a21f 	.word	0x0800a21f
 8009d6c:	0800a243 	.word	0x0800a243

08009d70 <_cleanup_r>:
 8009d70:	4901      	ldr	r1, [pc, #4]	; (8009d78 <_cleanup_r+0x8>)
 8009d72:	f000 b8af 	b.w	8009ed4 <_fwalk_reent>
 8009d76:	bf00      	nop
 8009d78:	08009cb1 	.word	0x08009cb1

08009d7c <__sfmoreglue>:
 8009d7c:	b570      	push	{r4, r5, r6, lr}
 8009d7e:	2268      	movs	r2, #104	; 0x68
 8009d80:	1e4d      	subs	r5, r1, #1
 8009d82:	4355      	muls	r5, r2
 8009d84:	460e      	mov	r6, r1
 8009d86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d8a:	f000 f997 	bl	800a0bc <_malloc_r>
 8009d8e:	4604      	mov	r4, r0
 8009d90:	b140      	cbz	r0, 8009da4 <__sfmoreglue+0x28>
 8009d92:	2100      	movs	r1, #0
 8009d94:	e9c0 1600 	strd	r1, r6, [r0]
 8009d98:	300c      	adds	r0, #12
 8009d9a:	60a0      	str	r0, [r4, #8]
 8009d9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009da0:	f7ff fdc2 	bl	8009928 <memset>
 8009da4:	4620      	mov	r0, r4
 8009da6:	bd70      	pop	{r4, r5, r6, pc}

08009da8 <__sfp_lock_acquire>:
 8009da8:	4801      	ldr	r0, [pc, #4]	; (8009db0 <__sfp_lock_acquire+0x8>)
 8009daa:	f000 b8b3 	b.w	8009f14 <__retarget_lock_acquire_recursive>
 8009dae:	bf00      	nop
 8009db0:	240009c1 	.word	0x240009c1

08009db4 <__sfp_lock_release>:
 8009db4:	4801      	ldr	r0, [pc, #4]	; (8009dbc <__sfp_lock_release+0x8>)
 8009db6:	f000 b8ae 	b.w	8009f16 <__retarget_lock_release_recursive>
 8009dba:	bf00      	nop
 8009dbc:	240009c1 	.word	0x240009c1

08009dc0 <__sinit_lock_acquire>:
 8009dc0:	4801      	ldr	r0, [pc, #4]	; (8009dc8 <__sinit_lock_acquire+0x8>)
 8009dc2:	f000 b8a7 	b.w	8009f14 <__retarget_lock_acquire_recursive>
 8009dc6:	bf00      	nop
 8009dc8:	240009c2 	.word	0x240009c2

08009dcc <__sinit_lock_release>:
 8009dcc:	4801      	ldr	r0, [pc, #4]	; (8009dd4 <__sinit_lock_release+0x8>)
 8009dce:	f000 b8a2 	b.w	8009f16 <__retarget_lock_release_recursive>
 8009dd2:	bf00      	nop
 8009dd4:	240009c2 	.word	0x240009c2

08009dd8 <__sinit>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	4604      	mov	r4, r0
 8009ddc:	f7ff fff0 	bl	8009dc0 <__sinit_lock_acquire>
 8009de0:	69a3      	ldr	r3, [r4, #24]
 8009de2:	b11b      	cbz	r3, 8009dec <__sinit+0x14>
 8009de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009de8:	f7ff bff0 	b.w	8009dcc <__sinit_lock_release>
 8009dec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009df0:	6523      	str	r3, [r4, #80]	; 0x50
 8009df2:	4b13      	ldr	r3, [pc, #76]	; (8009e40 <__sinit+0x68>)
 8009df4:	4a13      	ldr	r2, [pc, #76]	; (8009e44 <__sinit+0x6c>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009dfa:	42a3      	cmp	r3, r4
 8009dfc:	bf04      	itt	eq
 8009dfe:	2301      	moveq	r3, #1
 8009e00:	61a3      	streq	r3, [r4, #24]
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 f820 	bl	8009e48 <__sfp>
 8009e08:	6060      	str	r0, [r4, #4]
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 f81c 	bl	8009e48 <__sfp>
 8009e10:	60a0      	str	r0, [r4, #8]
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 f818 	bl	8009e48 <__sfp>
 8009e18:	2200      	movs	r2, #0
 8009e1a:	60e0      	str	r0, [r4, #12]
 8009e1c:	2104      	movs	r1, #4
 8009e1e:	6860      	ldr	r0, [r4, #4]
 8009e20:	f7ff ff82 	bl	8009d28 <std>
 8009e24:	68a0      	ldr	r0, [r4, #8]
 8009e26:	2201      	movs	r2, #1
 8009e28:	2109      	movs	r1, #9
 8009e2a:	f7ff ff7d 	bl	8009d28 <std>
 8009e2e:	68e0      	ldr	r0, [r4, #12]
 8009e30:	2202      	movs	r2, #2
 8009e32:	2112      	movs	r1, #18
 8009e34:	f7ff ff78 	bl	8009d28 <std>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	61a3      	str	r3, [r4, #24]
 8009e3c:	e7d2      	b.n	8009de4 <__sinit+0xc>
 8009e3e:	bf00      	nop
 8009e40:	0800a3f4 	.word	0x0800a3f4
 8009e44:	08009d71 	.word	0x08009d71

08009e48 <__sfp>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	4607      	mov	r7, r0
 8009e4c:	f7ff ffac 	bl	8009da8 <__sfp_lock_acquire>
 8009e50:	4b1e      	ldr	r3, [pc, #120]	; (8009ecc <__sfp+0x84>)
 8009e52:	681e      	ldr	r6, [r3, #0]
 8009e54:	69b3      	ldr	r3, [r6, #24]
 8009e56:	b913      	cbnz	r3, 8009e5e <__sfp+0x16>
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f7ff ffbd 	bl	8009dd8 <__sinit>
 8009e5e:	3648      	adds	r6, #72	; 0x48
 8009e60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e64:	3b01      	subs	r3, #1
 8009e66:	d503      	bpl.n	8009e70 <__sfp+0x28>
 8009e68:	6833      	ldr	r3, [r6, #0]
 8009e6a:	b30b      	cbz	r3, 8009eb0 <__sfp+0x68>
 8009e6c:	6836      	ldr	r6, [r6, #0]
 8009e6e:	e7f7      	b.n	8009e60 <__sfp+0x18>
 8009e70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e74:	b9d5      	cbnz	r5, 8009eac <__sfp+0x64>
 8009e76:	4b16      	ldr	r3, [pc, #88]	; (8009ed0 <__sfp+0x88>)
 8009e78:	60e3      	str	r3, [r4, #12]
 8009e7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e7e:	6665      	str	r5, [r4, #100]	; 0x64
 8009e80:	f000 f847 	bl	8009f12 <__retarget_lock_init_recursive>
 8009e84:	f7ff ff96 	bl	8009db4 <__sfp_lock_release>
 8009e88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e90:	6025      	str	r5, [r4, #0]
 8009e92:	61a5      	str	r5, [r4, #24]
 8009e94:	2208      	movs	r2, #8
 8009e96:	4629      	mov	r1, r5
 8009e98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e9c:	f7ff fd44 	bl	8009928 <memset>
 8009ea0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ea4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eac:	3468      	adds	r4, #104	; 0x68
 8009eae:	e7d9      	b.n	8009e64 <__sfp+0x1c>
 8009eb0:	2104      	movs	r1, #4
 8009eb2:	4638      	mov	r0, r7
 8009eb4:	f7ff ff62 	bl	8009d7c <__sfmoreglue>
 8009eb8:	4604      	mov	r4, r0
 8009eba:	6030      	str	r0, [r6, #0]
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	d1d5      	bne.n	8009e6c <__sfp+0x24>
 8009ec0:	f7ff ff78 	bl	8009db4 <__sfp_lock_release>
 8009ec4:	230c      	movs	r3, #12
 8009ec6:	603b      	str	r3, [r7, #0]
 8009ec8:	e7ee      	b.n	8009ea8 <__sfp+0x60>
 8009eca:	bf00      	nop
 8009ecc:	0800a3f4 	.word	0x0800a3f4
 8009ed0:	ffff0001 	.word	0xffff0001

08009ed4 <_fwalk_reent>:
 8009ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ed8:	4606      	mov	r6, r0
 8009eda:	4688      	mov	r8, r1
 8009edc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ee0:	2700      	movs	r7, #0
 8009ee2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ee6:	f1b9 0901 	subs.w	r9, r9, #1
 8009eea:	d505      	bpl.n	8009ef8 <_fwalk_reent+0x24>
 8009eec:	6824      	ldr	r4, [r4, #0]
 8009eee:	2c00      	cmp	r4, #0
 8009ef0:	d1f7      	bne.n	8009ee2 <_fwalk_reent+0xe>
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ef8:	89ab      	ldrh	r3, [r5, #12]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d907      	bls.n	8009f0e <_fwalk_reent+0x3a>
 8009efe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f02:	3301      	adds	r3, #1
 8009f04:	d003      	beq.n	8009f0e <_fwalk_reent+0x3a>
 8009f06:	4629      	mov	r1, r5
 8009f08:	4630      	mov	r0, r6
 8009f0a:	47c0      	blx	r8
 8009f0c:	4307      	orrs	r7, r0
 8009f0e:	3568      	adds	r5, #104	; 0x68
 8009f10:	e7e9      	b.n	8009ee6 <_fwalk_reent+0x12>

08009f12 <__retarget_lock_init_recursive>:
 8009f12:	4770      	bx	lr

08009f14 <__retarget_lock_acquire_recursive>:
 8009f14:	4770      	bx	lr

08009f16 <__retarget_lock_release_recursive>:
 8009f16:	4770      	bx	lr

08009f18 <__swhatbuf_r>:
 8009f18:	b570      	push	{r4, r5, r6, lr}
 8009f1a:	460e      	mov	r6, r1
 8009f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f20:	2900      	cmp	r1, #0
 8009f22:	b096      	sub	sp, #88	; 0x58
 8009f24:	4614      	mov	r4, r2
 8009f26:	461d      	mov	r5, r3
 8009f28:	da08      	bge.n	8009f3c <__swhatbuf_r+0x24>
 8009f2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	602a      	str	r2, [r5, #0]
 8009f32:	061a      	lsls	r2, r3, #24
 8009f34:	d410      	bmi.n	8009f58 <__swhatbuf_r+0x40>
 8009f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f3a:	e00e      	b.n	8009f5a <__swhatbuf_r+0x42>
 8009f3c:	466a      	mov	r2, sp
 8009f3e:	f000 f9a7 	bl	800a290 <_fstat_r>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	dbf1      	blt.n	8009f2a <__swhatbuf_r+0x12>
 8009f46:	9a01      	ldr	r2, [sp, #4]
 8009f48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f50:	425a      	negs	r2, r3
 8009f52:	415a      	adcs	r2, r3
 8009f54:	602a      	str	r2, [r5, #0]
 8009f56:	e7ee      	b.n	8009f36 <__swhatbuf_r+0x1e>
 8009f58:	2340      	movs	r3, #64	; 0x40
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	b016      	add	sp, #88	; 0x58
 8009f60:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f64 <__smakebuf_r>:
 8009f64:	898b      	ldrh	r3, [r1, #12]
 8009f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f68:	079d      	lsls	r5, r3, #30
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	d507      	bpl.n	8009f80 <__smakebuf_r+0x1c>
 8009f70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	6123      	str	r3, [r4, #16]
 8009f78:	2301      	movs	r3, #1
 8009f7a:	6163      	str	r3, [r4, #20]
 8009f7c:	b002      	add	sp, #8
 8009f7e:	bd70      	pop	{r4, r5, r6, pc}
 8009f80:	ab01      	add	r3, sp, #4
 8009f82:	466a      	mov	r2, sp
 8009f84:	f7ff ffc8 	bl	8009f18 <__swhatbuf_r>
 8009f88:	9900      	ldr	r1, [sp, #0]
 8009f8a:	4605      	mov	r5, r0
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f000 f895 	bl	800a0bc <_malloc_r>
 8009f92:	b948      	cbnz	r0, 8009fa8 <__smakebuf_r+0x44>
 8009f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f98:	059a      	lsls	r2, r3, #22
 8009f9a:	d4ef      	bmi.n	8009f7c <__smakebuf_r+0x18>
 8009f9c:	f023 0303 	bic.w	r3, r3, #3
 8009fa0:	f043 0302 	orr.w	r3, r3, #2
 8009fa4:	81a3      	strh	r3, [r4, #12]
 8009fa6:	e7e3      	b.n	8009f70 <__smakebuf_r+0xc>
 8009fa8:	4b0d      	ldr	r3, [pc, #52]	; (8009fe0 <__smakebuf_r+0x7c>)
 8009faa:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fac:	89a3      	ldrh	r3, [r4, #12]
 8009fae:	6020      	str	r0, [r4, #0]
 8009fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb4:	81a3      	strh	r3, [r4, #12]
 8009fb6:	9b00      	ldr	r3, [sp, #0]
 8009fb8:	6163      	str	r3, [r4, #20]
 8009fba:	9b01      	ldr	r3, [sp, #4]
 8009fbc:	6120      	str	r0, [r4, #16]
 8009fbe:	b15b      	cbz	r3, 8009fd8 <__smakebuf_r+0x74>
 8009fc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	f000 f975 	bl	800a2b4 <_isatty_r>
 8009fca:	b128      	cbz	r0, 8009fd8 <__smakebuf_r+0x74>
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	f023 0303 	bic.w	r3, r3, #3
 8009fd2:	f043 0301 	orr.w	r3, r3, #1
 8009fd6:	81a3      	strh	r3, [r4, #12]
 8009fd8:	89a0      	ldrh	r0, [r4, #12]
 8009fda:	4305      	orrs	r5, r0
 8009fdc:	81a5      	strh	r5, [r4, #12]
 8009fde:	e7cd      	b.n	8009f7c <__smakebuf_r+0x18>
 8009fe0:	08009d71 	.word	0x08009d71

08009fe4 <_free_r>:
 8009fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fe6:	2900      	cmp	r1, #0
 8009fe8:	d044      	beq.n	800a074 <_free_r+0x90>
 8009fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fee:	9001      	str	r0, [sp, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ff6:	bfb8      	it	lt
 8009ff8:	18e4      	addlt	r4, r4, r3
 8009ffa:	f000 f97d 	bl	800a2f8 <__malloc_lock>
 8009ffe:	4a1e      	ldr	r2, [pc, #120]	; (800a078 <_free_r+0x94>)
 800a000:	9801      	ldr	r0, [sp, #4]
 800a002:	6813      	ldr	r3, [r2, #0]
 800a004:	b933      	cbnz	r3, 800a014 <_free_r+0x30>
 800a006:	6063      	str	r3, [r4, #4]
 800a008:	6014      	str	r4, [r2, #0]
 800a00a:	b003      	add	sp, #12
 800a00c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a010:	f000 b978 	b.w	800a304 <__malloc_unlock>
 800a014:	42a3      	cmp	r3, r4
 800a016:	d908      	bls.n	800a02a <_free_r+0x46>
 800a018:	6825      	ldr	r5, [r4, #0]
 800a01a:	1961      	adds	r1, r4, r5
 800a01c:	428b      	cmp	r3, r1
 800a01e:	bf01      	itttt	eq
 800a020:	6819      	ldreq	r1, [r3, #0]
 800a022:	685b      	ldreq	r3, [r3, #4]
 800a024:	1949      	addeq	r1, r1, r5
 800a026:	6021      	streq	r1, [r4, #0]
 800a028:	e7ed      	b.n	800a006 <_free_r+0x22>
 800a02a:	461a      	mov	r2, r3
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	b10b      	cbz	r3, 800a034 <_free_r+0x50>
 800a030:	42a3      	cmp	r3, r4
 800a032:	d9fa      	bls.n	800a02a <_free_r+0x46>
 800a034:	6811      	ldr	r1, [r2, #0]
 800a036:	1855      	adds	r5, r2, r1
 800a038:	42a5      	cmp	r5, r4
 800a03a:	d10b      	bne.n	800a054 <_free_r+0x70>
 800a03c:	6824      	ldr	r4, [r4, #0]
 800a03e:	4421      	add	r1, r4
 800a040:	1854      	adds	r4, r2, r1
 800a042:	42a3      	cmp	r3, r4
 800a044:	6011      	str	r1, [r2, #0]
 800a046:	d1e0      	bne.n	800a00a <_free_r+0x26>
 800a048:	681c      	ldr	r4, [r3, #0]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	6053      	str	r3, [r2, #4]
 800a04e:	4421      	add	r1, r4
 800a050:	6011      	str	r1, [r2, #0]
 800a052:	e7da      	b.n	800a00a <_free_r+0x26>
 800a054:	d902      	bls.n	800a05c <_free_r+0x78>
 800a056:	230c      	movs	r3, #12
 800a058:	6003      	str	r3, [r0, #0]
 800a05a:	e7d6      	b.n	800a00a <_free_r+0x26>
 800a05c:	6825      	ldr	r5, [r4, #0]
 800a05e:	1961      	adds	r1, r4, r5
 800a060:	428b      	cmp	r3, r1
 800a062:	bf04      	itt	eq
 800a064:	6819      	ldreq	r1, [r3, #0]
 800a066:	685b      	ldreq	r3, [r3, #4]
 800a068:	6063      	str	r3, [r4, #4]
 800a06a:	bf04      	itt	eq
 800a06c:	1949      	addeq	r1, r1, r5
 800a06e:	6021      	streq	r1, [r4, #0]
 800a070:	6054      	str	r4, [r2, #4]
 800a072:	e7ca      	b.n	800a00a <_free_r+0x26>
 800a074:	b003      	add	sp, #12
 800a076:	bd30      	pop	{r4, r5, pc}
 800a078:	240009c4 	.word	0x240009c4

0800a07c <sbrk_aligned>:
 800a07c:	b570      	push	{r4, r5, r6, lr}
 800a07e:	4e0e      	ldr	r6, [pc, #56]	; (800a0b8 <sbrk_aligned+0x3c>)
 800a080:	460c      	mov	r4, r1
 800a082:	6831      	ldr	r1, [r6, #0]
 800a084:	4605      	mov	r5, r0
 800a086:	b911      	cbnz	r1, 800a08e <sbrk_aligned+0x12>
 800a088:	f000 f88c 	bl	800a1a4 <_sbrk_r>
 800a08c:	6030      	str	r0, [r6, #0]
 800a08e:	4621      	mov	r1, r4
 800a090:	4628      	mov	r0, r5
 800a092:	f000 f887 	bl	800a1a4 <_sbrk_r>
 800a096:	1c43      	adds	r3, r0, #1
 800a098:	d00a      	beq.n	800a0b0 <sbrk_aligned+0x34>
 800a09a:	1cc4      	adds	r4, r0, #3
 800a09c:	f024 0403 	bic.w	r4, r4, #3
 800a0a0:	42a0      	cmp	r0, r4
 800a0a2:	d007      	beq.n	800a0b4 <sbrk_aligned+0x38>
 800a0a4:	1a21      	subs	r1, r4, r0
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f000 f87c 	bl	800a1a4 <_sbrk_r>
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	d101      	bne.n	800a0b4 <sbrk_aligned+0x38>
 800a0b0:	f04f 34ff 	mov.w	r4, #4294967295
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	bd70      	pop	{r4, r5, r6, pc}
 800a0b8:	240009c8 	.word	0x240009c8

0800a0bc <_malloc_r>:
 800a0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c0:	1ccd      	adds	r5, r1, #3
 800a0c2:	f025 0503 	bic.w	r5, r5, #3
 800a0c6:	3508      	adds	r5, #8
 800a0c8:	2d0c      	cmp	r5, #12
 800a0ca:	bf38      	it	cc
 800a0cc:	250c      	movcc	r5, #12
 800a0ce:	2d00      	cmp	r5, #0
 800a0d0:	4607      	mov	r7, r0
 800a0d2:	db01      	blt.n	800a0d8 <_malloc_r+0x1c>
 800a0d4:	42a9      	cmp	r1, r5
 800a0d6:	d905      	bls.n	800a0e4 <_malloc_r+0x28>
 800a0d8:	230c      	movs	r3, #12
 800a0da:	603b      	str	r3, [r7, #0]
 800a0dc:	2600      	movs	r6, #0
 800a0de:	4630      	mov	r0, r6
 800a0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0e4:	4e2e      	ldr	r6, [pc, #184]	; (800a1a0 <_malloc_r+0xe4>)
 800a0e6:	f000 f907 	bl	800a2f8 <__malloc_lock>
 800a0ea:	6833      	ldr	r3, [r6, #0]
 800a0ec:	461c      	mov	r4, r3
 800a0ee:	bb34      	cbnz	r4, 800a13e <_malloc_r+0x82>
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	f7ff ffc2 	bl	800a07c <sbrk_aligned>
 800a0f8:	1c43      	adds	r3, r0, #1
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	d14d      	bne.n	800a19a <_malloc_r+0xde>
 800a0fe:	6834      	ldr	r4, [r6, #0]
 800a100:	4626      	mov	r6, r4
 800a102:	2e00      	cmp	r6, #0
 800a104:	d140      	bne.n	800a188 <_malloc_r+0xcc>
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	4631      	mov	r1, r6
 800a10a:	4638      	mov	r0, r7
 800a10c:	eb04 0803 	add.w	r8, r4, r3
 800a110:	f000 f848 	bl	800a1a4 <_sbrk_r>
 800a114:	4580      	cmp	r8, r0
 800a116:	d13a      	bne.n	800a18e <_malloc_r+0xd2>
 800a118:	6821      	ldr	r1, [r4, #0]
 800a11a:	3503      	adds	r5, #3
 800a11c:	1a6d      	subs	r5, r5, r1
 800a11e:	f025 0503 	bic.w	r5, r5, #3
 800a122:	3508      	adds	r5, #8
 800a124:	2d0c      	cmp	r5, #12
 800a126:	bf38      	it	cc
 800a128:	250c      	movcc	r5, #12
 800a12a:	4629      	mov	r1, r5
 800a12c:	4638      	mov	r0, r7
 800a12e:	f7ff ffa5 	bl	800a07c <sbrk_aligned>
 800a132:	3001      	adds	r0, #1
 800a134:	d02b      	beq.n	800a18e <_malloc_r+0xd2>
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	442b      	add	r3, r5
 800a13a:	6023      	str	r3, [r4, #0]
 800a13c:	e00e      	b.n	800a15c <_malloc_r+0xa0>
 800a13e:	6822      	ldr	r2, [r4, #0]
 800a140:	1b52      	subs	r2, r2, r5
 800a142:	d41e      	bmi.n	800a182 <_malloc_r+0xc6>
 800a144:	2a0b      	cmp	r2, #11
 800a146:	d916      	bls.n	800a176 <_malloc_r+0xba>
 800a148:	1961      	adds	r1, r4, r5
 800a14a:	42a3      	cmp	r3, r4
 800a14c:	6025      	str	r5, [r4, #0]
 800a14e:	bf18      	it	ne
 800a150:	6059      	strne	r1, [r3, #4]
 800a152:	6863      	ldr	r3, [r4, #4]
 800a154:	bf08      	it	eq
 800a156:	6031      	streq	r1, [r6, #0]
 800a158:	5162      	str	r2, [r4, r5]
 800a15a:	604b      	str	r3, [r1, #4]
 800a15c:	4638      	mov	r0, r7
 800a15e:	f104 060b 	add.w	r6, r4, #11
 800a162:	f000 f8cf 	bl	800a304 <__malloc_unlock>
 800a166:	f026 0607 	bic.w	r6, r6, #7
 800a16a:	1d23      	adds	r3, r4, #4
 800a16c:	1af2      	subs	r2, r6, r3
 800a16e:	d0b6      	beq.n	800a0de <_malloc_r+0x22>
 800a170:	1b9b      	subs	r3, r3, r6
 800a172:	50a3      	str	r3, [r4, r2]
 800a174:	e7b3      	b.n	800a0de <_malloc_r+0x22>
 800a176:	6862      	ldr	r2, [r4, #4]
 800a178:	42a3      	cmp	r3, r4
 800a17a:	bf0c      	ite	eq
 800a17c:	6032      	streq	r2, [r6, #0]
 800a17e:	605a      	strne	r2, [r3, #4]
 800a180:	e7ec      	b.n	800a15c <_malloc_r+0xa0>
 800a182:	4623      	mov	r3, r4
 800a184:	6864      	ldr	r4, [r4, #4]
 800a186:	e7b2      	b.n	800a0ee <_malloc_r+0x32>
 800a188:	4634      	mov	r4, r6
 800a18a:	6876      	ldr	r6, [r6, #4]
 800a18c:	e7b9      	b.n	800a102 <_malloc_r+0x46>
 800a18e:	230c      	movs	r3, #12
 800a190:	603b      	str	r3, [r7, #0]
 800a192:	4638      	mov	r0, r7
 800a194:	f000 f8b6 	bl	800a304 <__malloc_unlock>
 800a198:	e7a1      	b.n	800a0de <_malloc_r+0x22>
 800a19a:	6025      	str	r5, [r4, #0]
 800a19c:	e7de      	b.n	800a15c <_malloc_r+0xa0>
 800a19e:	bf00      	nop
 800a1a0:	240009c4 	.word	0x240009c4

0800a1a4 <_sbrk_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	4d06      	ldr	r5, [pc, #24]	; (800a1c0 <_sbrk_r+0x1c>)
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	602b      	str	r3, [r5, #0]
 800a1b0:	f7f7 ffa2 	bl	80020f8 <_sbrk>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d102      	bne.n	800a1be <_sbrk_r+0x1a>
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	b103      	cbz	r3, 800a1be <_sbrk_r+0x1a>
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	240009cc 	.word	0x240009cc

0800a1c4 <__sread>:
 800a1c4:	b510      	push	{r4, lr}
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1cc:	f000 f8a0 	bl	800a310 <_read_r>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	bfab      	itete	ge
 800a1d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a1d8:	181b      	addge	r3, r3, r0
 800a1da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1de:	bfac      	ite	ge
 800a1e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1e2:	81a3      	strhlt	r3, [r4, #12]
 800a1e4:	bd10      	pop	{r4, pc}

0800a1e6 <__swrite>:
 800a1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ea:	461f      	mov	r7, r3
 800a1ec:	898b      	ldrh	r3, [r1, #12]
 800a1ee:	05db      	lsls	r3, r3, #23
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	4616      	mov	r6, r2
 800a1f6:	d505      	bpl.n	800a204 <__swrite+0x1e>
 800a1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	2200      	movs	r2, #0
 800a200:	f000 f868 	bl	800a2d4 <_lseek_r>
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a20a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a20e:	81a3      	strh	r3, [r4, #12]
 800a210:	4632      	mov	r2, r6
 800a212:	463b      	mov	r3, r7
 800a214:	4628      	mov	r0, r5
 800a216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a21a:	f000 b817 	b.w	800a24c <_write_r>

0800a21e <__sseek>:
 800a21e:	b510      	push	{r4, lr}
 800a220:	460c      	mov	r4, r1
 800a222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a226:	f000 f855 	bl	800a2d4 <_lseek_r>
 800a22a:	1c43      	adds	r3, r0, #1
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	bf15      	itete	ne
 800a230:	6560      	strne	r0, [r4, #84]	; 0x54
 800a232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a23a:	81a3      	strheq	r3, [r4, #12]
 800a23c:	bf18      	it	ne
 800a23e:	81a3      	strhne	r3, [r4, #12]
 800a240:	bd10      	pop	{r4, pc}

0800a242 <__sclose>:
 800a242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a246:	f000 b813 	b.w	800a270 <_close_r>
	...

0800a24c <_write_r>:
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	4d07      	ldr	r5, [pc, #28]	; (800a26c <_write_r+0x20>)
 800a250:	4604      	mov	r4, r0
 800a252:	4608      	mov	r0, r1
 800a254:	4611      	mov	r1, r2
 800a256:	2200      	movs	r2, #0
 800a258:	602a      	str	r2, [r5, #0]
 800a25a:	461a      	mov	r2, r3
 800a25c:	f7f7 fefb 	bl	8002056 <_write>
 800a260:	1c43      	adds	r3, r0, #1
 800a262:	d102      	bne.n	800a26a <_write_r+0x1e>
 800a264:	682b      	ldr	r3, [r5, #0]
 800a266:	b103      	cbz	r3, 800a26a <_write_r+0x1e>
 800a268:	6023      	str	r3, [r4, #0]
 800a26a:	bd38      	pop	{r3, r4, r5, pc}
 800a26c:	240009cc 	.word	0x240009cc

0800a270 <_close_r>:
 800a270:	b538      	push	{r3, r4, r5, lr}
 800a272:	4d06      	ldr	r5, [pc, #24]	; (800a28c <_close_r+0x1c>)
 800a274:	2300      	movs	r3, #0
 800a276:	4604      	mov	r4, r0
 800a278:	4608      	mov	r0, r1
 800a27a:	602b      	str	r3, [r5, #0]
 800a27c:	f7f7 ff07 	bl	800208e <_close>
 800a280:	1c43      	adds	r3, r0, #1
 800a282:	d102      	bne.n	800a28a <_close_r+0x1a>
 800a284:	682b      	ldr	r3, [r5, #0]
 800a286:	b103      	cbz	r3, 800a28a <_close_r+0x1a>
 800a288:	6023      	str	r3, [r4, #0]
 800a28a:	bd38      	pop	{r3, r4, r5, pc}
 800a28c:	240009cc 	.word	0x240009cc

0800a290 <_fstat_r>:
 800a290:	b538      	push	{r3, r4, r5, lr}
 800a292:	4d07      	ldr	r5, [pc, #28]	; (800a2b0 <_fstat_r+0x20>)
 800a294:	2300      	movs	r3, #0
 800a296:	4604      	mov	r4, r0
 800a298:	4608      	mov	r0, r1
 800a29a:	4611      	mov	r1, r2
 800a29c:	602b      	str	r3, [r5, #0]
 800a29e:	f7f7 ff02 	bl	80020a6 <_fstat>
 800a2a2:	1c43      	adds	r3, r0, #1
 800a2a4:	d102      	bne.n	800a2ac <_fstat_r+0x1c>
 800a2a6:	682b      	ldr	r3, [r5, #0]
 800a2a8:	b103      	cbz	r3, 800a2ac <_fstat_r+0x1c>
 800a2aa:	6023      	str	r3, [r4, #0]
 800a2ac:	bd38      	pop	{r3, r4, r5, pc}
 800a2ae:	bf00      	nop
 800a2b0:	240009cc 	.word	0x240009cc

0800a2b4 <_isatty_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	4d06      	ldr	r5, [pc, #24]	; (800a2d0 <_isatty_r+0x1c>)
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	4608      	mov	r0, r1
 800a2be:	602b      	str	r3, [r5, #0]
 800a2c0:	f7f7 ff01 	bl	80020c6 <_isatty>
 800a2c4:	1c43      	adds	r3, r0, #1
 800a2c6:	d102      	bne.n	800a2ce <_isatty_r+0x1a>
 800a2c8:	682b      	ldr	r3, [r5, #0]
 800a2ca:	b103      	cbz	r3, 800a2ce <_isatty_r+0x1a>
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	bd38      	pop	{r3, r4, r5, pc}
 800a2d0:	240009cc 	.word	0x240009cc

0800a2d4 <_lseek_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4d07      	ldr	r5, [pc, #28]	; (800a2f4 <_lseek_r+0x20>)
 800a2d8:	4604      	mov	r4, r0
 800a2da:	4608      	mov	r0, r1
 800a2dc:	4611      	mov	r1, r2
 800a2de:	2200      	movs	r2, #0
 800a2e0:	602a      	str	r2, [r5, #0]
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	f7f7 fefa 	bl	80020dc <_lseek>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d102      	bne.n	800a2f2 <_lseek_r+0x1e>
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	b103      	cbz	r3, 800a2f2 <_lseek_r+0x1e>
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	bd38      	pop	{r3, r4, r5, pc}
 800a2f4:	240009cc 	.word	0x240009cc

0800a2f8 <__malloc_lock>:
 800a2f8:	4801      	ldr	r0, [pc, #4]	; (800a300 <__malloc_lock+0x8>)
 800a2fa:	f7ff be0b 	b.w	8009f14 <__retarget_lock_acquire_recursive>
 800a2fe:	bf00      	nop
 800a300:	240009c0 	.word	0x240009c0

0800a304 <__malloc_unlock>:
 800a304:	4801      	ldr	r0, [pc, #4]	; (800a30c <__malloc_unlock+0x8>)
 800a306:	f7ff be06 	b.w	8009f16 <__retarget_lock_release_recursive>
 800a30a:	bf00      	nop
 800a30c:	240009c0 	.word	0x240009c0

0800a310 <_read_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4d07      	ldr	r5, [pc, #28]	; (800a330 <_read_r+0x20>)
 800a314:	4604      	mov	r4, r0
 800a316:	4608      	mov	r0, r1
 800a318:	4611      	mov	r1, r2
 800a31a:	2200      	movs	r2, #0
 800a31c:	602a      	str	r2, [r5, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	f7f7 fe7c 	bl	800201c <_read>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_read_r+0x1e>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_read_r+0x1e>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	240009cc 	.word	0x240009cc

0800a334 <_init>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	bf00      	nop
 800a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33a:	bc08      	pop	{r3}
 800a33c:	469e      	mov	lr, r3
 800a33e:	4770      	bx	lr

0800a340 <_fini>:
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a342:	bf00      	nop
 800a344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a346:	bc08      	pop	{r3}
 800a348:	469e      	mov	lr, r3
 800a34a:	4770      	bx	lr
